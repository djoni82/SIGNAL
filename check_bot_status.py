#!/usr/bin/env python3
"""
Check Bot Status - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞
"""

import time
import psutil
import subprocess
import os

def check_bot_status():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ CryptoAlphaPro Bot...")
    
    # –ò—â–µ–º –ø—Ä–æ—Ü–µ—Å—Å –±–æ—Ç–∞
    bot_processes = []
    for proc in psutil.process_iter(['pid', 'name', 'cmdline']):
        try:
            if 'universal_crypto_alpha_bot.py' in ' '.join(proc.info['cmdline'] or []):
                bot_processes.append(proc)
        except (psutil.NoSuchProcess, psutil.AccessDenied):
            pass
    
    if bot_processes:
        print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        for proc in bot_processes:
            print(f"   PID: {proc.info['pid']}")
            print(f"   –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {time.strftime('%H:%M:%S', time.localtime(proc.create_time()))}")
            print(f"   –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {time.time() - proc.create_time():.0f} —Å–µ–∫—É–Ω–¥")
            print(f"   CPU: {proc.cpu_percent():.1f}%")
            print(f"   RAM: {proc.memory_info().rss / 1024 / 1024:.1f} MB")
    else:
        print("‚ùå –ë–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω!")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã
    print("\nüìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤:")
    files_to_check = [
        'universal_crypto_alpha_bot.py',
        'advanced_ai_engine.py',
        'universal_data_manager.py',
        'signal_explainer.py',
        'advanced_technical_analyzer.py'
    ]
    
    for file in files_to_check:
        if os.path.exists(file):
            print(f"   ‚úÖ {file}")
        else:
            print(f"   ‚ùå {file} - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    print("\nüì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:")
    try:
        import pandas
        print("   ‚úÖ pandas")
    except ImportError:
        print("   ‚ùå pandas - –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    try:
        import numpy
        print("   ‚úÖ numpy")
    except ImportError:
        print("   ‚ùå numpy - –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    try:
        import aiohttp
        print("   ‚úÖ aiohttp")
    except ImportError:
        print("   ‚ùå aiohttp - –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    try:
        import asyncio
        print("   ‚úÖ asyncio")
    except ImportError:
        print("   ‚ùå asyncio - –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

def test_signal_generation_time():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤"""
    print("\n‚è±Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤...")
    
    start_time = time.time()
    
    try:
        result = subprocess.run([
            'python', 'test_signal_generation.py'
        ], capture_output=True, text=True, timeout=30)
        
        end_time = time.time()
        execution_time = end_time - start_time
        
        print(f"‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {execution_time:.2f} —Å–µ–∫—É–Ω–¥")
        
        if result.stdout:
            print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
            lines = result.stdout.strip().split('\n')
            for line in lines[-5:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å—Ç—Ä–æ–∫
                if line.strip():
                    print(f"   {line}")
        
        if result.stderr:
            print("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:")
            print(f"   {result.stderr}")
            
    except subprocess.TimeoutExpired:
        print("‚ùå –¢–µ—Å—Ç –ø—Ä–µ–≤—ã—Å–∏–ª –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏ (30 —Å–µ–∫—É–Ω–¥)")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

if __name__ == "__main__":
    check_bot_status()
    test_signal_generation_time()
    
    print("\nüéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    print("1. –ï—Å–ª–∏ –±–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: python universal_crypto_alpha_bot.py")
    print("2. –î–ª—è Telegram –±–æ—Ç–∞: python telegram_test_bot.py (–∑–∞–º–µ–Ω–∏—Ç–µ TOKEN)")
    print("3. –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: python test_signal_generation.py")
    print("4. –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞ 343 –ø–∞—Ä: ~15-20 —Å–µ–∫—É–Ω–¥")
    print("5. –ß–∞—Å—Ç–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç") 