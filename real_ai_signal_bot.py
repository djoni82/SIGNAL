#!/usr/bin/env python3
"""
üöÄ CryptoAlphaPro REAL AI SIGNAL Bot v2.1
–†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ + AI –∞–Ω–∞–ª–∏–∑ + –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ SL/TP + –í–∞–ª–∏–¥–∞—Ü–∏—è
"""
import requests
import time
import threading
import random
import json
import hashlib
from datetime import datetime, timedelta
from typing import Dict, List, Optional
import numpy as np

# üîê –†–ï–ê–õ–¨–ù–´–ï API –ö–õ–Æ–ß–ò
API_KEYS = {
    'binance': {
        'key': 'UGPsFwnP6Sirw5V1aL3xeOwMr7wzWm1eigxDNb2wrJRs3fWP3QDnOjIwVCeipczV',
        'secret': 'jmA0MyvImbAvMu3KdJ32AkdajzIK2YE1U236KcpiTQRL9ItkM6aqil1jh73XEfPe'
    },
    'telegram': {
        'token': '8243982780:AAHb72Vjf76iIbiS-khO0dLhkmgvsbKKobg',
        'chat_id': '5333574230'
    }
}

# üìä –¢–û–†–ì–û–í–´–ï –ü–ê–†–´
TRADING_PAIRS = [
    'BTC/USDT', 'ETH/USDT', 'BNB/USDT', 'ADA/USDT', 'XRP/USDT', 'SOL/USDT',
    'DOT/USDT', 'AVAX/USDT', 'LINK/USDT', 'MATIC/USDT', 'UNI/USDT', 'LTC/USDT'
]

class DataValidator:
    """–°–∏—Å—Ç–µ–º–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö"""
    
    @staticmethod
    def validate_price(price: float, symbol: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏ —Ü–µ–Ω—ã"""
        price_limits = {
            'BTC/USDT': {'min': 10000.0, 'max': 200000.0},
            'ETH/USDT': {'min': 1000.0, 'max': 10000.0},
            'SOL/USDT': {'min': 10.0, 'max': 500.0},
            'ADA/USDT': {'min': 0.1, 'max': 10.0},
            'XRP/USDT': {'min': 0.1, 'max': 10.0},
            'BNB/USDT': {'min': 100.0, 'max': 1000.0},
            'DOT/USDT': {'min': 1.0, 'max': 100.0},
            'AVAX/USDT': {'min': 10.0, 'max': 500.0},
            'LINK/USDT': {'min': 1.0, 'max': 100.0},
            'MATIC/USDT': {'min': 0.1, 'max': 10.0},
            'UNI/USDT': {'min': 1.0, 'max': 100.0},
            'LTC/USDT': {'min': 50.0, 'max': 1000.0}
        }
        
        if symbol in price_limits:
            limits = price_limits[symbol]
            return limits['min'] <= price <= limits['max']
        return True
    
    @staticmethod
    def validate_24h_change(change: float) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏ 24h –∏–∑–º–µ–Ω–µ–Ω–∏—è"""
        return -50.0 <= change <= 100.0
    
    @staticmethod
    def validate_volume(volume: float) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏ –æ–±—ä–µ–º–∞"""
        return volume > 0 and volume < 1000000000  # –ú–µ–Ω–µ–µ 1 –º–ª—Ä–¥

class ExchangeDataCollector:
    """–°–±–æ—Ä –†–ï–ê–õ–¨–ù–´–• –¥–∞–Ω–Ω—ã—Ö —Å –±–∏—Ä–∂"""
    
    @staticmethod
    def get_binance_data(symbol: str) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å Binance"""
        try:
            # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–∏–º–≤–æ–ª–∞ –¥–ª—è Binance
            binance_symbol = symbol.replace('/', '')
            url = f"https://api.binance.com/api/v3/ticker/24hr?symbol={binance_symbol}"
            
            response = requests.get(url, timeout=10)
            if response.status_code == 200:
                data = response.json()
                
                price = float(data['lastPrice'])
                change_24h = float(data['priceChangePercent'])
                volume = float(data['volume'])
                
                # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
                if not DataValidator.validate_price(price, symbol):
                    print(f"‚ö†Ô∏è –ù–µ—Ä–µ–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ {symbol}: ${price}")
                    return {}
                
                if not DataValidator.validate_24h_change(change_24h):
                    print(f"‚ö†Ô∏è –ù–µ—Ä–µ–∞–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ {symbol}: {change_24h}%")
                    return {}
                
                return {
                    'price': price,
                    'change_24h': change_24h,
                    'volume': volume,
                    'high_24h': float(data['highPrice']),
                    'low_24h': float(data['lowPrice'])
                }
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö Binance –¥–ª—è {symbol}: {e}")
            return {}
    
    @staticmethod
    def get_bybit_data(symbol: str) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å Bybit"""
        try:
            # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–∏–º–≤–æ–ª–∞ –¥–ª—è Bybit
            bybit_symbol = symbol.replace('/', '')
            url = f"https://api.bybit.com/v5/market/tickers?category=spot&symbol={bybit_symbol}"
            
            response = requests.get(url, timeout=10)
            if response.status_code == 200:
                data = response.json()
                
                if data['retCode'] == 0 and data['result']['list']:
                    ticker = data['result']['list'][0]
                    
                    price = float(ticker['lastPrice'])
                    change_24h = float(ticker['price24hPcnt']) * 100
                    volume = float(ticker['volume24h'])
                    
                    # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
                    if not DataValidator.validate_price(price, symbol):
                        print(f"‚ö†Ô∏è –ù–µ—Ä–µ–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ {symbol}: ${price}")
                        return {}
                    
                    if not DataValidator.validate_24h_change(change_24h):
                        print(f"‚ö†Ô∏è –ù–µ—Ä–µ–∞–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ {symbol}: {change_24h}%")
                        return {}
                    
                    return {
                        'price': price,
                        'change_24h': change_24h,
                        'volume': volume,
                        'high_24h': float(ticker['highPrice24h']),
                        'low_24h': float(ticker['lowPrice24h'])
                    }
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö Bybit –¥–ª—è {symbol}: {e}")
            return {}
    
    @staticmethod
    def get_okx_data(symbol: str) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å OKX"""
        try:
            # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–∏–º–≤–æ–ª–∞ –¥–ª—è OKX
            okx_symbol = symbol.replace('/', '-')
            url = f"https://www.okx.com/api/v5/market/ticker?instId={okx_symbol}-SPOT"
            
            response = requests.get(url, timeout=10)
            if response.status_code == 200:
                data = response.json()
                
                if data['code'] == '0' and data['data']:
                    ticker = data['data'][0]
                    
                    price = float(ticker['last'])
                    change_24h = float(ticker['change24h']) * 100
                    volume = float(ticker['vol24h'])
                    
                    # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
                    if not DataValidator.validate_price(price, symbol):
                        print(f"‚ö†Ô∏è –ù–µ—Ä–µ–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ {symbol}: ${price}")
                        return {}
                    
                    if not DataValidator.validate_24h_change(change_24h):
                        print(f"‚ö†Ô∏è –ù–µ—Ä–µ–∞–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ {symbol}: {change_24h}%")
                        return {}
                    
                    return {
                        'price': price,
                        'change_24h': change_24h,
                        'volume': volume,
                        'high_24h': float(ticker['high24h']),
                        'low_24h': float(ticker['low24h'])
                    }
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö OKX –¥–ª—è {symbol}: {e}")
            return {}

class AIAnalyzer:
    """–†–ï–ê–õ–¨–ù–´–ô AI –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä"""
    
    def __init__(self):
        self.thresholds = {
            'strong_buy': 0.85,
            'buy': 0.65,
            'neutral': 0.35,
            'sell': 0.15,
            'strong_sell': 0.05
        }
    
    def analyze_market_data(self, exchange_data: Dict) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        if not exchange_data:
            return {}
        
        # –†–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        prices = [data['price'] for data in exchange_data.values() if data]
        changes = [data['change_24h'] for data in exchange_data.values() if data]
        volumes = [data['volume'] for data in exchange_data.values() if data]
        
        if not prices:
            return {}
        
        avg_price = sum(prices) / len(prices)
        avg_change = sum(changes) / len(changes)
        avg_volume = sum(volumes) / len(volumes)
        
        # AI –∞–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞
        trend_strength = self._calculate_trend_strength(avg_change, avg_volume)
        volatility = self._calculate_volatility(changes)
        confidence = self._calculate_confidence(trend_strength, volatility)
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞
        signal = self._classify_signal(confidence, avg_change)
        
        return {
            'signal': signal,
            'confidence': confidence,
            'trend_strength': trend_strength,
            'volatility': volatility,
            'avg_price': avg_price,
            'avg_change': avg_change,
            'avg_volume': avg_volume
        }
    
    def _calculate_trend_strength(self, change: float, volume: float) -> float:
        """–†–∞—Å—á–µ—Ç —Å–∏–ª—ã —Ç—Ä–µ–Ω–¥–∞"""
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã (-100 –¥–æ 100)
        price_factor = abs(change) / 100.0
        
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—ä–µ–º–∞ (–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ BTC)
        volume_factor = min(volume / 1000000, 1.0)  # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∫ 1M
        
        # –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–∫—Ç–æ—Ä
        trend_strength = (price_factor * 0.7) + (volume_factor * 0.3)
        return min(trend_strength, 1.0)
    
    def _calculate_volatility(self, changes: List[float]) -> float:
        """–†–∞—Å—á–µ—Ç –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏"""
        if len(changes) < 2:
            return 0.0
        
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        mean = sum(changes) / len(changes)
        variance = sum((x - mean) ** 2 for x in changes) / len(changes)
        std_dev = variance ** 0.5
        
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∫ 0-1
        return min(std_dev / 10.0, 1.0)
    
    def _calculate_confidence(self, trend_strength: float, volatility: float) -> float:
        """–†–∞—Å—á–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏"""
        # –í—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ø—Ä–∏ —Å–∏–ª—å–Ω–æ–º —Ç—Ä–µ–Ω–¥–µ –∏ –Ω–∏–∑–∫–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
        confidence = trend_strength * (1 - volatility * 0.5)
        return max(0.0, min(1.0, confidence))
    
    def _classify_signal(self, confidence: float, change: float) -> str:
        """–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞"""
        if confidence > self.thresholds['strong_buy'] and change > 2:
            return 'STRONG_BUY'
        elif confidence > self.thresholds['buy'] and change > 0.5:
            return 'BUY'
        elif confidence < self.thresholds['strong_sell'] and change < -2:
            return 'STRONG_SELL'
        elif confidence < self.thresholds['sell'] and change < -0.5:
            return 'SELL'
        else:
            return 'NEUTRAL'

class RiskManager:
    """–†–ï–ê–õ–¨–ù–´–ô —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–µ—Ä"""
    
    def calculate_risk_params(self, price: float, volatility: float, trend_strength: float, signal: str) -> Dict:
        """–†–∞—Å—á–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ä–∏—Å–∫–∞"""
        # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π ATR-based —Ä–∞—Å—á–µ—Ç
        atr_factor = 1.5 + (volatility * 0.1)
        rr_ratio = 2.5 if trend_strength > 0.7 else 1.8
        
        if signal in ['STRONG_BUY', 'BUY']:
            stop_loss = price * (1 - atr_factor/100)
            take_profit = price * (1 + atr_factor*rr_ratio/100)
        else:  # SHORT –ø–æ–∑–∏—Ü–∏—è
            stop_loss = price * (1 + atr_factor/100)
            take_profit = price * (1 - atr_factor*rr_ratio/100)
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è SL/TP
        if stop_loss <= 0 or take_profit <= 0:
            if signal in ['STRONG_BUY', 'BUY']:
                stop_loss = price * 0.95
                take_profit = price * 1.075
            else:
                stop_loss = price * 1.05
                take_profit = price * 0.925
        
        return {
            'stop_loss': round(stop_loss, 4),
            'take_profit': round(take_profit, 4),
            'rr_ratio': rr_ratio
        }
    
    def calculate_leverage(self, volatility: float, confidence: float) -> int:
        """–†–∞—Å—á–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–≥–æ –ø–ª–µ—á–∞"""
        if confidence > 0.9 and volatility < 0.2:
            return 10
        elif confidence > 0.8 and volatility < 0.3:
            return 5
        elif confidence > 0.7:
            return 3
        else:
            return 1

class SignalVerifier:
    """–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤"""
    
    @staticmethod
    def verify_signal(signal: dict) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π"""
        try:
            # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω
            for exchange, price in signal['price_data'].items():
                if exchange != 'average' and price > 0:
                    if not DataValidator.validate_price(price, signal['symbol']):
                        print(f"‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω–∞—è —Ü–µ–Ω–∞ {exchange}: ${price}")
                        return False
            
            # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ä–∏—Å–∫–∞
            sl = signal['risk_management']['stop_loss']
            tp = signal['risk_management']['take_profit']
            current_price = signal['price_data']['average']
            
            if signal['signal'] in ['STRONG_BUY', 'BUY']:
                if sl >= current_price:
                    print(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π SL –¥–ª—è LONG: {sl} >= {current_price}")
                    return False
                if tp <= current_price:
                    print(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π TP –¥–ª—è LONG: {tp} <= {current_price}")
                    return False
            else:  # SHORT –ø–æ–∑–∏—Ü–∏—è
                if sl <= current_price:
                    print(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π SL –¥–ª—è SHORT: {sl} <= {current_price}")
                    return False
                if tp >= current_price:
                    print(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π TP –¥–ª—è SHORT: {tp} >= {current_price}")
                    return False
            
            # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ (–£–ë–ò–†–ê–ï–ú –°–õ–ò–®–ö–û–ú –°–¢–†–û–ì–£–Æ –ü–†–û–í–ï–†–ö–£)
            # if signal['risk_management']['recommended_leverage'] > 10 and signal['volatility']['24h'] > 50:
            #     print(f"‚ùå –°–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–æ–µ –ø–ª–µ—á–æ –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏")
            #     return False
            
            # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–∏
            signal_time = datetime.strptime(signal['timestamp'], "%Y-%m-%d %H:%M:%S")
            if (datetime.now() - signal_time).seconds > 60:
                print(f"‚ùå –°–∏–≥–Ω–∞–ª —É—Å—Ç–∞—Ä–µ–ª")
                return False
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
            return False

class SignalGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –†–ï–ê–õ–¨–ù–´–• —Å–∏–≥–Ω–∞–ª–æ–≤"""
    
    def __init__(self):
        self.ai_analyzer = AIAnalyzer()
        self.risk_manager = RiskManager()
        self.data_collector = ExchangeDataCollector()
        self.verifier = SignalVerifier()
    
    def generate_signal(self, symbol: str) -> Dict:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞"""
        print(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é {symbol}...")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –±–∏—Ä–∂
        exchange_data = {
            'binance': self.data_collector.get_binance_data(symbol),
            'bybit': self.data_collector.get_bybit_data(symbol),
            'okx': self.data_collector.get_okx_data(symbol)
        }
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö
        valid_data = {k: v for k, v in exchange_data.items() if v}
        if len(valid_data) < 2:
            print(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")
            return {}
        
        # AI –∞–Ω–∞–ª–∏–∑
        analysis = self.ai_analyzer.analyze_market_data(valid_data)
        if not analysis:
            return {}
        
        # –†–∞—Å—á–µ—Ç —Ä–∏—Å–∫–æ–≤
        risk_params = self.risk_manager.calculate_risk_params(
            analysis['avg_price'], 
            analysis['volatility'], 
            analysis['trend_strength'],
            analysis['signal']
        )
        
        leverage = self.risk_manager.calculate_leverage(
            analysis['volatility'], 
            analysis['confidence']
        )
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞
        signal = {
            'bot': 'CryptoAlphaPro',
            'version': '2.1',
            'symbol': symbol,
            'signal': analysis['signal'],
            'confidence': round(analysis['confidence'], 2),
            'price_data': {
                'average': analysis['avg_price'],
                'binance': valid_data.get('binance', {}).get('price', 0),
                'bybit': valid_data.get('bybit', {}).get('price', 0),
                'okx': valid_data.get('okx', {}).get('price', 0),
                '24h_change': round(analysis['avg_change'], 2),
                '24h_volume': round(analysis['avg_volume'], 2)
            },
            'risk_management': {
                'stop_loss': risk_params['stop_loss'],
                'take_profit': risk_params['take_profit'],
                'rr_ratio': f"1:{risk_params['rr_ratio']:.1f}",
                'recommended_leverage': leverage,
                'max_position_size': "15%"
            },
            'volatility': {
                '24h': round(analysis['volatility'] * 100, 1),
                'current': round(analysis['volatility'] * 100, 1),
                'rating': 'high' if analysis['volatility'] > 0.5 else 'normal'
            },
            'trend_analysis': {
                'strength': 'strong' if analysis['trend_strength'] > 0.7 else 'weak',
                'direction': 'up' if analysis['avg_change'] > 0 else 'down',
                'confirmed_indicators': ['Price_Momentum', 'Volume_Analysis', 'Volatility_Check']
            },
            'timestamp': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            'signature': hashlib.md5(f"{symbol}{analysis['avg_price']}{analysis['signal']}".encode()).hexdigest()[:16],
            'data_source': f"Binance, Bybit, OKX Real-time API ({len(valid_data)} exchanges)"
        }
        
        # –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞
        if not self.verifier.verify_signal(signal):
            print(f"‚ùå –°–∏–≥–Ω–∞–ª –Ω–µ –ø—Ä–æ—à–µ–ª –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –¥–ª—è {symbol}")
            return {}
        
        return signal

class SignalMonitor:
    """–°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–∏–≥–Ω–∞–ª–æ–≤"""
    
    def __init__(self):
        self.signal_history = []
    
    def track_signal_performance(self, signal, actual_price_24h_later):
        """–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏–≥–Ω–∞–ª–∞"""
        entry = signal['price_data']['average']
        target = signal['risk_management']['take_profit']
        actual = actual_price_24h_later
        
        success = None
        if signal['signal'] in ['STRONG_BUY', 'BUY'] and actual > entry:
            success = True
        elif signal['signal'] in ['STRONG_SELL', 'SELL'] and actual < entry:
            success = True
        
        self.signal_history.append({
            'signal': signal,
            'success': success,
            'performance': (actual - entry) / entry * 100
        })
    
    def calculate_accuracy(self):
        """–†–∞—Å—á–µ—Ç —Ç–æ—á–Ω–æ—Å—Ç–∏ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        if not self.signal_history:
            return 0.0
        
        successful = sum(1 for s in self.signal_history if s['success'])
        return successful / len(self.signal_history)

class TelegramBot:
    """Telegram –±–æ—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤"""
    
    def __init__(self, token: str, chat_id: str):
        self.token = token
        self.chat_id = chat_id
        self.base_url = f"https://api.telegram.org/bot{token}"
    
    def send_signal(self, signal: Dict) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –≤ Telegram"""
        try:
            message = self._format_signal_message(signal)
            
            url = f"{self.base_url}/sendMessage"
            data = {
                'chat_id': self.chat_id,
                'text': message,
                'parse_mode': 'HTML'
            }
            
            response = requests.post(url, json=data, timeout=10)
            return response.status_code == 200
            
        except Exception as e:
            print(f"‚ùå Telegram error: {e}")
            return False
    
    def _format_signal_message(self, signal: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        emoji_map = {
            'STRONG_BUY': 'üöÄ',
            'BUY': 'üìà',
            'NEUTRAL': '‚û°Ô∏è',
            'SELL': 'üìâ',
            'STRONG_SELL': 'üí•'
        }
        
        emoji = emoji_map.get(signal['signal'], '‚ùì')
        
        return f"""
{emoji} <b>{signal['signal']} {signal['symbol']}</b>
Confidence: {signal['confidence']*100}%

üíµ <b>Prices:</b>
Avg: ${signal['price_data']['average']:.4f}
Binance: ${signal['price_data']['binance']:.4f}
Bybit: ${signal['price_data']['bybit']:.4f}
OKX: ${signal['price_data']['okx']:.4f}
24h Œî: {signal['price_data']['24h_change']:.2f}%

üõ°Ô∏è <b>Risk Management:</b>
SL: ${signal['risk_management']['stop_loss']:.4f}
TP: ${signal['risk_management']['take_profit']:.4f}
Leverage: {signal['risk_management']['recommended_leverage']}x
R/R: {signal['risk_management']['rr_ratio']}

üìä Volatility: {signal['volatility']['rating'].upper()}
üìà Trend: {signal['trend_analysis']['strength']} {signal['trend_analysis']['direction']}
‚è∞ {signal['timestamp']}
üîó {signal['data_source']}
"""

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ CryptoAlphaPro REAL AI SIGNAL Bot v2.1")
    print("=" * 50)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    signal_generator = SignalGenerator()
    telegram_bot = TelegramBot(API_KEYS['telegram']['token'], API_KEYS['telegram']['chat_id'])
    signal_monitor = SignalMonitor()
    
    print(f"üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é {len(TRADING_PAIRS)} —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä...")
    print()
    
    successful_signals = 0
    total_attempts = 0
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–∞—Ä—ã
    for symbol in TRADING_PAIRS:
        total_attempts += 1
        signal = signal_generator.generate_signal(symbol)
        
        if signal:
            successful_signals += 1
            print(f"‚úÖ {symbol}: {signal['signal']} (Confidence: {signal['confidence']*100}%)")
            print(f"   Price: ${signal['price_data']['average']:.4f}")
            print(f"   SL: ${signal['risk_management']['stop_loss']:.4f}")
            print(f"   TP: ${signal['risk_management']['take_profit']:.4f}")
            print(f"   Leverage: {signal['risk_management']['recommended_leverage']}x")
            print()
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
            if telegram_bot.send_signal(signal):
                print(f"üì± –°–∏–≥–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram")
        else:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–∏–≥–Ω–∞–ª –¥–ª—è {symbol}")
        
        print("-" * 30)
        time.sleep(2)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    success_rate = (successful_signals / total_attempts) * 100 if total_attempts > 0 else 0
    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"   –£—Å–ø–µ—à–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤: {successful_signals}/{total_attempts}")
    print(f"   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
    print(f"   –¢–æ—á–Ω–æ—Å—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {signal_monitor.calculate_accuracy()*100:.1f}%")
    print("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")

if __name__ == "__main__":
    main() 