#!/usr/bin/env python3
"""
–î–µ—Ç–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç —Å–∫–∞–ª—å–ø–∏–Ω–≥ –º–æ–¥—É–ª—è —Å –æ—Ç–ª–∞–¥–∫–æ–π
"""

import asyncio
from scalping_engine import ScalpingSignalEngine
from alpha_signal_bot_main import UniversalDataManager

async def test_scalping_debug():
    print("‚ö° –î–ï–¢–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –°–ö–ê–õ–¨–ü–ò–ù–ì –ú–û–î–£–õ–Ø")
    print("=" * 60)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–≤–∏–∂–∫–∏ —Å –æ—á–µ–Ω—å –Ω–∏–∑–∫–∏–º–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏
    data_manager = UniversalDataManager()
    scalping_engine = ScalpingSignalEngine(min_confidence=0.50, min_filters=2)  # –û–ß–ï–ù–¨ –Ω–∏–∑–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
    
    symbol = 'BTC/USDT'
    print(f"\nüîç –î–µ—Ç–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç {symbol}...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
        ohlcv_data = await data_manager.get_multi_timeframe_data(
            symbol, ['1m', '5m', '15m']
        )
        
        if ohlcv_data:
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤: {list(ohlcv_data.keys())}")
            
            for tf, data in ohlcv_data.items():
                if data and data.get('historical_data'):
                    print(f"  {tf}: {len(data['historical_data'])} —Å–≤–µ—á–µ–π")
                else:
                    print(f"  {tf}: –ù–ï–¢ –¥–∞–Ω–Ω—ã—Ö")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
            main_tf = ohlcv_data.get('5m') or ohlcv_data.get('1m')
            if main_tf and main_tf.get('current'):
                current_price = main_tf['current']['close']
                print(f"üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${current_price:.6f}")
                
                # –í—Ä—É—á–Ω—É—é —Ç–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
                available_tfs = []
                tf_analysis = {}
                
                for tf in ['1m', '5m', '15m']:
                    if tf in ohlcv_data and ohlcv_data[tf] and ohlcv_data[tf].get('historical_data'):
                        if len(ohlcv_data[tf]['historical_data']) >= 30:
                            available_tfs.append(tf)
                            analysis = scalping_engine._analyze_scalping_timeframe(ohlcv_data[tf], tf)
                            if analysis:
                                tf_analysis[tf] = analysis
                                print(f"\nüìä –ê–Ω–∞–ª–∏–∑ {tf}:")
                                print(f"  RSI: {analysis.get('rsi_fast', 'N/A'):.1f}")
                                print(f"  EMA8: {analysis.get('ema_8', 'N/A'):.6f}")
                                print(f"  EMA21: {analysis.get('ema_21', 'N/A'):.6f}")
                                print(f"  EMA Cross: {analysis.get('ema_cross', 'N/A')}")
                                print(f"  MACD Hist: {analysis.get('macd_fast', {}).get('histogram', 'N/A')}")
                                print(f"  ADX: {analysis.get('adx_fast', 'N/A'):.1f}")
                                print(f"  Vol Momentum: {analysis.get('volume_momentum', 'N/A'):.1f}%")
                                print(f"  Price Momentum: {analysis.get('price_momentum', 'N/A'):.1f}%")
                            else:
                                print(f"\n‚ùå –ê–Ω–∞–ª–∏–∑ {tf} –Ω–µ —É–¥–∞–ª—Å—è")
                
                print(f"\nüéØ –î–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤: {len(available_tfs)}")
                print(f"üéØ –£—Å–ø–µ—à–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤: {len(tf_analysis)}")
                
                if len(tf_analysis) >= 2:
                    print(f"\n‚ö° –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ü–µ–Ω–∫—É —Ñ–∏–ª—å—Ç—Ä–æ–≤...")
                    
                    # –í—Ä—É—á–Ω—É—é –æ—Ü–µ–Ω–∏–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
                    bullish_filters = 0
                    bearish_filters = 0
                    total_filters = 0
                    filter_details = []
                    
                    for tf, analysis in tf_analysis.items():
                        print(f"\nüìã –§–∏–ª—å—Ç—Ä—ã –¥–ª—è {tf}:")
                        
                        # 1. RSI —Ñ–∏–ª—å—Ç—Ä
                        rsi = analysis.get('rsi_fast', 50)
                        if rsi > 65:
                            bearish_filters += 1
                            filter_details.append(f"{tf} RSI={rsi:.1f} (SELL)")
                            print(f"  ‚ùå RSI={rsi:.1f} > 65 -> SELL")
                        elif rsi < 35:
                            bullish_filters += 1
                            filter_details.append(f"{tf} RSI={rsi:.1f} (BUY)")
                            print(f"  ‚úÖ RSI={rsi:.1f} < 35 -> BUY")
                        else:
                            print(f"  ‚ö™ RSI={rsi:.1f} -> NEUTRAL")
                        total_filters += 1
                        
                        # 2. MACD —Ñ–∏–ª—å—Ç—Ä
                        macd = analysis.get('macd_fast', {})
                        hist = macd.get('histogram', 0)
                        if hist > 0:
                            bullish_filters += 1
                            filter_details.append(f"{tf} MACD+ (BUY)")
                            print(f"  ‚úÖ MACD Hist={hist:.6f} > 0 -> BUY")
                        else:
                            bearish_filters += 1
                            filter_details.append(f"{tf} MACD- (SELL)")
                            print(f"  ‚ùå MACD Hist={hist:.6f} <= 0 -> SELL")
                        total_filters += 1
                        
                        # 3. EMA Cross —Ñ–∏–ª—å—Ç—Ä
                        ema_cross = analysis.get('ema_cross', 0)
                        if ema_cross > 0:
                            bullish_filters += 1
                            filter_details.append(f"{tf} EMA8>21 (BUY)")
                            print(f"  ‚úÖ EMA Cross > 0 -> BUY")
                        else:
                            bearish_filters += 1
                            filter_details.append(f"{tf} EMA8<21 (SELL)")
                            print(f"  ‚ùå EMA Cross <= 0 -> SELL")
                        total_filters += 1
                    
                    print(f"\nüìä –ò–¢–û–ì–û–í–´–ï –§–ò–õ–¨–¢–†–´:")
                    print(f"  –ë—ã—á—å–∏—Ö: {bullish_filters}")
                    print(f"  –ú–µ–¥–≤–µ–∂—å–∏—Ö: {bearish_filters}")
                    print(f"  –í—Å–µ–≥–æ: {total_filters}")
                    
                    if bullish_filters >= 2:
                        confidence = bullish_filters / total_filters
                        print(f"  –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence*100:.1f}%")
                        if confidence >= 0.50:
                            print(f"  ‚úÖ –°–ò–ì–ù–ê–õ –ù–ê–ô–î–ï–ù! BUY —Å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é {confidence*100:.1f}%")
                        else:
                            print(f"  ‚ùå –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∞—è ({confidence*100:.1f}% < 50%)")
                    elif bearish_filters >= 2:
                        confidence = bearish_filters / total_filters
                        print(f"  –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence*100:.1f}%")
                        if confidence >= 0.50:
                            print(f"  ‚úÖ –°–ò–ì–ù–ê–õ –ù–ê–ô–î–ï–ù! SELL —Å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é {confidence*100:.1f}%")
                        else:
                            print(f"  ‚ùå –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∞—è ({confidence*100:.1f}% < 50%)")
                    else:
                        print(f"  ‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤ (–Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2)")
                    
                    # –¢–µ–ø–µ—Ä—å –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑
                    print(f"\nüî• –ü–û–õ–ù–´–ô –ê–ù–ê–õ–ò–ó –°–ö–ê–õ–¨–ü–ò–ù–ì–ê:")
                    scalp_signal = await scalping_engine.analyze_scalping_signal(
                        symbol, ohlcv_data, current_price
                    )
                    
                    if scalp_signal:
                        print(f"üéâ –°–ö–ê–õ–¨–ü–ò–ù–ì –°–ò–ì–ù–ê–õ –ù–ê–ô–î–ï–ù!")
                        print(f"   –î–µ–π—Å—Ç–≤–∏–µ: {scalp_signal['action']}")
                        print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {scalp_signal['confidence']*100:.1f}%")
                        print(f"   –ü–ª–µ—á–æ: {scalp_signal['leverage']:.0f}x")
                        print(f"   –§–∏–ª—å—Ç—Ä–æ–≤: {scalp_signal['filters_passed']}/{scalp_signal['total_filters']}")
                    else:
                        print("‚ùå –°–∫–∞–ª—å–ø–∏–Ω–≥ —Å–∏–≥–Ω–∞–ª –ù–ï –Ω–∞–π–¥–µ–Ω (–ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑)")
                else:
                    print(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ ({len(tf_analysis)} < 2)")
            else:
                print("‚ùå –ù–µ—Ç —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã")
        else:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
    
    print("\n" + "=" * 60)

if __name__ == "__main__":
    asyncio.run(test_scalping_debug()) 