#!/usr/bin/env python3
"""
üß™ –¢–ï–°–¢ –°–ö–ê–õ–¨–ü–ò–ù–ì–ê - –û–¢–õ–ê–î–ö–ê –ü–†–û–ë–õ–ï–ú–´
"""

import asyncio
from scalping_engine import ScalpingSignalEngine
from alpha_signal_bot_main import UniversalDataManager

async def test_scalping_debug():
    print('üß™ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–ö–ê–õ–¨–ü–ò–ù–ì –ú–û–î–£–õ–Ø')
    print('=' * 50)
    
    # –¢–µ—Å—Ç 1: –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ –º—è–≥–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    print('\nüî• –¢–ï–°–¢ 1: –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–û –ú–Ø–ì–ö–ò–ï –ù–ê–°–¢–†–û–ô–ö–ò')
    scalping_engine = ScalpingSignalEngine(min_confidence=0.10, min_filters=1)
    data_manager = UniversalDataManager()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–ø-5 —Å–∞–º—ã—Ö –≤–æ–ª–∞—Ç–∏–ª—å–Ω—ã—Ö –ø–∞—Ä
    test_pairs = ['BTC/USDT', 'ETH/USDT', 'BNB/USDT', 'SOL/USDT', 'DOGE/USDT']
    
    found_signals = 0
    
    for symbol in test_pairs:
        try:
            print(f'\nüîç –ê–Ω–∞–ª–∏–∑ {symbol}:')
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞
            ohlcv_data = await data_manager.get_multi_timeframe_data(
                symbol, ['1m', '5m', '15m']
            )
            
            if ohlcv_data:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö
                for tf, data in ohlcv_data.items():
                    if data and data.get('historical_data'):
                        candles_count = len(data['historical_data'])
                        print(f'  üìä {tf}: {candles_count} —Å–≤–µ—á–µ–π')
                
                # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É
                main_tf = ohlcv_data.get('5m') or ohlcv_data.get('1m')
                if main_tf and main_tf.get('current'):
                    current_price = main_tf['current']['close']
                    print(f'  üí∞ –¶–µ–Ω–∞: ${current_price:.2f}')
                    
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∫–∞–ª—å–ø–∏–Ω–≥
                    signal = await scalping_engine.analyze_scalping_signal(
                        symbol, ohlcv_data, current_price
                    )
                    
                    if signal:
                        found_signals += 1
                        print(f'  üéâ –ù–ê–ô–î–ï–ù –°–ò–ì–ù–ê–õ!')
                        print(f'    –î–µ–π—Å—Ç–≤–∏–µ: {signal["action"]}')
                        print(f'    –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signal["confidence"]*100:.1f}%')
                        print(f'    –ü–ª–µ—á–æ: {signal["leverage"]:.1f}x')
                        print(f'    –§–∏–ª—å—Ç—Ä–æ–≤: {signal["filters_passed"]}/{signal["total_filters"]}')
                    else:
                        print(f'  ‚ùå –°–∏–≥–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω')
            else:
                print(f'  ‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö OHLCV')
                
        except Exception as e:
            print(f'  ‚ùå –û—à–∏–±–∫–∞: {e}')
    
    print(f'\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢ –¢–ï–°–¢–ê 1:')
    print(f'‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {found_signals}/{len(test_pairs)}')
    
    if found_signals == 0:
        print('\nüîß –¢–ï–°–¢ 2: –ü–†–û–í–ï–†–ö–ê –û–¢–î–ï–õ–¨–ù–´–• –ö–û–ú–ü–û–ù–ï–ù–¢–û–í')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—É—é –ø–∞—Ä—É –¥–µ—Ç–∞–ª—å–Ω–æ
        symbol = 'BTC/USDT'
        print(f'\nüîç –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ {symbol}:')
        
        try:
            ohlcv_data = await data_manager.get_multi_timeframe_data(symbol, ['1m', '5m', '15m'])
            
            if ohlcv_data:
                print('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã')
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Ç–∞–π–º—Ñ—Ä–µ–π–º
                for tf, data in ohlcv_data.items():
                    if data and data.get('historical_data'):
                        df_data = data['historical_data']
                        current = data.get('current', {})
                        
                        print(f'\nüìä {tf} —Ç–∞–π–º—Ñ—Ä–µ–π–º:')
                        print(f'  –°–≤–µ—á–µ–π: {len(df_data)}')
                        print(f'  –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${current.get("close", 0):.2f}')
                        print(f'  –û–±—ä–µ–º: {current.get("volume", 0):,.0f}')
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–≤–µ—á–µ–π –Ω–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
                        if len(df_data) >= 5:
                            recent_closes = [candle['close'] for candle in df_data[-5:]]
                            volatility = (max(recent_closes) - min(recent_closes)) / min(recent_closes) * 100
                            print(f'  –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (5 —Å–≤–µ—á–µ–π): {volatility:.2f}%')
                
                # –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —Å–∫–∞–ª—å–ø–∏–Ω–≥ —Å–∏–≥–Ω–∞–ª –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
                print(f'\nüß™ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –¢–ï–°–¢ –°–ö–ê–õ–¨–ü–ò–ù–ì–ê:')
                
                # –°–æ–∑–¥–∞–µ–º —Å—É–ø–µ—Ä-–º—è–≥–∫–∏–π –¥–≤–∏–∂–æ–∫
                ultra_soft_engine = ScalpingSignalEngine(min_confidence=0.01, min_filters=0)
                
                main_tf = ohlcv_data.get('5m') or ohlcv_data.get('1m')
                if main_tf and main_tf.get('current'):
                    current_price = main_tf['current']['close']
                    
                    signal = await ultra_soft_engine.analyze_scalping_signal(
                        symbol, ohlcv_data, current_price
                    )
                    
                    if signal:
                        print(f'‚úÖ –£–õ–¨–¢–†–ê-–ú–Ø–ì–ö–ò–ô –¢–ï–°–¢ –ü–†–û–®–ï–õ!')
                        print(f'  –°–∏–≥–Ω–∞–ª: {signal["action"]}')
                        print(f'  –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signal["confidence"]*100:.3f}%')
                    else:
                        print(f'‚ùå –î–∞–∂–µ —É–ª—å—Ç—Ä–∞-–º—è–≥–∫–∏–π —Ç–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª')
            else:
                print('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ')
                
        except Exception as e:
            print(f'‚ùå –û—à–∏–±–∫–∞ –≤ –¥–µ—Ç–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}')
    
    print('\nüèÅ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê')

if __name__ == "__main__":
    asyncio.run(test_scalping_debug()) 