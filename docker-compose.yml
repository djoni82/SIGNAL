version: '3.8'

services:
  # Основной бот
  cryptoalpha-bot:
    build: .
    container_name: cryptoalpha-pro-bot
    restart: unless-stopped
    environment:
      - TELEGRAM_TOKEN=${TELEGRAM_TOKEN}
      - TELEGRAM_CHAT_ID=${TELEGRAM_CHAT_ID}
      - CRYPTOPANIC_TOKEN=${CRYPTOPANIC_TOKEN}
      - DUNE_API_KEY=${DUNE_API_KEY}
      - TWITTER_BEARER_TOKEN=${TWITTER_BEARER_TOKEN}
      - LOG_LEVEL=INFO
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    networks:
      - cryptoalpha-network
    depends_on:
      - redis
      - postgres
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis для кэширования
  redis:
    image: redis:7-alpine
    container_name: cryptoalpha-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - cryptoalpha-network
    command: redis-server --appendonly yes

  # PostgreSQL для данных
  postgres:
    image: postgres:15-alpine
    container_name: cryptoalpha-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=cryptoalpha
      - POSTGRES_USER=cryptoalpha
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-cryptoalpha123}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - cryptoalpha-network

  # Prometheus для мониторинга
  prometheus:
    image: prom/prometheus:latest
    container_name: cryptoalpha-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - cryptoalpha-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Grafana для дашбордов
  grafana:
    image: grafana/grafana:latest
    container_name: cryptoalpha-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - cryptoalpha-network
    depends_on:
      - prometheus

  # Nginx для прокси
  nginx:
    image: nginx:alpine
    container_name: cryptoalpha-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    networks:
      - cryptoalpha-network
    depends_on:
      - cryptoalpha-bot

  # Тестовый сервис
  cryptoalpha-test:
    build: .
    container_name: cryptoalpha-test
    environment:
      - TEST_MODE=true
      - TELEGRAM_TOKEN=${TELEGRAM_TOKEN}
      - TELEGRAM_CHAT_ID=${TELEGRAM_CHAT_ID}
    volumes:
      - ./tests:/app/tests
    networks:
      - cryptoalpha-network
    command: ["pytest", "tests/", "-v", "--cov=crypto_signal_bot", "--cov-report=html"]
    profiles:
      - test

volumes:
  redis_data:
  postgres_data:
  prometheus_data:
  grafana_data:

networks:
  cryptoalpha-network:
    driver: bridge 