#!/usr/bin/env python3
"""
üî• ENHANCED TECHNICAL ANALYZER v2.0
–ü–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
"""

import pandas as pd
import numpy as np
import talib
from typing import Dict, List, Optional, Any
import time
from datetime import datetime

class ProfessionalTechnicalAnalyzer:
    """–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å –ø–æ–ª–Ω—ã–º –Ω–∞–±–æ—Ä–æ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"""
    
    def __init__(self):
        self.indicators = {}
        
    def calculate_all_indicators(self, df: pd.DataFrame) -> Dict:
        """–†–∞—Å—á–µ—Ç –≤—Å–µ—Ö —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"""
        try:
            if len(df) < 50:
                return {}
                
            high = df['high'].values
            low = df['low'].values
            close = df['close'].values
            open_price = df['open'].values
            volume = df['volume'].values
            
            indicators = {}
            
            # RSI (Relative Strength Index)
            indicators['rsi'] = self._calculate_rsi(close)
            
            # MACD (Moving Average Convergence Divergence)
            indicators['macd'] = self._calculate_macd(close)
            
            # EMA (Exponential Moving Average)
            indicators['ema'] = self._calculate_ema(close)
            
            # ATR (Average True Range)
            indicators['atr'] = self._calculate_atr(high, low, close)
            
            # Bollinger Bands
            indicators['bollinger'] = self._calculate_bollinger_bands(close)
            
            # Stochastic Oscillator
            indicators['stochastic'] = self._calculate_stochastic(high, low, close)
            
            # ADX (Average Directional Index)
            indicators['adx'] = self._calculate_adx(high, low, close)
            
            # CCI (Commodity Channel Index)
            indicators['cci'] = self._calculate_cci(high, low, close)
            
            # Williams %R
            indicators['williams_r'] = self._calculate_williams_r(high, low, close)
            
            # SuperTrend
            indicators['supertrend'] = self._calculate_supertrend(high, low, close)
            
            # Donchian Channel
            indicators['donchian'] = self._calculate_donchian_channel(high, low)
            
            # VWAP (Volume Weighted Average Price)
            indicators['vwap'] = self._calculate_vwap(high, low, close, volume)
            
            # Ichimoku
            indicators['ichimoku'] = self._calculate_ichimoku(high, low, close)
            
            # OBV (On-Balance Volume)
            indicators['obv'] = self._calculate_obv(close, volume)
            
            # Volume Analysis
            indicators['volume_analysis'] = self._calculate_volume_analysis(volume)
            
            # Support/Resistance Levels
            indicators['support_resistance'] = self._calculate_support_resistance(high, low, close)
            
            # Candlestick Patterns
            indicators['patterns'] = self._calculate_candlestick_patterns(open_price, high, low, close)
            
            # Multi-timeframe analysis
            indicators['mtf_consensus'] = self._calculate_mtf_consensus(indicators)
            
            return indicators
            
        except Exception as e:
            print(f"‚ùå Error calculating indicators: {e}")
            return {}
    
    def _calculate_rsi(self, close: np.ndarray, period: int = 14) -> Dict:
        """RSI —Ä–∞—Å—á–µ—Ç"""
        try:
            rsi = talib.RSI(close, timeperiod=period)
            current_rsi = rsi[-1]
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏–ª—É —Å–∏–≥–Ω–∞–ª–∞
            if current_rsi > 80:
                signal = "STRONG_SELL"
                strength = "–æ—á–µ–Ω—å —Å–∏–ª—å–Ω—ã–π"
            elif current_rsi > 70:
                signal = "SELL"
                strength = "—Å–∏–ª—å–Ω—ã–π"
            elif current_rsi > 60:
                signal = "WEAK_SELL"
                strength = "—É–º–µ—Ä–µ–Ω–Ω—ã–π"
            elif current_rsi < 20:
                signal = "STRONG_BUY"
                strength = "–æ—á–µ–Ω—å —Å–∏–ª—å–Ω—ã–π"
            elif current_rsi < 30:
                signal = "BUY"
                strength = "—Å–∏–ª—å–Ω—ã–π"
            elif current_rsi < 40:
                signal = "WEAK_BUY"
                strength = "—É–º–µ—Ä–µ–Ω–Ω—ã–π"
            else:
                signal = "NEUTRAL"
                strength = "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π"
            
            return {
                'value': current_rsi,
                'signal': signal,
                'strength': strength,
                'description': f"RSI {strength} {'>' if current_rsi > 50 else '<'} {60 if current_rsi > 60 else 40} ({current_rsi:.2f})"
            }
        except:
            return {'value': 50, 'signal': 'NEUTRAL', 'strength': '–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π', 'description': 'RSI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}
    
    def _calculate_macd(self, close: np.ndarray) -> Dict:
        """MACD —Ä–∞—Å—á–µ—Ç"""
        try:
            macd_line, macd_signal, macd_hist = talib.MACD(close, fastperiod=12, slowperiod=26, signalperiod=9)
            
            current_macd = macd_line[-1]
            current_signal = macd_signal[-1]
            current_hist = macd_hist[-1]
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏–ª—É –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã
            if abs(current_hist) > 0.01:
                hist_strength = "—Å–∏–ª—å–Ω–∞—è"
            elif abs(current_hist) > 0.005:
                hist_strength = "—É–º–µ—Ä–µ–Ω–Ω–∞—è"
            else:
                hist_strength = "—Å–ª–∞–±–∞—è"
            
            signal = "BUY" if current_hist > 0 else "SELL"
            
            return {
                'macd': current_macd,
                'signal_line': current_signal,
                'histogram': current_hist,
                'signal': signal,
                'strength': hist_strength,
                'description': f"–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ MACD {hist_strength}"
            }
        except:
            return {'histogram': 0, 'signal': 'NEUTRAL', 'strength': '—Å–ª–∞–±–∞—è', 'description': 'MACD –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}
    
    def _calculate_ema(self, close: np.ndarray) -> Dict:
        """EMA —Ä–∞—Å—á–µ—Ç"""
        try:
            ema_20 = talib.EMA(close, timeperiod=20)
            ema_50 = talib.EMA(close, timeperiod=50)
            ma_50 = talib.SMA(close, timeperiod=50)
            
            current_price = close[-1]
            current_ema_20 = ema_20[-1]
            current_ema_50 = ema_50[-1]
            current_ma_50 = ma_50[-1]
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é —Ü–µ–Ω—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ EMA
            price_above_ema20 = current_price > current_ema_20
            price_above_ema50 = current_price > current_ema_50
            ema20_above_ema50 = current_ema_20 > current_ema_50
            price_above_ma50 = current_price > current_ma_50
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏–ª—É —Ç—Ä–µ–Ω–¥–∞
            if price_above_ema20 and price_above_ema50 and ema20_above_ema50:
                trend_strength = "—Å–∏–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ"
                signal = "STRONG_BUY"
            elif price_above_ema20 and ema20_above_ema50:
                trend_strength = "—É–º–µ—Ä–µ–Ω–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ"
                signal = "BUY"
            elif not price_above_ema20 and not price_above_ema50 and not ema20_above_ema50:
                trend_strength = "—Å–∏–ª—å–Ω—ã–π –º–µ–¥–≤–µ–∂–∏–π —Ç—Ä–µ–Ω–¥"
                signal = "STRONG_SELL"
            else:
                trend_strength = "—Å–º–µ—à–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã"
                signal = "NEUTRAL"
            
            return {
                'ema_20': current_ema_20,
                'ema_50': current_ema_50,
                'ma_50': current_ma_50,
                'price_above_ema': price_above_ema20,
                'signal': signal,
                'strength': trend_strength,
                'description': f"–¶–µ–Ω–∞ {'–≤—ã—à–µ' if price_above_ema20 else '–Ω–∏–∂–µ'} EMA, {trend_strength}",
                'ma50_cross': "–§–∏–ª—å—Ç—Ä MA50 –ø–µ—Ä–µ—Å–µ–∫ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—É—é –ª–∏–Ω–∏—é" if price_above_ma50 else "–¶–µ–Ω–∞ –Ω–∏–∂–µ MA50"
            }
        except:
            return {'signal': 'NEUTRAL', 'strength': '–Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π', 'description': 'EMA –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}
    
    def _calculate_atr(self, high: np.ndarray, low: np.ndarray, close: np.ndarray, period: int = 14) -> Dict:
        """ATR —Ä–∞—Å—á–µ—Ç"""
        try:
            atr = talib.ATR(high, low, close, timeperiod=period)
            current_atr = atr[-1]
            current_price = close[-1]
            
            # ATR –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö –æ—Ç —Ü–µ–Ω—ã
            atr_percent = (current_atr / current_price) * 100
            
            if atr_percent > 5:
                volatility = "–æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è"
            elif atr_percent > 3:
                volatility = "–≤—ã—Å–æ–∫–∞—è"
            elif atr_percent > 2:
                volatility = "—É–º–µ—Ä–µ–Ω–Ω–∞—è"
            else:
                volatility = "–Ω–∏–∑–∫–∞—è"
            
            return {
                'value': current_atr,
                'percent': atr_percent,
                'volatility': volatility,
                'description': f"–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å {volatility} (ATR: {atr_percent:.2f}%)"
            }
        except:
            return {'value': 0, 'volatility': '–Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è', 'description': 'ATR –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}
    
    def _calculate_bollinger_bands(self, close: np.ndarray, period: int = 20) -> Dict:
        """Bollinger Bands —Ä–∞—Å—á–µ—Ç"""
        try:
            bb_upper, bb_middle, bb_lower = talib.BBANDS(close, timeperiod=period, nbdevup=2, nbdevdn=2)
            
            current_price = close[-1]
            current_upper = bb_upper[-1]
            current_lower = bb_lower[-1]
            current_middle = bb_middle[-1]
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é —Ü–µ–Ω—ã –≤ –ø–æ–ª–æ—Å–∞—Ö
            if current_price > current_upper:
                position = "–≤—ã—à–µ –≤–µ—Ä—Ö–Ω–µ–π –ø–æ–ª–æ—Å—ã"
                signal = "BREAKOUT_UP"
                description = "–¶–µ–Ω–∞ –ø—Ä–æ–±–∏–ª–∞ –ø–æ–ª–æ—Å—É –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞ (–ø—Ä–æ–±–æ–π)"
            elif current_price < current_lower:
                position = "–Ω–∏–∂–µ –Ω–∏–∂–Ω–µ–π –ø–æ–ª–æ—Å—ã"
                signal = "BREAKOUT_DOWN"
                description = "–¶–µ–Ω–∞ –ø—Ä–æ–±–∏–ª–∞ –Ω–∏–∂–Ω—é—é –ø–æ–ª–æ—Å—É –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞"
            elif current_price > current_middle:
                position = "–≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–π –ª–∏–Ω–∏–∏"
                signal = "BUY"
                description = "–¶–µ–Ω–∞ –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–π –ª–∏–Ω–∏–∏ –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞"
            else:
                position = "–Ω–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–π –ª–∏–Ω–∏–∏"
                signal = "SELL"
                description = "–¶–µ–Ω–∞ –Ω–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–π –ª–∏–Ω–∏–∏ –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞"
            
            return {
                'upper': current_upper,
                'middle': current_middle,
                'lower': current_lower,
                'position': position,
                'signal': signal,
                'description': description
            }
        except:
            return {'signal': 'NEUTRAL', 'description': 'Bollinger Bands –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã'}
    
    def _calculate_stochastic(self, high: np.ndarray, low: np.ndarray, close: np.ndarray) -> Dict:
        """Stochastic Oscillator —Ä–∞—Å—á–µ—Ç"""
        try:
            slowk, slowd = talib.STOCH(high, low, close, fastk_period=14, slowk_period=3, slowd_period=3)
            
            current_k = slowk[-1]
            current_d = slowd[-1]
            
            if current_k > 80 and current_d > 80:
                signal = "STRONG_SELL"
                strength = "—Å–∏–ª—å–Ω–æ–µ"
                description = "Stoch RSI –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å"
            elif current_k < 20 and current_d < 20:
                signal = "STRONG_BUY"
                strength = "—Å–∏–ª—å–Ω–æ–µ"
                description = "Stoch RSI –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å"
            elif current_k > current_d:
                signal = "BUY"
                strength = "—É–º–µ—Ä–µ–Ω–Ω–æ–µ"
                description = "Stoch RSI –±—ã—á–∏–π –∫—Ä–æ—Å—Å–æ–≤–µ—Ä"
            else:
                signal = "SELL"
                strength = "—Å–ª–∞–±–æ–µ"
                description = "–°–ª–∞–±–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è Stoch RSI"
            
            return {
                'k': current_k,
                'd': current_d,
                'signal': signal,
                'strength': strength,
                'description': description
            }
        except:
            return {'signal': 'NEUTRAL', 'strength': '—Å–ª–∞–±–æ–µ', 'description': '–°–ª–∞–±–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è Stoch RSI'}
    
    def _calculate_adx(self, high: np.ndarray, low: np.ndarray, close: np.ndarray, period: int = 14) -> Dict:
        """ADX —Ä–∞—Å—á–µ—Ç"""
        try:
            adx = talib.ADX(high, low, close, timeperiod=period)
            current_adx = adx[-1]
            
            if current_adx >= 50:
                strength = "–æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è"
                description = f"–°–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞ –æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è (ADX ‚â• 50, {current_adx:.1f})"
            elif current_adx >= 25:
                strength = "–≤—ã—Å–æ–∫–∞—è"
                description = f"–°–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞ –≤—ã—Å–æ–∫–∞—è (ADX ‚â• 25, {current_adx:.1f})"
            elif current_adx >= 20:
                strength = "—É–º–µ—Ä–µ–Ω–Ω–∞—è"
                description = f"–°–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞ —É–º–µ—Ä–µ–Ω–Ω–∞—è (ADX ‚â• 20, {current_adx:.1f})"
            else:
                strength = "—Å–ª–∞–±–∞—è"
                description = f"–°–ª–∞–±—ã–π —Ç—Ä–µ–Ω–¥ (ADX < 20, {current_adx:.1f})"
            
            return {
                'value': current_adx,
                'strength': strength,
                'description': description
            }
        except:
            return {'value': 15, 'strength': '—Å–ª–∞–±–∞—è', 'description': 'ADX –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}
    
    def _calculate_cci(self, high: np.ndarray, low: np.ndarray, close: np.ndarray, period: int = 14) -> Dict:
        """CCI —Ä–∞—Å—á–µ—Ç"""
        try:
            cci = talib.CCI(high, low, close, timeperiod=period)
            current_cci = cci[-1]
            
            if current_cci > 100:
                signal = "STRONG_BUY"
                description = f"CCI –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–∏–ª—å–Ω—ã–π –±—ã—á–∏–π –∏–º–ø—É–ª—å—Å ({current_cci:.1f})"
            elif current_cci < -100:
                signal = "STRONG_SELL"
                description = f"CCI –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–∏–ª—å–Ω—ã–π –º–µ–¥–≤–µ–∂–∏–π –∏–º–ø—É–ª—å—Å ({current_cci:.1f})"
            elif current_cci > 0:
                signal = "BUY"
                description = f"CCI –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π ({current_cci:.1f})"
            else:
                signal = "SELL"
                description = f"CCI –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π ({current_cci:.1f})"
            
            return {
                'value': current_cci,
                'signal': signal,
                'description': description
            }
        except:
            return {'value': 0, 'signal': 'NEUTRAL', 'description': 'CCI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}
    
    def _calculate_williams_r(self, high: np.ndarray, low: np.ndarray, close: np.ndarray, period: int = 14) -> Dict:
        """Williams %R —Ä–∞—Å—á–µ—Ç"""
        try:
            williams_r = talib.WILLR(high, low, close, timeperiod=period)
            current_wr = williams_r[-1]
            
            if current_wr > -20:
                signal = "STRONG_SELL"
                description = f"Williams %R –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å ({current_wr:.1f})"
            elif current_wr < -80:
                signal = "STRONG_BUY"
                description = f"Williams %R –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å ({current_wr:.1f})"
            elif current_wr > -50:
                signal = "SELL"
                description = f"Williams %R –º–µ–¥–≤–µ–∂–∏–π ({current_wr:.1f})"
            else:
                signal = "BUY"
                description = f"Williams %R –±—ã—á–∏–π ({current_wr:.1f})"
            
            return {
                'value': current_wr,
                'signal': signal,
                'description': description
            }
        except:
            return {'value': -50, 'signal': 'NEUTRAL', 'description': 'Williams %R –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}
    
    def _calculate_supertrend(self, high: np.ndarray, low: np.ndarray, close: np.ndarray, period: int = 10, multiplier: float = 3.0) -> Dict:
        """SuperTrend —Ä–∞—Å—á–µ—Ç"""
        try:
            # ATR —Ä–∞—Å—á–µ—Ç
            atr = talib.ATR(high, low, close, timeperiod=period)
            
            # SuperTrend —Ä–∞—Å—á–µ—Ç
            hl2 = (high + low) / 2
            upper_band = hl2 + (multiplier * atr)
            lower_band = hl2 - (multiplier * atr)
            
            supertrend = np.zeros(len(close))
            direction = np.ones(len(close))
            
            for i in range(1, len(close)):
                if close[i] <= lower_band[i-1]:
                    direction[i] = -1
                elif close[i] >= upper_band[i-1]:
                    direction[i] = 1
                else:
                    direction[i] = direction[i-1]
                
                if direction[i] == 1:
                    supertrend[i] = lower_band[i]
                else:
                    supertrend[i] = upper_band[i]
            
            current_trend = direction[-1]
            trend_name = "–±—ã—á–∏–π —Ç—Ä–µ–Ω–¥" if current_trend == 1 else "–º–µ–¥–≤–µ–∂–∏–π —Ç—Ä–µ–Ω–¥"
            
            return {
                'value': current_trend,
                'trend': trend_name,
                'signal': 'BUY' if current_trend == 1 else 'SELL',
                'description': f"SuperTrend == {int(current_trend)} ({trend_name})"
            }
        except:
            return {'value': 0, 'trend': '–Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π', 'signal': 'NEUTRAL', 'description': 'SuperTrend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}
    
    def _calculate_donchian_channel(self, high: np.ndarray, low: np.ndarray, period: int = 20) -> Dict:
        """Donchian Channel —Ä–∞—Å—á–µ—Ç"""
        try:
            df_temp = pd.DataFrame({'high': high, 'low': low})
            upper_channel = df_temp['high'].rolling(period).max()
            lower_channel = df_temp['low'].rolling(period).min()
            middle_channel = (upper_channel + lower_channel) / 2
            
            current_price = (high[-1] + low[-1]) / 2
            current_upper = upper_channel.iloc[-1]
            current_lower = lower_channel.iloc[-1]
            current_middle = middle_channel.iloc[-1]
            
            if current_price > current_middle:
                signal = "BUY"
                description = f"Price > Donchian Mid"
            else:
                signal = "SELL"
                description = f"Price < Donchian Mid"
            
            return {
                'upper': current_upper,
                'lower': current_lower,
                'middle': current_middle,
                'signal': signal,
                'description': description
            }
        except:
            return {'signal': 'NEUTRAL', 'description': 'Donchian –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}
    
    def _calculate_vwap(self, high: np.ndarray, low: np.ndarray, close: np.ndarray, volume: np.ndarray) -> Dict:
        """VWAP —Ä–∞—Å—á–µ—Ç"""
        try:
            typical_price = (high + low + close) / 3
            cumulative_volume = np.cumsum(volume)
            cumulative_price_volume = np.cumsum(typical_price * volume)
            
            vwap = cumulative_price_volume / cumulative_volume
            current_vwap = vwap[-1]
            current_price = close[-1]
            
            if current_price > current_vwap:
                signal = "BUY"
                description = f"Price > VWAP"
            else:
                signal = "SELL"
                description = f"Price < VWAP"
            
            return {
                'value': current_vwap,
                'signal': signal,
                'description': description
            }
        except:
            return {'value': 0, 'signal': 'NEUTRAL', 'description': 'VWAP –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}
    
    def _calculate_ichimoku(self, high: np.ndarray, low: np.ndarray, close: np.ndarray) -> Dict:
        """Ichimoku —Ä–∞—Å—á–µ—Ç"""
        try:
            # Tenkan-sen (Conversion Line)
            high_9 = pd.Series(high).rolling(9).max()
            low_9 = pd.Series(low).rolling(9).min()
            tenkan_sen = (high_9 + low_9) / 2
            
            # Kijun-sen (Base Line)
            high_26 = pd.Series(high).rolling(26).max()
            low_26 = pd.Series(low).rolling(26).min()
            kijun_sen = (high_26 + low_26) / 2
            
            current_price = close[-1]
            current_tenkan = tenkan_sen.iloc[-1]
            current_kijun = kijun_sen.iloc[-1]
            
            if current_price > current_tenkan > current_kijun:
                signal = "STRONG_BUY"
                description = "Ichimoku –±—ã—á–∏–π —Å–∏–≥–Ω–∞–ª"
            elif current_price < current_tenkan < current_kijun:
                signal = "STRONG_SELL"
                description = "Ichimoku –º–µ–¥–≤–µ–∂–∏–π —Å–∏–≥–Ω–∞–ª"
            else:
                signal = "NEUTRAL"
                description = "Ichimoku –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π"
            
            return {
                'tenkan_sen': current_tenkan,
                'kijun_sen': current_kijun,
                'signal': signal,
                'description': description
            }
        except:
            return {'signal': 'NEUTRAL', 'description': 'Ichimoku –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}
    
    def _calculate_obv(self, close: np.ndarray, volume: np.ndarray) -> Dict:
        """OBV —Ä–∞—Å—á–µ—Ç"""
        try:
            obv = talib.OBV(close, volume)
            
            # –¢—Ä–µ–Ω–¥ OBV
            obv_trend = "—Ä–∞—Å—Ç—É—â–∏–π" if obv[-1] > obv[-10] else "–ø–∞–¥–∞—é—â–∏–π"
            signal = "BUY" if obv_trend == "—Ä–∞—Å—Ç—É—â–∏–π" else "SELL"
            
            return {
                'value': obv[-1],
                'trend': obv_trend,
                'signal': signal,
                'description': f"OBV —Ç—Ä–µ–Ω–¥ {obv_trend}"
            }
        except:
            return {'trend': '–Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π', 'signal': 'NEUTRAL', 'description': 'OBV –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}
    
    def _calculate_volume_analysis(self, volume: np.ndarray) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ –æ–±—ä–µ–º–∞"""
        try:
            current_volume = volume[-1]
            avg_volume = np.mean(volume[-20:])  # –°—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º –∑–∞ 20 –ø–µ—Ä–∏–æ–¥–æ–≤
            
            volume_ratio = current_volume / avg_volume if avg_volume > 0 else 1.0
            
            if volume_ratio > 2.0:
                spike_level = "–æ—á–µ–Ω—å —Å–∏–ª—å–Ω—ã–π"
                description = f"–†–æ—Å—Ç –æ–±—ä—ë–º–∞ –±–æ–ª–µ–µ {(volume_ratio-1)*100:.0f}%!"
            elif volume_ratio > 1.5:
                spike_level = "—Å–∏–ª—å–Ω—ã–π"
                description = f"–†–æ—Å—Ç –æ–±—ä—ë–º–∞ –±–æ–ª–µ–µ {(volume_ratio-1)*100:.0f}%!"
            elif volume_ratio > 1.2:
                spike_level = "—É–º–µ—Ä–µ–Ω–Ω—ã–π"
                description = f"–†–æ—Å—Ç –æ–±—ä—ë–º–∞ {(volume_ratio-1)*100:.0f}%"
            else:
                spike_level = "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
                description = "–ù–µ—Ç Volume Spike"
            
            return {
                'current': current_volume,
                'average': avg_volume,
                'ratio': volume_ratio,
                'spike_level': spike_level,
                'description': description
            }
        except:
            return {'spike_level': '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç', 'description': '–ù–µ—Ç Volume Spike'}
    
    def _calculate_support_resistance(self, high: np.ndarray, low: np.ndarray, close: np.ndarray) -> Dict:
        """–†–∞—Å—á–µ—Ç —É—Ä–æ–≤–Ω–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è"""
        try:
            current_price = close[-1]
            
            # –ü—Ä–æ—Å—Ç–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π
            resistance = np.max(high[-20:])  # –ú–∞–∫—Å–∏–º—É–º –∑–∞ 20 –ø–µ—Ä–∏–æ–¥–æ–≤
            support = np.min(low[-20:])      # –ú–∏–Ω–∏–º—É–º –∑–∞ 20 –ø–µ—Ä–∏–æ–¥–æ–≤
            
            # –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —É—Ä–æ–≤–Ω–µ–π
            resistance_distance = abs(resistance - current_price) / current_price * 100
            support_distance = abs(current_price - support) / current_price * 100
            
            # –ü—Ä–æ–±–æ–π —É—Ä–æ–≤–Ω–µ–π
            if current_price >= resistance * 0.99:
                breakout = "–£—Ä–æ–≤–µ–Ω—å —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è —Ä–µ–∑–∫–æ –ø—Ä–æ–±–∏—Ç"
            elif current_price <= support * 1.01:
                breakout = "–£—Ä–æ–≤–µ–Ω—å –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø—Ä–æ–±–∏—Ç"
            else:
                breakout = "–ù–µ—Ç –ø—Ä–æ–±–æ—è —É—Ä–æ–≤–Ω–µ–π"
            
            warnings = []
            if support_distance > 5:
                warnings.append(f"–£—Ä–æ–≤–µ–Ω—å –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –¥–∞–ª–µ–∫–æ –æ—Ç —Ü–µ–Ω—ã: ${support:.4f} ({support_distance:.2f}%)")
            if resistance_distance > 5:
                warnings.append(f"–£—Ä–æ–≤–µ–Ω—å —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –¥–∞–ª–µ–∫–æ –æ—Ç —Ü–µ–Ω—ã: ${resistance:.4f} ({resistance_distance:.2f}%)")
            
            return {
                'support': support,
                'resistance': resistance,
                'support_distance': support_distance,
                'resistance_distance': resistance_distance,
                'breakout': breakout,
                'warnings': warnings
            }
        except:
            return {'breakout': '–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ', 'warnings': []}
    
    def _calculate_candlestick_patterns(self, open_price: np.ndarray, high: np.ndarray, low: np.ndarray, close: np.ndarray) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ —Å–≤–µ—á–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤"""
        try:
            patterns = []
            
            # –¢—Ä–∏ –±–µ–ª—ã—Ö —Å–æ–ª–¥–∞—Ç–∞
            three_white_soldiers = talib.CDL3WHITESOLDIERS(open_price, high, low, close)
            if three_white_soldiers[-1] > 0:
                patterns.append("–û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–∞—Ç—Ç–µ—Ä–Ω ¬´–¢—Ä–∏ –±–µ–ª—ã—Ö —Å–æ–ª–¥–∞—Ç–∞¬ª")
            
            # –¢—Ä–∏ —á–µ—Ä–Ω—ã—Ö –≤–æ—Ä–æ–Ω–∞
            three_black_crows = talib.CDL3BLACKCROWS(open_price, high, low, close)
            if three_black_crows[-1] < 0:
                patterns.append("–û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–∞—Ç—Ç–µ—Ä–Ω ¬´–¢—Ä–∏ —á–µ—Ä–Ω—ã—Ö –≤–æ—Ä–æ–Ω–∞¬ª")
            
            # –ú–æ–ª–æ—Ç
            hammer = talib.CDLHAMMER(open_price, high, low, close)
            if hammer[-1] > 0:
                patterns.append("–û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–∞—Ç—Ç–µ—Ä–Ω ¬´–ú–æ–ª–æ—Ç¬ª")
            
            # –ü–æ–≤–µ—à–µ–Ω–Ω—ã–π
            hanging_man = talib.CDLHANGINGMAN(open_price, high, low, close)
            if hanging_man[-1] < 0:
                patterns.append("–û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–∞—Ç—Ç–µ—Ä–Ω ¬´–ü–æ–≤–µ—à–µ–Ω–Ω—ã–π¬ª")
            
            # –î–æ–∂–∏
            doji = talib.CDLDOJI(open_price, high, low, close)
            if doji[-1] != 0:
                patterns.append("–û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–∞—Ç—Ç–µ—Ä–Ω ¬´–î–æ–∂–∏¬ª")
            
            if not patterns:
                patterns.append("–ù–µ—Ç –∑–Ω–∞—á–∏–º—ã—Ö —Å–≤–µ—á–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤")
            
            return {
                'patterns': patterns,
                'description': "; ".join(patterns)
            }
        except:
            return {'patterns': ["–ü–∞—Ç—Ç–µ—Ä–Ω—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"], 'description': '–ü–∞—Ç—Ç–µ—Ä–Ω—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã'}
    
    def _calculate_mtf_consensus(self, indicators: Dict) -> Dict:
        """–ú—É–ª—å—Ç–∏—Ç–∞–π–º—Ñ—Ä–µ–π–º –∫–æ–Ω—Å–µ–Ω—Å—É—Å"""
        try:
            # –°–æ–±–∏—Ä–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã –æ—Ç —Ä–∞–∑–Ω—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
            signals = []
            
            # RSI —Å–∏–≥–Ω–∞–ª
            rsi_signal = indicators.get('rsi', {}).get('signal', 'NEUTRAL')
            if 'BUY' in rsi_signal:
                signals.append(1)
            elif 'SELL' in rsi_signal:
                signals.append(-1)
            else:
                signals.append(0)
            
            # MACD —Å–∏–≥–Ω–∞–ª
            macd_signal = indicators.get('macd', {}).get('signal', 'NEUTRAL')
            if macd_signal == 'BUY':
                signals.append(1)
            elif macd_signal == 'SELL':
                signals.append(-1)
            else:
                signals.append(0)
            
            # EMA —Å–∏–≥–Ω–∞–ª
            ema_signal = indicators.get('ema', {}).get('signal', 'NEUTRAL')
            if 'BUY' in ema_signal:
                signals.append(1)
            elif 'SELL' in ema_signal:
                signals.append(-1)
            else:
                signals.append(0)
            
            # SuperTrend —Å–∏–≥–Ω–∞–ª
            supertrend_signal = indicators.get('supertrend', {}).get('signal', 'NEUTRAL')
            if supertrend_signal == 'BUY':
                signals.append(1)
            elif supertrend_signal == 'SELL':
                signals.append(-1)
            else:
                signals.append(0)
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–Ω—Å–µ–Ω—Å—É—Å
            total_signals = len(signals)
            bullish_signals = sum(1 for s in signals if s > 0)
            bearish_signals = sum(1 for s in signals if s < 0)
            
            if bullish_signals >= total_signals * 0.75:
                consensus = "strong_buy"
                description = "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —á–∞—Å–æ–≤–æ–≥–æ —Ç—Ä–µ–Ω–¥–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ; –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ 4-—á–∞—Å–æ–≤–æ–≥–æ —Ç—Ä–µ–Ω–¥–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ"
            elif bearish_signals >= total_signals * 0.75:
                consensus = "strong_sell"
                description = "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —á–∞—Å–æ–≤–æ–≥–æ —Ç—Ä–µ–Ω–¥–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ; –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ 4-—á–∞—Å–æ–≤–æ–≥–æ —Ç—Ä–µ–Ω–¥–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ"
            elif bullish_signals > bearish_signals:
                consensus = "buy"
                description = "–°–º–µ—à–∞–Ω–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞"
            elif bearish_signals > bullish_signals:
                consensus = "sell"
                description = "MTF Consensus == \"sell\" –∏–ª–∏ \"strong_sell\""
            else:
                consensus = "neutral"
                description = "–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π –∫–æ–Ω—Å–µ–Ω—Å—É—Å"
            
            return {
                'consensus': consensus,
                'bullish_count': bullish_signals,
                'bearish_count': bearish_signals,
                'description': description
            }
        except:
            return {'consensus': 'neutral', 'description': 'MTF –∫–æ–Ω—Å–µ–Ω—Å—É—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}
    
    def generate_detailed_signal(self, df: pd.DataFrame, symbol: str, action: str) -> Dict:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ"""
        try:
            indicators = self.calculate_all_indicators(df)
            current_price = df['close'].iloc[-1]
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º TP/SL –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ
            if action == 'BUY':
                tp1 = current_price * 1.025   # +2.5%
                tp2 = current_price * 1.05    # +5%
                tp3 = current_price * 1.10    # +10%
                tp4 = current_price * 1.135   # +13.5%
                sl = current_price * 0.95     # -5%
            else:
                tp1 = current_price * 0.975   # -2.5%
                tp2 = current_price * 0.95    # -5%
                tp3 = current_price * 0.90    # -10%
                tp4 = current_price * 0.865   # -13.5%
                sl = current_price * 1.05     # +5%
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
            confidence_factors = []
            
            # RSI —Ñ–∞–∫—Ç–æ—Ä
            rsi_signal = indicators.get('rsi', {}).get('signal', 'NEUTRAL')
            if 'STRONG' in rsi_signal:
                confidence_factors.append(0.25)
            elif 'BUY' in rsi_signal or 'SELL' in rsi_signal:
                confidence_factors.append(0.15)
            
            # MACD —Ñ–∞–∫—Ç–æ—Ä
            macd_strength = indicators.get('macd', {}).get('strength', '—Å–ª–∞–±–∞—è')
            if macd_strength == '—Å–∏–ª—å–Ω–∞—è':
                confidence_factors.append(0.2)
            elif macd_strength == '—É–º–µ—Ä–µ–Ω–Ω–∞—è':
                confidence_factors.append(0.1)
            
            # EMA —Ñ–∞–∫—Ç–æ—Ä
            ema_signal = indicators.get('ema', {}).get('signal', 'NEUTRAL')
            if 'STRONG' in ema_signal:
                confidence_factors.append(0.2)
            elif 'BUY' in ema_signal or 'SELL' in ema_signal:
                confidence_factors.append(0.1)
            
            # ADX —Ñ–∞–∫—Ç–æ—Ä
            adx_strength = indicators.get('adx', {}).get('strength', '—Å–ª–∞–±–∞—è')
            if adx_strength in ['–≤—ã—Å–æ–∫–∞—è', '–æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è']:
                confidence_factors.append(0.15)
            elif adx_strength == '—É–º–µ—Ä–µ–Ω–Ω–∞—è':
                confidence_factors.append(0.1)
            
            # Volume —Ñ–∞–∫—Ç–æ—Ä
            volume_spike = indicators.get('volume_analysis', {}).get('spike_level', '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
            if volume_spike in ['–æ—á–µ–Ω—å —Å–∏–ª—å–Ω—ã–π', '—Å–∏–ª—å–Ω—ã–π']:
                confidence_factors.append(0.1)
            elif volume_spike == '—É–º–µ—Ä–µ–Ω–Ω—ã–π':
                confidence_factors.append(0.05)
            
            # Bollinger Bands —Ñ–∞–∫—Ç–æ—Ä
            bb_signal = indicators.get('bollinger', {}).get('signal', 'NEUTRAL')
            if 'BREAKOUT' in bb_signal:
                confidence_factors.append(0.1)
            
            total_confidence = min(sum(confidence_factors) + 0.5, 0.95)  # –ë–∞–∑–æ–≤–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å 50%
            
            # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –ø–ª–µ—á–æ (1x-50x)
            leverage = min(50, max(1, int(total_confidence * 60)))
            
            return {
                'symbol': symbol,
                'action': action,
                'entry_price': current_price,
                'tp1': tp1,
                'tp2': tp2,
                'tp3': tp3,
                'tp4': tp4,
                'stop_loss': sl,
                'leverage': leverage,
                'confidence': total_confidence,
                'indicators': indicators,
                'timestamp': datetime.now().strftime('%d.%m.%Y %H:%M'),
                'data_quality': 'REAL'
            }
            
        except Exception as e:
            print(f"‚ùå Error generating detailed signal: {e}")
            return None 