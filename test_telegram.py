#!/usr/bin/env python3
"""
Test Telegram - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
"""

import asyncio
import logging
from datetime import datetime

from telegram_integration import TelegramIntegration
from config import TELEGRAM_CONFIG

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def test_telegram_integration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å Telegram"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    print(f"üì± –¢–æ–∫–µ–Ω –±–æ—Ç–∞: {TELEGRAM_CONFIG['bot_token']}")
    print(f"üí¨ Chat ID: {TELEGRAM_CONFIG['chat_id']}")
    print(f"‚úÖ Telegram –≤–∫–ª—é—á–µ–Ω: {TELEGRAM_CONFIG['enable_telegram']}")
    print()
    
    if TELEGRAM_CONFIG['bot_token'] == 'YOUR_TELEGRAM_BOT_TOKEN':
        print("‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
        print("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python setup_telegram.py")
        return False
    
    if TELEGRAM_CONFIG['chat_id'] == 'YOUR_CHAT_ID':
        print("‚ùå Chat ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
        print("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python setup_telegram.py")
        return False
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
    telegram = TelegramIntegration()
    
    try:
        # –¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        print("üì§ –¢–µ—Å—Ç 1: –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è...")
        test_message = f"üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç CryptoAlphaPro Bot\n–í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}"
        success = await telegram.send_message(test_message)
        
        if success:
            print("‚úÖ –ü—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ—Å—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
            return False
        
        # –¢–µ—Å—Ç 2: –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞
        print("\nüì§ –¢–µ—Å—Ç 2: –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞...")
        status = {
            'running': True,
            'signal_count': 42,
            'cycle_count': 15,
            'last_signal_time_str': '14:30:25',
            'pairs_count': 343,
            'timeframes_count': 4,
            'min_confidence': 0.3,
            'top_signals': 10,
            'update_frequency': 300
        }
        
        success = await telegram.send_status_update(status)
        
        if success:
            print("‚úÖ –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞")
            return False
        
        # –¢–µ—Å—Ç 3: –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª
        print("\nüì§ –¢–µ—Å—Ç 3: –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞...")
        test_signal = {
            'action': 'BUY',
            'symbol': 'BTC/USDT',
            'price': 43250.50,
            'confidence': 0.85,
            'alpha_score': 6,
            'risk_reward': 2.5,
            'timestamp': datetime.now().strftime('%H:%M:%S'),
            'take_profit': [43500.00, 43800.00, 44100.00],
            'stop_loss': 42900.00,
            'analysis': {
                'rsi': 35.2,
                'macd': {'histogram': 0.025},
                'adx': {'adx': 28.5},
                'volume': {'ratio': 1.8}
            },
            'consensus_score': 0.75,
            'trend_agreement': 0.65
        }
        
        success = await telegram.send_signal(test_signal)
        
        if success:
            print("‚úÖ –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏–≥–Ω–∞–ª–∞")
            return False
        
        # –¢–µ—Å—Ç 4: –û—à–∏–±–∫–∞
        print("\nüì§ –¢–µ—Å—Ç 4: –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—à–∏–±–∫–∏...")
        test_error = "–¢–µ—Å—Ç–æ–≤–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"
        success = await telegram.send_error(test_error)
        
        if success:
            print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ")
            return False
        
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("üì± Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False
    finally:
        await telegram.__aexit__(None, None, None)

async def test_signal_formatting():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤"""
    print("\nüìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤...")
    
    telegram = TelegramIntegration()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã
    test_signals = [
        {
            'action': 'BUY',
            'symbol': 'ETH/USDT',
            'price': 2650.75,
            'confidence': 0.92,
            'alpha_score': 7,
            'risk_reward': 3.2,
            'timestamp': datetime.now().strftime('%H:%M:%S'),
            'take_profit': [2680.00, 2710.00, 2740.00],
            'stop_loss': 2620.00,
            'analysis': {
                'rsi': 28.5,
                'macd': {'histogram': 0.035},
                'adx': {'adx': 32.1},
                'volume': {'ratio': 2.1}
            },
            'consensus_score': 0.88,
            'trend_agreement': 0.72
        },
        {
            'action': 'SELL',
            'symbol': 'SOL/USDT',
            'price': 98.45,
            'confidence': 0.78,
            'alpha_score': 5,
            'risk_reward': 2.1,
            'timestamp': datetime.now().strftime('%H:%M:%S'),
            'take_profit': [96.00, 94.50, 93.00],
            'stop_loss': 101.00,
            'analysis': {
                'rsi': 72.8,
                'macd': {'histogram': -0.018},
                'adx': {'adx': 25.3},
                'volume': {'ratio': 1.5}
            },
            'consensus_score': 0.65,
            'trend_agreement': 0.58
        }
    ]
    
    for i, signal in enumerate(test_signals, 1):
        print(f"\nüìä –¢–µ—Å—Ç–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª #{i}:")
        formatted = telegram._format_signal_for_telegram(signal)
        print(formatted)
        print("-" * 50)

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ CryptoAlphaPro Bot - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram")
    print("=" * 60)
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã
    success = await test_telegram_integration()
    
    if success:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (–±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏)
        await test_signal_formatting()
        
        print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
        print("üéØ Telegram –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ —Å –±–æ—Ç–æ–º")
    else:
        print("\n‚ùå –¢–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã!")
        print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram")

if __name__ == "__main__":
    asyncio.run(main()) 