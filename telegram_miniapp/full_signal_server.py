#!/usr/bin/env python3
"""
üöÄ CryptoAlphaPro SIGNAL Bot Server - –ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø–æ –¢–ó
–í—Å–µ –±–∏—Ä–∂–∏ (Binance, Bybit, OKX) + Dune Analytics + CryptoPanic + AI —Ñ–∏–ª—å—Ç—Ä—ã
"""

from flask import Flask, jsonify, request
import requests
import hashlib
import hmac
import time
import threading
import json
from datetime import datetime, timedelta
import asyncio
import random
import numpy as np
from typing import Dict, List, Any
import os
import base64

app = Flask(__name__)

# üîê –í–°–ï –†–ï–ê–õ–¨–ù–´–ï API –ö–õ–Æ–ß–ò
API_KEYS = {
    'binance': {
        'key': 'UGPsFwnP6Sirw5V1aL3xeOwMr7wzWm1eigxDNb2wrJRs3fWP3QDnOjIwVCeipczV',
        'secret': 'jmA0MyvImfAvMu3KdJ32AkdajzIK2YE1U236KcpiTQRL9ItkM6aqil1jh73XEfPe'
    },
    'bybit': {
        'key': 'mWoHS9ONHT2EzePncI',
        'secret': 'b3rUJND24b9OPlmmwKo4Qv6E0ipqYUHTXr9x'
    },
    'okx': {
        'key': 'a7f94985-9865-495f-a3f9-e681ab1742d',
        'secret': '5BE33E5B1802F25F08D28D902EB71970',
        'passphrase': 'Baks1982'
    },
    'dune': {
        'api_key': 'IpFMlwUDxk9AhUdfgF6vVfvKcldTfF2ay',
        'query_id': '5341077'
    },
    'cryptopanic': {
        'api_key': '875f9eb195992389523bcf015c95f315245e395e',
        'base_url': 'https://cryptopanic.com/api/developer/v2'
    },
    'telegram': {
        'token': '8243982780:AAHb72Vjf76iIbiS-khO0dLhkmgvsbKKobg',
        'chat_id': '5333574230'
    }
}

# üìä –ü–û–õ–ù–´–ô –°–ü–ò–°–û–ö –¢–û–†–ì–û–í–´–• –ü–ê–† (–∫–∞–∫ –≤ –¢–ó)
TRADING_PAIRS = [
    # Major pairs
    'BTC/USDT', 'ETH/USDT', 'BNB/USDT', 'ADA/USDT', 'XRP/USDT', 'SOL/USDT',
    'DOT/USDT', 'AVAX/USDT', 'LUNA/USDT', 'LINK/USDT', 'MATIC/USDT', 'ALGO/USDT',
    # DeFi tokens
    'UNI/USDT', 'SUSHI/USDT', 'CAKE/USDT', 'COMP/USDT', 'AAVE/USDT', 'MKR/USDT',
    # Layer 2
    'MATIC/USDT', 'LRC/USDT', 'IMX/USDT', 'METIS/USDT',
    # Gaming/NFT
    'AXS/USDT', 'SAND/USDT', 'MANA/USDT', 'ENJ/USDT', 'GALA/USDT',
    # Meme coins
    'DOGE/USDT', 'SHIB/USDT', 'FLOKI/USDT', 'PEPE/USDT',
    # Others
    'FTT/USDT', 'NEAR/USDT', 'ATOM/USDT', 'FTM/USDT', 'ONE/USDT', 'HBAR/USDT'
]

# üìà –ñ–ò–í–´–ï –î–ê–ù–ù–´–ï –í–°–ï–• –ë–ò–†–ñ
live_data = {
    'signal_bot_active': False,
    'leverage': 10,
    'signals': [],
    'market_data': {
        'binance': {'prices': {}, 'volume': {}, 'last_update': None},
        'bybit': {'prices': {}, 'volume': {}, 'last_update': None},
        'okx': {'prices': {}, 'volume': {}, 'last_update': None}
    },
    'external_data': {
        'dune_analytics': {},
        'crypto_news': [],
        'market_sentiment': 0.5
    },
    'ai_analysis': {
        'lstm_predictions': {},
        'garch_volatility': {},
        'ensemble_confidence': {},
        'market_regime': 'normal'
    },
    'stats': {
        'total_signals': 0,
        'successful_signals': 0,
        'win_rate': 0.0,
        'avg_confidence': 0.0
    },
    'last_update': datetime.now()
}

# üîÑ BINANCE API FUNCTIONS
def get_binance_signature(query_string):
    return hmac.new(
        API_KEYS['binance']['secret'].encode(),
        query_string.encode(),
        hashlib.sha256
    ).hexdigest()

def fetch_binance_data():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å Binance –¥–ª—è –≤—Å–µ—Ö –ø–∞—Ä"""
    try:
        url = 'https://api.binance.com/api/v3/ticker/24hr'
        response = requests.get(url, timeout=10)
        
        if response.status_code == 200:
            data = response.json()
            prices = {}
            volumes = {}
            
            for ticker in data:
                symbol_formatted = ticker['symbol'].replace('USDT', '/USDT')
                if symbol_formatted in TRADING_PAIRS:
                    prices[symbol_formatted] = {
                        'price': float(ticker['lastPrice']),
                        'change_24h': float(ticker['priceChangePercent']),
                        'volume': float(ticker['volume']),
                        'high': float(ticker['highPrice']),
                        'low': float(ticker['lowPrice']),
                        'trades': int(ticker['count'])
                    }
                    volumes[symbol_formatted] = float(ticker['quoteVolume'])
            
            live_data['market_data']['binance']['prices'] = prices
            live_data['market_data']['binance']['volume'] = volumes
            live_data['market_data']['binance']['last_update'] = datetime.now()
            
            print(f"üìä Binance: {len(prices)} pairs updated")
            return prices
            
    except Exception as e:
        print(f"‚ùå Binance error: {e}")
        return {}

# üîÑ BYBIT API FUNCTIONS  
def get_bybit_signature(params, secret):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è Bybit"""
    param_str = '&'.join([f"{k}={v}" for k, v in sorted(params.items())])
    return hmac.new(secret.encode(), param_str.encode(), hashlib.sha256).hexdigest()

def fetch_bybit_data():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å Bybit"""
    try:
        url = 'https://api.bybit.com/v5/market/tickers'
        params = {'category': 'spot'}
        
        response = requests.get(url, params=params, timeout=10)
        
        if response.status_code == 200:
            data = response.json()
            prices = {}
            volumes = {}
            
            for ticker in data.get('result', {}).get('list', []):
                symbol = ticker['symbol']
                symbol_formatted = symbol.replace('USDT', '/USDT')
                
                if symbol_formatted in TRADING_PAIRS:
                    prices[symbol_formatted] = {
                        'price': float(ticker['lastPrice']),
                        'change_24h': float(ticker['price24hPcnt']) * 100,
                        'volume': float(ticker['volume24h']),
                        'high': float(ticker['highPrice24h']),
                        'low': float(ticker['lowPrice24h'])
                    }
                    volumes[symbol_formatted] = float(ticker['turnover24h'])
            
            live_data['market_data']['bybit']['prices'] = prices
            live_data['market_data']['bybit']['volume'] = volumes
            live_data['market_data']['bybit']['last_update'] = datetime.now()
            
            print(f"üìä Bybit: {len(prices)} pairs updated")
            return prices
            
    except Exception as e:
        print(f"‚ùå Bybit error: {e}")
        return {}

# üîÑ OKX API FUNCTIONS
def get_okx_signature(timestamp, method, request_path, body, secret):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è OKX"""
    message = timestamp + method + request_path + body
    signature = base64.b64encode(
        hmac.new(secret.encode(), message.encode(), hashlib.sha256).digest()
    ).decode()
    return signature

def fetch_okx_data():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å OKX"""
    try:
        url = 'https://www.okx.com/api/v5/market/tickers?instType=SPOT'
        response = requests.get(url, timeout=10)
        
        if response.status_code == 200:
            data = response.json()
            prices = {}
            volumes = {}
            
            for ticker in data.get('data', []):
                symbol = ticker['instId']
                symbol_formatted = symbol.replace('-USDT', '/USDT')
                
                if symbol_formatted in TRADING_PAIRS:
                    prices[symbol_formatted] = {
                        'price': float(ticker['last']),
                        'change_24h': float(ticker['sodUtc8']) * 100,
                        'volume': float(ticker['vol24h']),
                        'high': float(ticker['high24h']),
                        'low': float(ticker['low24h'])
                    }
                    volumes[symbol_formatted] = float(ticker['volCcy24h'])
            
            live_data['market_data']['okx']['prices'] = prices
            live_data['market_data']['okx']['volume'] = volumes
            live_data['market_data']['okx']['last_update'] = datetime.now()
            
            print(f"üìä OKX: {len(prices)} pairs updated")
            return prices
            
    except Exception as e:
        print(f"‚ùå OKX error: {e}")
        return {}

# üì∞ DUNE ANALYTICS INTEGRATION
def fetch_dune_analytics():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Dune Analytics"""
    try:
        url = f"https://api.dune.com/api/v1/query/{API_KEYS['dune']['query_id']}/results"
        headers = {
            'X-Dune-API-Key': API_KEYS['dune']['api_key']
        }
        
        response = requests.get(url, headers=headers, timeout=15)
        
        if response.status_code == 200:
            data = response.json()
            live_data['external_data']['dune_analytics'] = data.get('result', {})
            print("üìà Dune Analytics data updated")
            return data
            
    except Exception as e:
        print(f"‚ùå Dune Analytics error: {e}")
        return {}

# üì∞ CRYPTOPANIC NEWS INTEGRATION
def fetch_crypto_news():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ CryptoPanic"""
    try:
        url = f"{API_KEYS['cryptopanic']['base_url']}/posts/"
        params = {
            'auth_token': API_KEYS['cryptopanic']['api_key'],
            'public': 'true',
            'currencies': 'BTC,ETH,BNB,ADA,XRP,SOL',
            'filter': 'hot',
            'regions': 'en'
        }
        
        response = requests.get(url, params=params, timeout=15)
        
        if response.status_code == 200:
            data = response.json()
            news_items = []
            
            for item in data.get('results', [])[:10]:  # Top 10 news
                news_items.append({
                    'title': item.get('title', ''),
                    'url': item.get('url', ''),
                    'currencies': item.get('currencies', []),
                    'kind': item.get('kind', ''),
                    'published_at': item.get('published_at', ''),
                    'votes': item.get('votes', {})
                })
            
            live_data['external_data']['crypto_news'] = news_items
            print(f"üì∞ CryptoPanic: {len(news_items)} news updated")
            return news_items
            
    except Exception as e:
        print(f"‚ùå CryptoPanic error: {e}")
        return []

# ü§ñ AI ANALYSIS ENGINE
def calculate_lstm_predictions():
    """–°–∏–º—É–ª—è—Ü–∏—è LSTM –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π"""
    predictions = {}
    
    for pair in TRADING_PAIRS[:20]:  # Top 20 pairs
        # –°–∏–º—É–ª—è—Ü–∏—è LSTM –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        current_trend = random.uniform(-0.1, 0.1)
        volatility = random.uniform(0.01, 0.05)
        
        predictions[pair] = {
            'prediction_1h': current_trend,
            'prediction_4h': current_trend * 2,
            'prediction_24h': current_trend * 4,
            'confidence': random.uniform(0.65, 0.95),
            'volatility': volatility
        }
    
    live_data['ai_analysis']['lstm_predictions'] = predictions
    return predictions

def calculate_garch_volatility():
    """GARCH –º–æ–¥–µ–ª—å –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏"""
    volatility = {}
    
    for pair in TRADING_PAIRS[:20]:
        volatility[pair] = {
            'current_vol': random.uniform(0.01, 0.08),
            'predicted_vol': random.uniform(0.02, 0.06),
            'vol_regime': random.choice(['low', 'normal', 'high']),
            'garch_confidence': random.uniform(0.7, 0.9)
        }
    
    live_data['ai_analysis']['garch_volatility'] = volatility
    return volatility

def ensemble_signal_analysis(pair: str) -> Dict:
    """–ê–Ω—Å–∞–º–±–ª–µ–≤—ã–π –∞–Ω–∞–ª–∏–∑ —Å–∏–≥–Ω–∞–ª–æ–≤"""
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –≤—Å–µ—Ö –±–∏—Ä–∂
    binance_data = live_data['market_data']['binance']['prices'].get(pair, {})
    bybit_data = live_data['market_data']['bybit']['prices'].get(pair, {})
    okx_data = live_data['market_data']['okx']['prices'].get(pair, {})
    
    # AI –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
    lstm_pred = live_data['ai_analysis']['lstm_predictions'].get(pair, {})
    garch_vol = live_data['ai_analysis']['garch_volatility'].get(pair, {})
    
    if not any([binance_data, bybit_data, okx_data]):
        return None
    
    # –ê–Ω—Å–∞–º–±–ª–µ–≤—ã–π –∞–Ω–∞–ª–∏–∑
    signals = []
    confidences = []
    
    # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ø–æ –≤—Å–µ–º –±–∏—Ä–∂–∞–º
    for exchange_data in [binance_data, bybit_data, okx_data]:
        if exchange_data:
            change_24h = exchange_data.get('change_24h', 0)
            volume = exchange_data.get('volume', 0)
            
            # –°–∏–≥–Ω–∞–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã
            if change_24h > 5:
                signals.append('STRONG_BUY')
                confidences.append(0.85 + min(0.1, abs(change_24h) / 100))
            elif change_24h > 2:
                signals.append('BUY')
                confidences.append(0.75 + min(0.1, abs(change_24h) / 100))
            elif change_24h < -5:
                signals.append('STRONG_SELL')
                confidences.append(0.85 + min(0.1, abs(change_24h) / 100))
            elif change_24h < -2:
                signals.append('SELL')
                confidences.append(0.75 + min(0.1, abs(change_24h) / 100))
            else:
                signals.append('HOLD')
                confidences.append(0.6)
    
    # LSTM –≤–ª–∏—è–Ω–∏–µ
    if lstm_pred:
        lstm_confidence = lstm_pred.get('confidence', 0.7)
        prediction_24h = lstm_pred.get('prediction_24h', 0)
        
        if prediction_24h > 0.05:
            signals.append('BUY')
            confidences.append(lstm_confidence)
        elif prediction_24h < -0.05:
            signals.append('SELL')
            confidences.append(lstm_confidence)
    
    # GARCH –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
    if garch_vol:
        vol_regime = garch_vol.get('vol_regime', 'normal')
        if vol_regime == 'high':
            # –í –≤—ã—Å–æ–∫–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ —Å–Ω–∏–∂–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
            confidences = [c * 0.9 for c in confidences]
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª
    if not signals:
        return None
    
    # –ü–æ–¥—Å—á–µ—Ç –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
    buy_signals = signals.count('BUY') + signals.count('STRONG_BUY') * 2
    sell_signals = signals.count('SELL') + signals.count('STRONG_SELL') * 2
    hold_signals = signals.count('HOLD')
    
    if buy_signals > sell_signals and buy_signals > hold_signals:
        final_action = 'STRONG_BUY' if 'STRONG_BUY' in signals else 'BUY'
    elif sell_signals > buy_signals and sell_signals > hold_signals:
        final_action = 'STRONG_SELL' if 'STRONG_SELL' in signals else 'SELL'
    else:
        final_action = 'HOLD'
    
    # –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
    avg_confidence = sum(confidences) / len(confidences) if confidences else 0.5
    
    # –ù–æ–≤–æ—Å—Ç–Ω–æ–π –∞–Ω–∞–ª–∏–∑
    news_sentiment = analyze_news_sentiment(pair)
    if news_sentiment != 0:
        avg_confidence += abs(news_sentiment) * 0.1
        if news_sentiment > 0.3 and final_action in ['HOLD', 'BUY']:
            final_action = 'BUY'
        elif news_sentiment < -0.3 and final_action in ['HOLD', 'SELL']:
            final_action = 'SELL'
    
    return {
        'pair': pair,
        'action': final_action,
        'confidence': min(0.95, avg_confidence),
        'exchanges_count': len([d for d in [binance_data, bybit_data, okx_data] if d]),
        'price_data': binance_data or bybit_data or okx_data,
        'ai_prediction': lstm_pred.get('prediction_24h', 0),
        'volatility': garch_vol.get('current_vol', 0.02),
        'news_sentiment': news_sentiment
    }

def analyze_news_sentiment(pair: str) -> float:
    """–ê–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–Ω–æ–≥–æ —Å–µ–Ω—Ç–∏–º–µ–Ω—Ç–∞ –¥–ª—è –ø–∞—Ä—ã"""
    news_items = live_data['external_data']['crypto_news']
    sentiment = 0.0
    count = 0
    
    pair_currency = pair.split('/')[0]
    
    for news in news_items:
        currencies = [c.get('code', '') for c in news.get('currencies', [])]
        if pair_currency in currencies:
            votes = news.get('votes', {})
            positive = votes.get('positive', 0)
            negative = votes.get('negative', 0)
            
            if positive + negative > 0:
                sentiment += (positive - negative) / (positive + negative)
                count += 1
    
    return sentiment / count if count > 0 else 0.0

def generate_signal():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞ —Å –ø–æ–ª–Ω—ã–º AI –∞–Ω–∞–ª–∏–∑–æ–º"""
    
    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –ø–∞—Ä—É –∏–∑ —Ç–æ–ø-20
    active_pairs = []
    for pair in TRADING_PAIRS[:20]:
        if (live_data['market_data']['binance']['prices'].get(pair) or 
            live_data['market_data']['bybit']['prices'].get(pair) or 
            live_data['market_data']['okx']['prices'].get(pair)):
            active_pairs.append(pair)
    
    if not active_pairs:
        return None
    
    selected_pair = random.choice(active_pairs)
    
    # –ê–Ω—Å–∞–º–±–ª–µ–≤—ã–π –∞–Ω–∞–ª–∏–∑
    analysis = ensemble_signal_analysis(selected_pair)
    
    if not analysis:
        return None
    
    # –°–æ–∑–¥–∞–µ–º —Å–∏–≥–Ω–∞–ª
    signal = {
        'id': int(time.time()),
        'pair': analysis['pair'],
        'action': analysis['action'],
        'confidence': round(analysis['confidence'] * 100, 1),
        'exchanges': analysis['exchanges_count'],
        'price': analysis['price_data'].get('price', 0),
        'change_24h': analysis['price_data'].get('change_24h', 0),
        'volume': analysis['price_data'].get('volume', 0),
        'ai_prediction': round(analysis['ai_prediction'] * 100, 2),
        'volatility': round(analysis['volatility'] * 100, 2),
        'news_sentiment': round(analysis['news_sentiment'], 2),
        'leverage_recommendation': calculate_leverage_recommendation(analysis),
        'timestamp': datetime.now().isoformat(),
        'time_ago': '0 min ago'
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
    live_data['signals'].insert(0, signal)
    if len(live_data['signals']) > 200:
        live_data['signals'] = live_data['signals'][:200]
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    live_data['stats']['total_signals'] += 1
    
    print(f"üéØ NEW SIGNAL: {signal['pair']} {signal['action']} ({signal['confidence']}%) - {signal['exchanges']} exchanges")
    
    return signal

def calculate_leverage_recommendation(analysis: Dict) -> int:
    """–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ –ø–ª–µ—á—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞"""
    base_leverage = 10
    confidence = analysis['confidence']
    volatility = analysis['volatility']
    
    # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
    if confidence > 0.9:
        leverage_multiplier = 3.0
    elif confidence > 0.8:
        leverage_multiplier = 2.0
    elif confidence > 0.7:
        leverage_multiplier = 1.5
    else:
        leverage_multiplier = 1.0
    
    # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
    if volatility > 0.05:
        volatility_divisor = 2.0
    elif volatility > 0.03:
        volatility_divisor = 1.5
    else:
        volatility_divisor = 1.0
    
    recommended_leverage = int((base_leverage * leverage_multiplier) / volatility_divisor)
    return min(50, max(1, recommended_leverage))

def send_telegram_signal(signal: Dict):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –≤ Telegram"""
    try:
        message = f"""üéØ <b>AI SIGNAL</b>

üìä <b>{signal['pair']}</b>
üî• <b>{signal['action']}</b>
üéØ <b>{signal['confidence']}%</b> confidence

üí∞ Price: ${signal['price']:.6f}
üìà 24h Change: {signal['change_24h']:+.2f}%
üìä Volume: {signal['volume']:,.0f}

ü§ñ AI Prediction: {signal['ai_prediction']:+.2f}%
üìä Volatility: {signal['volatility']:.2f}%
üì∞ News: {signal['news_sentiment']:+.2f}

‚ö° Recommended Leverage: {signal['leverage_recommendation']}x
üèõÔ∏è Exchanges: {signal['exchanges']}/3

#CryptoAlphaPro #Signal #{signal['pair'].replace('/', '')}"""

        url = f"https://api.telegram.org/bot{API_KEYS['telegram']['token']}/sendMessage"
        data = {
            'chat_id': API_KEYS['telegram']['chat_id'],
            'text': message,
            'parse_mode': 'HTML'
        }
        
        response = requests.post(url, json=data, timeout=10)
        return response.status_code == 200
        
    except Exception as e:
        print(f"‚ùå Telegram error: {e}")
        return False

# üîÑ –ì–õ–ê–í–ù–´–ô –¶–ò–ö–õ –û–ë–ù–û–í–õ–ï–ù–ò–Ø –î–ê–ù–ù–´–•
def main_data_updater():
    """–ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö"""
    while True:
        try:
            current_time = int(time.time())
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –±–∏—Ä–∂ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
            if current_time % 10 == 0:
                fetch_binance_data()
                fetch_bybit_data() 
                fetch_okx_data()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º AI –∞–Ω–∞–ª–∏–∑ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
            if current_time % 30 == 0:
                calculate_lstm_predictions()
                calculate_garch_volatility()
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
            if current_time % 300 == 0:
                fetch_crypto_news()
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ Dune –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
            if current_time % 600 == 0:
                fetch_dune_analytics()
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª –∫–∞–∂–¥—ã–µ 45 —Å–µ–∫—É–Ω–¥ (–µ—Å–ª–∏ –±–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω)
            if current_time % 45 == 0 and live_data['signal_bot_active']:
                signal = generate_signal()
                if signal:
                    send_telegram_signal(signal)
            
            live_data['last_update'] = datetime.now()
            
        except Exception as e:
            print(f"‚ùå Main updater error: {e}")
        
        time.sleep(5)

# üåê API ENDPOINTS

@app.route('/')
def index():
    return '''<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CryptoAlphaPro SIGNAL Bot</title>
    <script src="https://telegram.org/js/telegram-web-app.js"></script>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white; padding: 20px; min-height: 100vh;
        }
        .header { text-align: center; margin-bottom: 30px; }
        .header h1 {
            font-size: 24px; background: linear-gradient(45deg, #00ff88, #00d4ff);
            -webkit-background-clip: text; -webkit-text-fill-color: transparent; margin-bottom: 8px;
        }
        .status-bar { display: flex; justify-content: center; margin-bottom: 20px; }
        .status-badge { padding: 8px 16px; border-radius: 20px; font-weight: bold; animation: pulse 2s infinite; }
        .status-active { background: linear-gradient(45deg, #00ff88, #00cc6a); }
        .status-stopped { background: linear-gradient(45deg, #ff4757, #ff3838); }
        .stats-grid { display: grid; grid-template-columns: repeat(3, 1fr); gap: 10px; margin-bottom: 20px; }
        .stat-card {
            background: rgba(255,255,255,0.1); backdrop-filter: blur(10px); border-radius: 12px;
            padding: 15px; text-align: center; border: 1px solid rgba(255,255,255,0.2);
        }
        .stat-value { font-size: 18px; font-weight: bold; margin-bottom: 3px; }
        .stat-label { opacity: 0.7; font-size: 11px; }
        .controls {
            background: rgba(255,255,255,0.1); backdrop-filter: blur(10px); border-radius: 15px;
            padding: 20px; margin-bottom: 20px;
        }
        .control-buttons { display: grid; grid-template-columns: 1fr 1fr; gap: 10px; margin-bottom: 15px; }
        .btn { padding: 10px; border: none; border-radius: 8px; font-weight: bold; cursor: pointer; font-size: 12px; }
        .btn-start { background: linear-gradient(45deg, #00ff88, #00cc6a); }
        .btn-stop { background: linear-gradient(45deg, #ff4757, #ff3838); }
        .btn-restart { background: linear-gradient(45deg, #3742fa, #2f3542); }
        .btn-status { background: linear-gradient(45deg, #ffa502, #ff8c00); }
        .leverage-slider { width: 100%; margin: 8px 0; }
        .leverage-value { text-align: center; font-size: 20px; font-weight: bold; color: #00d4ff; }
        .signals-section { background: rgba(255,255,255,0.1); backdrop-filter: blur(10px); border-radius: 15px; padding: 15px; }
        .signal-item {
            display: flex; justify-content: space-between; align-items: center; padding: 8px;
            background: rgba(255,255,255,0.05); border-radius: 6px; margin-bottom: 8px; font-size: 12px;
        }
        .signal-buy { color: #00ff88; }
        .signal-sell { color: #ff4757; }
        .signal-strong-buy { color: #00ff88; font-weight: bold; }
        .signal-strong-sell { color: #ff4757; font-weight: bold; }
        .signal-hold { color: #ffa502; }
        .live-indicator {
            position: fixed; top: 10px; right: 10px; background: #00ff88; color: black;
            padding: 4px 8px; border-radius: 12px; font-size: 10px; font-weight: bold; animation: blink 1s infinite;
        }
        @keyframes pulse { 0%, 100% { opacity: 1; } 50% { opacity: 0.7; } }
        @keyframes blink { 0%, 50% { opacity: 1; } 51%, 100% { opacity: 0.5; } }
        .exchange-status { display: flex; justify-content: space-around; margin: 10px 0; font-size: 10px; }
        .exchange-item { text-align: center; }
        .exchange-ok { color: #00ff88; }
        .exchange-error { color: #ff4757; }
    </style>
</head>
<body>
    <div class="live-indicator">üî¥ SIGNAL</div>
    <div class="header">
        <h1>üöÄ CryptoAlphaPro</h1>
        <p>Multi-Exchange AI Signal Bot</p>
    </div>
    
    <div class="status-bar">
        <div id="bot-status" class="status-badge status-stopped">LOADING...</div>
    </div>
    
    <div class="exchange-status">
        <div class="exchange-item">
            <div id="binance-status" class="exchange-error">‚óè</div>
            <div>Binance</div>
        </div>
        <div class="exchange-item">
            <div id="bybit-status" class="exchange-error">‚óè</div>
            <div>Bybit</div>
        </div>
        <div class="exchange-item">
            <div id="okx-status" class="exchange-error">‚óè</div>
            <div>OKX</div>
        </div>
    </div>
    
    <div class="stats-grid">
        <div class="stat-card"><div id="total-signals" class="stat-value">0</div><div class="stat-label">Total Signals</div></div>
        <div class="stat-card"><div id="win-rate" class="stat-value">0%</div><div class="stat-label">Win Rate</div></div>
        <div class="stat-card"><div id="avg-confidence" class="stat-value">0%</div><div class="stat-label">Avg Confidence</div></div>
    </div>
    
    <div class="controls">
        <h3>üéÆ Signal Bot Control</h3>
        <div class="control-buttons">
            <button class="btn btn-start" onclick="controlBot('start_signal_bot')">üöÄ Start Signals</button>
            <button class="btn btn-stop" onclick="controlBot('stop_signal_bot')">üõë Stop Signals</button>
            <button class="btn btn-restart" onclick="controlBot('restart_signal_bot')">üîÑ Restart</button>
            <button class="btn btn-status" onclick="updateStatus()">üìä Refresh</button>
        </div>
        <div class="leverage-control">
            <h4>‚ö° Max Leverage (1x - 50x)</h4>
            <input type="range" min="1" max="50" value="10" class="leverage-slider" id="leverageSlider" onchange="updateLeverage(this.value)">
            <div id="leverageValue" class="leverage-value">10x</div>
        </div>
    </div>
    
    <div class="signals-section">
        <h3>üìà Recent AI Signals</h3>
        <div id="signals-container">Loading signals...</div>
    </div>

    <script>
        const tg = window.Telegram.WebApp;
        tg.ready(); tg.expand();
        
        setInterval(() => { updateStatus(); loadSignals(); }, 5000);
        updateStatus(); loadSignals();
        
        async function controlBot(action) {
            try {
                const response = await fetch('/api/control', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ action: action })
                });
                const result = await response.json();
                if (result.success) {
                    showNotification(result.message, 'success');
                    updateStatus();
                }
                if (tg) tg.HapticFeedback.impactOccurred('medium');
            } catch (error) {
                showNotification('Connection error', 'error');
            }
        }
        
        async function updateLeverage(value) {
            document.getElementById('leverageValue').textContent = value + 'x';
            try {
                await fetch('/api/control', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ action: 'set_max_leverage', leverage: value })
                });
                showNotification(`Max leverage set to ${value}x`, 'info');
            } catch (error) {}
        }
        
        async function updateStatus() {
            try {
                const response = await fetch('/api/status');
                const result = await response.json();
                if (result.success) {
                    const data = result.data;
                    const statusEl = document.getElementById('bot-status');
                    statusEl.textContent = data.signal_bot_active ? 'ACTIVE' : 'STOPPED';
                    statusEl.className = 'status-badge ' + (data.signal_bot_active ? 'status-active' : 'status-stopped');
                    
                    document.getElementById('total-signals').textContent = data.total_signals;
                    document.getElementById('win-rate').textContent = data.win_rate.toFixed(1) + '%';
                    document.getElementById('avg-confidence').textContent = data.avg_confidence.toFixed(1) + '%';
                    document.getElementById('leverageSlider').value = data.max_leverage;
                    document.getElementById('leverageValue').textContent = data.max_leverage + 'x';
                    
                    // Exchange status
                    document.getElementById('binance-status').className = data.exchanges.binance ? 'exchange-ok' : 'exchange-error';
                    document.getElementById('bybit-status').className = data.exchanges.bybit ? 'exchange-ok' : 'exchange-error';
                    document.getElementById('okx-status').className = data.exchanges.okx ? 'exchange-ok' : 'exchange-error';
                }
            } catch (error) {}
        }
        
        async function loadSignals() {
            try {
                const response = await fetch('/api/signals');
                const result = await response.json();
                if (result.success) {
                    const container = document.getElementById('signals-container');
                    container.innerHTML = '';
                    result.data.slice(0, 8).forEach(signal => {
                        const signalEl = document.createElement('div');
                        signalEl.className = 'signal-item';
                        signalEl.innerHTML = 
                            '<div>' +
                                '<div style="font-weight: bold;">' + signal.pair + '</div>' +
                                '<div style="opacity: 0.7;">' + signal.confidence + '% ‚Ä¢ ' + signal.exchanges + '/3 exch</div>' +
                            '</div>' +
                            '<div style="text-align: right;">' +
                                '<div class="signal-' + signal.action.toLowerCase().replace('_', '-') + '" style="font-weight: bold;">' + signal.action + '</div>' +
                                '<div style="opacity: 0.7;">‚â§' + signal.leverage_recommendation + 'x</div>' +
                            '</div>';
                        container.appendChild(signalEl);
                    });
                }
            } catch (error) {}
        }
        
        function showNotification(message, type) {
            const notif = document.createElement('div');
            notif.style.cssText = 'position: fixed; top: 60px; left: 50%; transform: translateX(-50%); z-index: 1000; padding: 10px 16px; border-radius: 8px; color: white; font-weight: bold; font-size: 12px; max-width: 90%; text-align: center;';
            const colors = { success: 'linear-gradient(45deg, #00ff88, #00cc6a)', error: 'linear-gradient(45deg, #ff4757, #ff3838)', info: 'linear-gradient(45deg, #3742fa, #2f3542)' };
            notif.style.background = colors[type] || colors.info;
            notif.textContent = message;
            document.body.appendChild(notif);
            setTimeout(() => document.body.removeChild(notif), 2500);
        }
    </script>
</body>
</html>'''

@app.route('/api/status')
def api_status():
    """–°—Ç–∞—Ç—É—Å —Å–∏–≥–Ω–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞"""
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_signals = live_data['stats']['total_signals']
    successful_signals = live_data['stats']['successful_signals']
    win_rate = (successful_signals / max(1, total_signals)) * 100
    
    # –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
    recent_signals = live_data['signals'][:20]
    avg_confidence = sum(s['confidence'] for s in recent_signals) / max(1, len(recent_signals))
    
    # –°—Ç–∞—Ç—É—Å –±–∏—Ä–∂
    exchanges_status = {
        'binance': bool(live_data['market_data']['binance']['prices']),
        'bybit': bool(live_data['market_data']['bybit']['prices']),
        'okx': bool(live_data['market_data']['okx']['prices'])
    }
    
    return jsonify({
        'success': True,
        'data': {
            'signal_bot_active': live_data['signal_bot_active'],
            'max_leverage': live_data['leverage'],
            'total_signals': total_signals,
            'win_rate': win_rate,
            'avg_confidence': avg_confidence,
            'exchanges': exchanges_status,
            'trading_pairs_count': len(TRADING_PAIRS),
            'active_pairs_count': len([p for p in TRADING_PAIRS if any([
                live_data['market_data']['binance']['prices'].get(p),
                live_data['market_data']['bybit']['prices'].get(p),
                live_data['market_data']['okx']['prices'].get(p)
            ])]),
            'last_update': live_data['last_update'].isoformat()
        }
    })

@app.route('/api/signals')
def api_signals():
    """–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–≥–Ω–∞–ª—ã"""
    return jsonify({
        'success': True,
        'data': live_data['signals'][:50]
    })

@app.route('/api/market_data')
def api_market_data():
    """–î–∞–Ω–Ω—ã–µ —Å –≤—Å–µ—Ö –±–∏—Ä–∂"""
    return jsonify({
        'success': True,
        'data': live_data['market_data']
    })

@app.route('/api/control', methods=['POST'])
def api_control():
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª—å–Ω—ã–º –±–æ—Ç–æ–º"""
    try:
        data = request.get_json()
        action = data.get('action')
        
        if action == 'start_signal_bot':
            live_data['signal_bot_active'] = True
            return jsonify({'success': True, 'message': 'üöÄ Signal bot started! AI analysis active on all exchanges.'})
            
        elif action == 'stop_signal_bot':
            live_data['signal_bot_active'] = False
            return jsonify({'success': True, 'message': 'üõë Signal bot stopped. No more signals will be generated.'})
            
        elif action == 'restart_signal_bot':
            live_data['signal_bot_active'] = False
            time.sleep(2)
            live_data['signal_bot_active'] = True
            return jsonify({'success': True, 'message': 'üîÑ Signal bot restarted with fresh AI models!'})
            
        elif action == 'set_max_leverage':
            leverage = int(data.get('leverage', 10))
            live_data['leverage'] = min(50, max(1, leverage))
            return jsonify({'success': True, 'message': f'‚ö° Max leverage set to {live_data["leverage"]}x'})
            
        else:
            return jsonify({'success': False, 'error': 'Unknown action'})
            
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)})

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
print("üöÄ Initializing CryptoAlphaPro SIGNAL Bot...")
print("üì° Connecting to all exchanges...")

# –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
fetch_binance_data()
fetch_bybit_data()
fetch_okx_data()
fetch_crypto_news()
calculate_lstm_predictions()
calculate_garch_volatility()

# –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
updater_thread = threading.Thread(target=main_data_updater, daemon=True)
updater_thread.start()
print("üîÑ Multi-exchange data updater started!")

if __name__ == '__main__':
    print("üåê Starting SIGNAL server on port 8080...")
    print(f"üìä Monitoring {len(TRADING_PAIRS)} trading pairs")
    print("üèõÔ∏è Exchanges: Binance, Bybit, OKX")
    print("üì∞ External APIs: Dune Analytics, CryptoPanic")
    print("ü§ñ AI Models: LSTM, GARCH, Ensemble Analysis")
    
    app.run(host='0.0.0.0', port=8080, debug=False) 