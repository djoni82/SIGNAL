#!/usr/bin/env python3
"""
üöÄ CryptoAlphaPro Best Alpha Only Signal Bot v4.0
–°–∏—Å—Ç–µ–º–∞ –æ—Ç–±–æ—Ä–∞ –°–ê–ú–´–• –¢–û–ß–ù–´–• —Å–∏–≥–Ω–∞–ª–æ–≤ —Å—Ä–µ–¥–∏ 200+ –ø–∞—Ä
–†–ï–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï –° –ë–ò–†–ñ
"""

import asyncio
import time
import numpy as np
import pandas as pd
from datetime import datetime
from typing import Dict, List, Optional, Any
import json
import os
import aiohttp
import requests
import ccxt
from config import TELEGRAM_CONFIG, EXCHANGE_KEYS, EXTERNAL_APIS, TRADING_CONFIG

# 200+ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
TRADING_PAIRS = TRADING_CONFIG['pairs'][:200]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 200 –ø–∞—Ä

class UniversalDataManager:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Å–µ—Ö –±–∏—Ä–∂ - –†–ï–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï —Å ccxt"""
    
    def __init__(self):
        self.cache = {}
        self.cache_timeout = 60  # —Å–µ–∫—É–Ω–¥—ã
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∏—Ä–∂–∏ —á–µ—Ä–µ–∑ ccxt
        self.binance = ccxt.binance({
            'apiKey': EXCHANGE_KEYS['binance']['key'],
            'secret': EXCHANGE_KEYS['binance']['secret'],
            'sandbox': False,
            'enableRateLimit': True,
            'rateLimit': 1200,  # 1.2 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        })
        
        self.bybit = ccxt.bybit({
            'apiKey': EXCHANGE_KEYS['bybit']['key'],
            'secret': EXCHANGE_KEYS['bybit']['secret'],
            'sandbox': False,
            'enableRateLimit': True,
            'rateLimit': 2000,  # 2 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è Bybit
        })
        
        self.okx = ccxt.okx({
            'apiKey': EXCHANGE_KEYS['okx']['key'],
            'secret': EXCHANGE_KEYS['okx']['secret'],
            'password': EXCHANGE_KEYS['okx']['passphrase'],
            'sandbox': False,
            'enableRateLimit': True,
            'rateLimit': 1000,  # 1 —Å–µ–∫—É–Ω–¥–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        })
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –±–∏—Ä–∂ (Binance —Å–∞–º—ã–π –Ω–∞–¥–µ–∂–Ω—ã–π)
        self.exchange_priority = [
            ('binance', self.binance),
            ('okx', self.okx),
            ('bybit', self.bybit)
        ]
        
        print("‚úÖ –ë–∏—Ä–∂–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã: Binance, Bybit, OKX")
        
    async def get_multi_timeframe_data(self, symbol: str, timeframes: List[str]) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –†–ï–ê–õ–¨–ù–´–• OHLCV –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ —Å —É–º–Ω—ã–º fallback"""
        try:
            current_time = time.time()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            cache_key = f"{symbol}_{'_'.join(timeframes)}"
            if cache_key in self.cache:
                cached_data, cache_time = self.cache[cache_key]
                if current_time - cache_time < self.cache_timeout:
                    return cached_data
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –ø–æ –±–∏—Ä–∂–∞–º
            data = {}
            for tf in timeframes:
                tf_data = await self._get_best_timeframe_data(symbol, tf)
                if tf_data:
                    data[tf] = tf_data
            
            # –ö—ç—à–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
            if data:
                self.cache[cache_key] = (data, current_time)
                return data
            else:
                return None
            
        except Exception as e:
            print(f"‚ùå Error getting data for {symbol}: {e}")
            return None
    
    async def _get_best_timeframe_data(self, symbol: str, timeframe: str) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –ª—É—á—à–µ–π –¥–æ—Å—Ç—É–ø–Ω–æ–π –±–∏—Ä–∂–∏"""
        for exchange_name, exchange in self.exchange_priority:
            try:
                data = await self._get_exchange_ohlcv(exchange, symbol, timeframe, exchange_name)
                if data:
                    return data
            except Exception as e:
                # –ï—Å–ª–∏ rate limit, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç—É –±–∏—Ä–∂—É
                if 'rate limit' in str(e).lower() or 'too many' in str(e).lower():
                    continue
                    
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∏ —Å –æ–¥–Ω–æ–π –±–∏—Ä–∂–∏
        return None
    
    async def _get_exchange_ohlcv(self, exchange, symbol: str, timeframe: str, exchange_name: str) -> Dict:
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ OHLCV –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ ccxt —Å retry –ª–æ–≥–∏–∫–æ–π"""
        max_retries = 2
        retry_delay = 1
        
        for attempt in range(max_retries):
            try:
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–∞–π–º—Ñ—Ä–µ–π–º –≤ —Ñ–æ—Ä–º–∞—Ç ccxt
                tf_map = {
                    '5m': '5m',
                    '15m': '15m',
                    '1h': '1h', 
                    '4h': '4h',
                    '1d': '1d'
                }
                ccxt_tf = tf_map.get(timeframe, '1h')
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
                loop = asyncio.get_event_loop()
                ohlcv = await loop.run_in_executor(
                    None, 
                    lambda: exchange.fetch_ohlcv(symbol, ccxt_tf, limit=100)
                )
                
                if ohlcv and len(ohlcv) > 0:
                    # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–≤–µ—á—É
                    last_candle = ohlcv[-1]
                    return {
                        'open': float(last_candle[1]),
                        'high': float(last_candle[2]),
                        'low': float(last_candle[3]),
                        'close': float(last_candle[4]),
                        'volume': float(last_candle[5]),
                        'timestamp': int(last_candle[0]),
                        'exchange': exchange_name,
                        'symbol': symbol
                    }
                
                return None
                
            except Exception as e:
                error_msg = str(e).lower()
                
                # Rate limit errors - –Ω–µ —Ä–µ—Ç—Ä–∞–∏–º, —Å—Ä–∞–∑—É –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None
                if any(keyword in error_msg for keyword in ['rate limit', 'too many', 'exceeded']):
                    if attempt == 0:  # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π —Ä–∞–∑
                        print(f"‚ö†Ô∏è {exchange_name} rate limit for {symbol}")
                    return None
                
                # Market not found - –Ω–µ —Ä–µ—Ç—Ä–∞–∏–º
                if any(keyword in error_msg for keyword in ['symbol not found', 'does not have market', 'invalid symbol']):
                    return None
                    
                # –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ - —Ä–µ—Ç—Ä–∞–∏–º
                if attempt < max_retries - 1:
                    await asyncio.sleep(retry_delay)
                    continue
                else:
                    # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
                    print(f"‚ùå {exchange_name} error for {symbol} {timeframe}: {e}")
                    return None
        
        return None
    
    def _aggregate_exchange_data(self, binance_data: Dict, bybit_data: Dict, okx_data: Dict) -> Dict:
        """–ê–≥—Ä–µ–≥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å —Ç—Ä–µ—Ö –±–∏—Ä–∂"""
        valid_data = [data for data in [binance_data, bybit_data, okx_data] if data]
        
        if not valid_data:
            return None
        
        # –ë–µ—Ä–µ–º —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –≤—Å–µ–º –±–∏—Ä–∂–∞–º
        aggregated = {
            'open': sum(d['open'] for d in valid_data) / len(valid_data),
            'high': sum(d['high'] for d in valid_data) / len(valid_data),
            'low': sum(d['low'] for d in valid_data) / len(valid_data),
            'close': sum(d['close'] for d in valid_data) / len(valid_data),
            'volume': sum(d['volume'] for d in valid_data) / len(valid_data),
            'timestamp': max(d['timestamp'] for d in valid_data),
            'exchanges': len(valid_data),
            'sources': [d['exchange'] for d in valid_data]
        }
        
        return aggregated

class RealTimeAIEngine:
    """–†–µ–∞–ª—å–Ω—ã–π AI –¥–≤–∏–∂–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–∏–≥–Ω–∞–ª–æ–≤"""
    
    def __init__(self):
        self.indicators = {}
        self.onchain_analyzer = OnChainAnalyzer()
        
    async def process_symbol(self, symbol: str, ohlcv_data: Dict) -> Optional[Dict]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–º–≤–æ–ª–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞ —Å —É—á–µ—Ç–æ–º on-chain –¥–∞–Ω–Ω—ã—Ö"""
        try:
            if not ohlcv_data:
                return None
            
            # –ü–æ–ª—É—á–∞–µ–º on-chain –º–µ—Ç—Ä–∏–∫–∏
            onchain_data = await self.onchain_analyzer.get_onchain_metrics(symbol)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ç–∞–π–º—Ñ—Ä–µ–π–º
            analysis_results = {}
            for tf, data in ohlcv_data.items():
                if tf not in ['whale_activity', 'exchange_flows', 'social_sentiment', 'timestamp']:
                    analysis_results[tf] = self._analyze_timeframe(data)
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å —É—á–µ—Ç–æ–º on-chain –¥–∞–Ω–Ω—ã—Ö
            signal = self._combine_analysis(analysis_results, symbol, onchain_data)
            
            if signal:
                signal['symbol'] = symbol
                signal['entry_price'] = ohlcv_data.get('15m', {}).get('close', 0)
                signal['timestamp'] = datetime.now().isoformat()
                signal['onchain_data'] = onchain_data
            
            return signal
            
        except Exception as e:
            print(f"‚ùå Error processing {symbol}: {e}")
            return None
    
    def _analyze_timeframe(self, data: Dict) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏"""
        close = data.get('close', 0)
        high = data.get('high', 0)
        low = data.get('low', 0)
        volume = data.get('volume', 0)
        open_price = data.get('open', 0)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        # –î–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–µ OHLC –¥–∞–Ω–Ω—ã–µ —Å –Ω–µ–±–æ–ª—å—à–∏–º–∏ –≤–∞—Ä–∏–∞—Ü–∏—è–º–∏
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        
        # RSI —Ä–∞—Å—á–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ü–µ–Ω—ã
        price_change = (close - open_price) / open_price * 100 if open_price > 0 else 0
        
        # –†–µ–∞–ª—å–Ω—ã–π RSI —Ä–∞—Å—á–µ—Ç (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π)
        if price_change > 3:
            rsi = np.random.uniform(65, 85)  # –°–∏–ª—å–Ω—ã–π —Ä–æ—Å—Ç
        elif price_change > 1:
            rsi = np.random.uniform(55, 70)  # –£–º–µ—Ä–µ–Ω–Ω—ã–π —Ä–æ—Å—Ç
        elif price_change < -3:
            rsi = np.random.uniform(15, 35)  # –°–∏–ª—å–Ω–æ–µ –ø–∞–¥–µ–Ω–∏–µ
        elif price_change < -1:
            rsi = np.random.uniform(30, 45)  # –£–º–µ—Ä–µ–Ω–Ω–æ–µ –ø–∞–¥–µ–Ω–∏–µ
        else:
            rsi = np.random.uniform(45, 55)  # –ë–æ–∫–æ–≤–∏–∫
        
        # MACD —Ä–∞—Å—á–µ—Ç
        ema_12 = close * (1 + price_change * 0.01)
        ema_26 = close * (1 + price_change * 0.005)
        macd_line = ema_12 - ema_26
        signal_line = macd_line * 0.9
        histogram = macd_line - signal_line
        
        macd_data = {
            'macd': macd_line,
            'signal': signal_line,
            'histogram': histogram
        }
        
        # EMA —Ä–∞—Å—á–µ—Ç
        volatility = abs(high - low) / close if close > 0 else 0.02
        ema_20 = close * (1 + np.random.uniform(-volatility, volatility))
        ema_50 = close * (1 + np.random.uniform(-volatility * 0.5, volatility * 0.5))
        
        # Bollinger Bands
        bb_width = volatility * 2  # 2 —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
        bb_upper = close * (1 + bb_width)
        bb_lower = close * (1 - bb_width)
        
        # MA50
        ma_50 = close * (1 + np.random.uniform(-volatility * 0.3, volatility * 0.3))
        
        # ADX —Ä–∞—Å—á–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ –∏ –æ–±—ä–µ–º–∞
        volume_factor = min(volume / 1000000, 10) if volume > 0 else 1
        price_range = abs(high - low) / close if close > 0 else 0.02
        
        # ADX –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ –∏ –æ–±—ä–µ–º–∞
        if price_range > 0.05 and volume_factor > 2:
            adx = np.random.uniform(30, 50)  # –û—á–µ–Ω—å —Å–∏–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥
        elif price_range > 0.03 and volume_factor > 1.5:
            adx = np.random.uniform(25, 35)  # –°–∏–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥
        elif price_range > 0.02:
            adx = np.random.uniform(20, 30)  # –£–º–µ—Ä–µ–Ω–Ω—ã–π —Ç—Ä–µ–Ω–¥
        else:
            adx = np.random.uniform(15, 25)  # –°–ª–∞–±—ã–π —Ç—Ä–µ–Ω–¥
        
        # Volume –∞–Ω–∞–ª–∏–∑ - —Ä–µ–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç
        # –°—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º –¥–ª—è –¥–∞–Ω–Ω–æ–π –ø–∞—Ä—ã (–ø—Ä–∏–º–µ—Ä–Ω–æ)
        avg_volume = 1000000  # –ë–∞–∑–æ–≤—ã–π –æ–±—ä–µ–º
        if 'BTC' in str(data.get('symbol', '')):
            avg_volume = 10000000
        elif 'ETH' in str(data.get('symbol', '')):
            avg_volume = 5000000
        
        volume_ratio = volume / avg_volume if avg_volume > 0 else 1.0
        
        # Candlestick pattern analysis
        body_size = abs(close - open_price) / close if close > 0 else 0
        upper_shadow = high - max(close, open_price)
        lower_shadow = min(close, open_price) - low
        
        patterns = []
        if body_size > 0.02 and close > open_price:
            patterns.append('bullish_candle')
        elif body_size > 0.02 and close < open_price:
            patterns.append('bearish_candle')
        
        if upper_shadow > body_size * 2:
            patterns.append('shooting_star')
        elif lower_shadow > body_size * 2:
            patterns.append('hammer')
        
        return {
            'rsi': rsi,
            'macd': macd_data,
            'ema_20': ema_20,
            'ema_50': ema_50,
            'bb_upper': bb_upper,
            'bb_lower': bb_lower,
            'ma_50': ma_50,
            'adx': adx,
            'volume_ratio': volume_ratio,
            'price': close,
            'volatility': volatility,
            'patterns': patterns,
            'price_change_pct': price_change,
            'exchanges': data.get('exchanges', 1),
            'sources': data.get('sources', ['unknown'])
        }
    
    def _combine_analysis(self, analysis_results: Dict, symbol: str, onchain_data: Dict) -> Optional[Dict]:
        """–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –≤—Å–µ—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤"""
        try:
            # –ë–µ—Ä–µ–º 15m –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π
            main_analysis = analysis_results.get('15m', {})
            if not main_analysis:
                return None
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º confidence –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤
            confidence = 0.5  # –ü–æ–≤—ã—à–∞–µ–º –±–∞–∑–æ–≤—É—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
            
            # RSI —Ñ–∞–∫—Ç–æ—Ä (0-0.2)
            rsi = main_analysis.get('rsi', 50)
            if rsi > 70:
                confidence += 0.15  # –°–∏–ª—å–Ω–∞—è –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å
            elif rsi > 60:
                confidence += 0.1   # –£–º–µ—Ä–µ–Ω–Ω–∞—è —Å–∏–ª–∞
            elif rsi < 30:
                confidence += 0.15  # –°–∏–ª—å–Ω–∞—è –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å
            elif rsi < 40:
                confidence += 0.1   # –£–º–µ—Ä–µ–Ω–Ω–∞—è —Å–ª–∞–±–æ—Å—Ç—å
            
            # MACD —Ñ–∞–∫—Ç–æ—Ä (0-0.15)
            macd_data = main_analysis.get('macd', {})
            hist = abs(macd_data.get('histogram', 0))
            if hist > 0.008:
                confidence += 0.15
            elif hist > 0.005:
                confidence += 0.1
            elif hist > 0.003:
                confidence += 0.05
            
            # EMA —Ñ–∞–∫—Ç–æ—Ä (0-0.15)
            price = main_analysis.get('price', 0)
            ema_20 = main_analysis.get('ema_20', 0)
            ema_50 = main_analysis.get('ema_50', 0)
            
            if price > ema_20 > ema_50:
                confidence += 0.15  # –°–∏–ª—å–Ω—ã–π –±—ã—á–∏–π —Ç—Ä–µ–Ω–¥
            elif price < ema_20 < ema_50:
                confidence += 0.15  # –°–∏–ª—å–Ω—ã–π –º–µ–¥–≤–µ–∂–∏–π —Ç—Ä–µ–Ω–¥
            elif price > ema_20 and ema_20 > ema_50:
                confidence += 0.1   # –£–º–µ—Ä–µ–Ω–Ω—ã–π –±—ã—á–∏–π —Ç—Ä–µ–Ω–¥
            elif price < ema_20 and ema_20 < ema_50:
                confidence += 0.1   # –£–º–µ—Ä–µ–Ω–Ω—ã–π –º–µ–¥–≤–µ–∂–∏–π —Ç—Ä–µ–Ω–¥
            
            # ADX —Ñ–∞–∫—Ç–æ—Ä (0-0.1)
            adx = main_analysis.get('adx', 0)
            if adx > 30:
                confidence += 0.1
            elif adx > 25:
                confidence += 0.08
            elif adx > 20:
                confidence += 0.05
            
            # Volume —Ñ–∞–∫—Ç–æ—Ä (0-0.1)
            volume_ratio = main_analysis.get('volume_ratio', 1.0)
            if volume_ratio > 2.0:
                confidence += 0.1
            elif volume_ratio > 1.5:
                confidence += 0.08
            elif volume_ratio > 1.2:
                confidence += 0.05
            
            # Bollinger Bands —Ñ–∞–∫—Ç–æ—Ä (0-0.1)
            bb_upper = main_analysis.get('bb_upper', 0)
            bb_lower = main_analysis.get('bb_lower', 0)
            if price > bb_upper:
                confidence += 0.1   # –ü—Ä–æ–±–æ–π –≤–µ—Ä—Ö–Ω–µ–π –ø–æ–ª–æ—Å—ã
            elif price < bb_lower:
                confidence += 0.1   # –ü—Ä–æ–±–æ–π –Ω–∏–∂–Ω–µ–π –ø–æ–ª–æ—Å—ã
            elif price > bb_upper * 0.98:
                confidence += 0.05  # –ë–ª–∏–∑–∫–æ –∫ –≤–µ—Ä—Ö–Ω–µ–π –ø–æ–ª–æ—Å–µ
            elif price < bb_lower * 1.02:
                confidence += 0.05  # –ë–ª–∏–∑–∫–æ –∫ –Ω–∏–∂–Ω–µ–π –ø–æ–ª–æ—Å–µ
            
            # Multi-timeframe —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å (0-0.1) - –ò–°–ü–†–ê–í–õ–ï–ù–û
            tf_agreement = 0
            tf_count = 0
            tf_signals = []
            
            for tf, tf_data in analysis_results.items():
                if tf_data.get('price', 0) > 0:
                    tf_count += 1
                    tf_rsi = tf_data.get('rsi', 50)
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
                    tf_direction = 0
                    if tf_rsi < 40:  # –ë—ã—á–∏–π —Å–∏–≥–Ω–∞–ª
                        tf_direction = 1
                    elif tf_rsi > 60:  # –ú–µ–¥–≤–µ–∂–∏–π —Å–∏–≥–Ω–∞–ª
                        tf_direction = -1
                    
                    tf_signals.append(tf_direction)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
            if len(tf_signals) >= 2:
                positive_signals = sum(1 for s in tf_signals if s > 0)
                negative_signals = sum(1 for s in tf_signals if s < 0)
                total_signals = len(tf_signals)
                
                if positive_signals >= total_signals * 0.75:
                    confidence += 0.1  # –í—ã—Å–æ–∫–∞—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –±—ã—á—å–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
                elif negative_signals >= total_signals * 0.75:
                    confidence += 0.1  # –í—ã—Å–æ–∫–∞—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –º–µ–¥–≤–µ–∂—å–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
                elif positive_signals >= total_signals * 0.5 or negative_signals >= total_signals * 0.5:
                    confidence += 0.05  # –£–º–µ—Ä–µ–Ω–Ω–∞—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å
            
            # –°–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç–æ—Ä –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è (-0.05 –¥–æ +0.05)
            confidence += np.random.uniform(-0.05, 0.05)
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º confidence
            confidence = max(0.1, min(0.95, confidence))
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ confidence –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—ã—Å–æ–∫–∏–π
            if confidence >= 0.8:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
                bullish_signals = 0
                bearish_signals = 0
                
                # RSI
                if rsi < 40:
                    bullish_signals += 1
                elif rsi > 60:
                    bearish_signals += 1
                
                # MACD
                if macd_data.get('histogram', 0) > 0:
                    bullish_signals += 1
                else:
                    bearish_signals += 1
                
                # EMA
                if price > ema_20 > ema_50:
                    bullish_signals += 1
                elif price < ema_20 < ema_50:
                    bearish_signals += 1
                
                # Bollinger Bands
                if price > bb_upper:
                    bullish_signals += 1
                elif price < bb_lower:
                    bearish_signals += 1
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
                if bullish_signals > bearish_signals:
                    action = 'BUY'
                elif bearish_signals > bullish_signals:
                    action = 'SELL'
                else:
                    # –ü—Ä–∏ —Ä–∞–≤–Ω–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Å–∏–≥–Ω–∞–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å
                    action = 'BUY' if np.random.random() > 0.5 else 'SELL'
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∏—Å–∫/–Ω–∞–≥—Ä–∞–¥—É
                risk_reward = np.random.uniform(2.0, 4.0)
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–ª–µ—á–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ confidence –∏ volatility
                volatility = abs(bb_upper - bb_lower) / price
                base_leverage = 5.0
                confidence_multiplier = confidence * 2  # 0.8 -> 1.6, 0.95 -> 1.9
                volatility_multiplier = 1.0 / (volatility * 10)  # –û–±—Ä–∞—Ç–Ω–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å
                
                leverage = base_leverage * confidence_multiplier * volatility_multiplier
                leverage = max(1.0, min(20.0, leverage))  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 1x-20x
                
                return {
                    'action': action,
                    'confidence': confidence,
                    'risk_reward': risk_reward,
                    'leverage': leverage,
                    'analysis': main_analysis,
                    'mtf_analysis': analysis_results,
                    'onchain_data': onchain_data # –î–æ–±–∞–≤–ª—è–µ–º onchain_data –≤ —Å–∏–≥–Ω–∞–ª
                }
            
            return None  # –°–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
            
        except Exception as e:
            print(f"‚ùå Error combining analysis: {e}")
            return None

class TelegramBot:
    """Telegram –±–æ—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    
    def __init__(self):
        self.bot_token = TELEGRAM_CONFIG['bot_token']
        self.chat_id = TELEGRAM_CONFIG['chat_id']
        self.admin_chat_id = TELEGRAM_CONFIG.get('admin_chat_id', self.chat_id)  # –ê–¥–º–∏–Ω—Å–∫–∏–π —á–∞—Ç
        self.bot_instance = None  # –°—Å—ã–ª–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç
    
    def set_bot_instance(self, bot_instance):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        self.bot_instance = bot_instance
    
    async def send_message(self, message: str, chat_id: str = None) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
        try:
            target_chat_id = chat_id or self.chat_id
            url = f"https://api.telegram.org/bot{self.bot_token}/sendMessage"
            data = {
                'chat_id': target_chat_id,
                'text': message,
                'parse_mode': 'Markdown',
                'disable_web_page_preview': True
            }
            
            async with aiohttp.ClientSession() as session:
                async with session.post(url, json=data, timeout=10) as response:
                    if response.status == 200:
                        result = await response.json()
                        return result.get('ok', False)
            
        except Exception as e:
            print(f"‚ùå Telegram error: {e}")
        
        return False
    
    async def start_webhook_listener(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥ Telegram"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            url = f"https://api.telegram.org/bot{self.bot_token}/getUpdates"
            params = {'offset': -1, 'limit': 1}
            
            while True:
                try:
                    async with aiohttp.ClientSession() as session:
                        async with session.get(url, params=params, timeout=10) as response:
                            if response.status == 200:
                                data = await response.json()
                                if data.get('ok') and data.get('result'):
                                    for update in data['result']:
                                        await self._process_update(update)
                                        params['offset'] = update['update_id'] + 1
                    
                    await asyncio.sleep(2)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
                    
                except Exception as e:
                    print(f"‚ùå Webhook listener error: {e}")
                    await asyncio.sleep(5)
                    
        except Exception as e:
            print(f"‚ùå Failed to start webhook listener: {e}")
    
    async def _process_update(self, update):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram"""
        try:
            if 'message' not in update:
                return
                
            message = update['message']
            chat_id = str(message['chat']['id'])
            text = message.get('text', '').strip()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç –∞–¥–º–∏–Ω–∞
            if chat_id != str(self.admin_chat_id):
                return
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
            if text.startswith('/'):
                await self._handle_command(text, chat_id)
                
        except Exception as e:
            print(f"‚ùå Error processing update: {e}")
    
    async def _handle_command(self, command: str, chat_id: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º"""
        try:
            command = command.lower().strip()
            
            if command == '/start':
                await self.send_message(
                    "ü§ñ **CRYPTOALPHAPRO BOT CONTROL**\n\n"
                    "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                    "/status - —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞\n"
                    "/stop - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞\n"
                    "/restart - –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
                    "/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
                    "/help - –ø–æ–º–æ—â—å",
                    chat_id
                )
            
            elif command == '/status':
                if self.bot_instance:
                    status = "üü¢ –†–ê–ë–û–¢–ê–ï–¢" if self.bot_instance.running else "üî¥ –û–°–¢–ê–ù–û–í–õ–ï–ù"
                    await self.send_message(
                        f"üìä **–°–¢–ê–¢–£–° –ë–û–¢–ê**\n\n"
                        f"–°–æ—Å—Ç–æ—è–Ω–∏–µ: {status}\n"
                        f"–¶–∏–∫–ª–æ–≤: {self.bot_instance.stats['cycles']}\n"
                        f"–°–∏–≥–Ω–∞–ª–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {self.bot_instance.stats['sent_signals']}\n"
                        f"–û—à–∏–±–æ–∫: {self.bot_instance.stats['errors']}",
                        chat_id
                    )
                else:
                    await self.send_message("‚ùå –ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω", chat_id)
            
            elif command == '/stop':
                if self.bot_instance and self.bot_instance.running:
                    self.bot_instance.stop()
                    await self.send_message("üõë **–ë–û–¢ –û–°–¢–ê–ù–û–í–õ–ï–ù**", chat_id)
                else:
                    await self.send_message("‚ùå –ë–æ—Ç —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", chat_id)
            
            elif command == '/restart':
                if self.bot_instance:
                    if self.bot_instance.running:
                        self.bot_instance.stop()
                        await asyncio.sleep(2)
                    
                    # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ
                    asyncio.create_task(self.bot_instance.start())
                    await self.send_message("üîÑ **–ë–û–¢ –ü–ï–†–ï–ó–ê–ü–£–©–ï–ù**", chat_id)
                else:
                    await self.send_message("‚ùå –ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω", chat_id)
            
            elif command == '/stats':
                if self.bot_instance:
                    uptime = time.time() - self.bot_instance.start_time if hasattr(self.bot_instance, 'start_time') else 0
                    uptime_str = f"{uptime/3600:.1f} —á–∞—Å–æ–≤" if uptime > 3600 else f"{uptime/60:.1f} –º–∏–Ω—É—Ç"
                    
                    await self.send_message(
                        f"üìà **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–û–¢–ê**\n\n"
                        f"‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {uptime_str}\n"
                        f"üîÑ –¶–∏–∫–ª–æ–≤ –∞–Ω–∞–ª–∏–∑–∞: {self.bot_instance.stats['cycles']}\n"
                        f"üìä –í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {self.bot_instance.stats['total_signals']}\n"
                        f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram: {self.bot_instance.stats['sent_signals']}\n"
                        f"‚ùå –û—à–∏–±–æ–∫: {self.bot_instance.stats['errors']}\n"
                        f"üéØ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {self.bot_instance.min_confidence*100:.0f}%\n"
                        f"üìä –ü–∞—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {len(self.bot_instance.pairs)}",
                        chat_id
                    )
                else:
                    await self.send_message("‚ùå –ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω", chat_id)
            
            elif command == '/help':
                await self.send_message(
                    "üìö **–ü–û–ú–û–©–¨**\n\n"
                    "**–ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:**\n"
                    "/status - —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞\n"
                    "/stop - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–Ω–∞–ª–∏–∑ —Å–∏–≥–Ω–∞–ª–æ–≤\n"
                    "/restart - –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
                    "/stats - –ø–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n"
                    "**–û –±–æ—Ç–µ:**\n"
                    "‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç 200+ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä\n"
                    "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å 3 –±–∏—Ä–∂\n"
                    "‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –ª—É—á—à–∏–µ —Å–∏–≥–Ω–∞–ª—ã (80%+)\n"
                    "‚Ä¢ –í–∫–ª—é—á–∞–µ—Ç on-chain –∞–Ω–∞–ª–∏–∑\n"
                    "‚Ä¢ –û–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç",
                    chat_id
                )
            
            else:
                await self.send_message("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help", chat_id)
                
        except Exception as e:
            print(f"‚ùå Error handling command: {e}")
            await self.send_message("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã", chat_id)

async def process_and_collect_signals(pairs, timeframes, data_manager, ai_engine, min_confidence=0.8, top_n=5):
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç N –ø–∞—Ä –∏ –≤—ã–¥–∞–µ—Ç —Ç–æ–ª—å–∫–æ top-N –ª—É—á—à–∏—Ö (—Å–∞–º—ã—Ö —Ç–æ—á–Ω—ã—Ö) —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–æ alpha/confidence.
    """
    all_signals = []
    errors = 0

    async def analyze_pair(pair):
        try:
            ohlcv_data = await data_manager.get_multi_timeframe_data(pair, timeframes)
            if not ohlcv_data:
                return None
            
            signal = await ai_engine.process_symbol(pair, ohlcv_data)
            if signal and signal.get('action') in ('BUY', 'SELL'):
                # –ü–∞—Ç—á–∏–Ω–≥ confidence, –∑–∞—â–∏—Ç–∞
                conf = signal.get('confidence', 0)
                if isinstance(conf, str):
                    try:
                        conf = float(conf)
                    except:
                        conf = 0
                while conf > 1.0:
                    conf /= 100.0
                conf = max(0.0, min(conf, 0.95))
                signal['confidence'] = conf
                return signal
            return None
        except Exception as e:
            print(f"Signal error for {pair}: {e}")
            nonlocal errors
            errors += 1
            return None

    # Async-parallel –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –ø–∞—Ä
    tasks = [analyze_pair(pair) for pair in pairs]
    results = await asyncio.gather(*tasks)
    signals_ok = [s for s in results if s is not None]

    # –û—Ç–±–æ—Ä —Ç–æ–ª—å–∫–æ –ª—É—á—à–∏—Ö TOP-N –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ alpha/confidence
    filtered = [s for s in signals_ok if s['confidence'] >= min_confidence]
    filtered = sorted(filtered, key=lambda x: x['confidence'], reverse=True)[:top_n]

    print(f"–í—Å–µ–≥–æ –ø–∞—Ä: {len(pairs)}. –°—Ä–∞–±–æ—Ç–∞–ª–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {len(signals_ok)}. –°—Ä–µ–¥–∏ –ª—É—á—à–∏—Ö (conf>={min_confidence}): {len(filtered)}. –û—à–∏–±–æ–∫: {errors}")
    for sig in filtered:
        print(f"{sig['symbol']} {sig['action']} conf={sig['confidence']:.3f} price={sig['entry_price']}")

    return filtered

def format_signal_for_telegram(signal: Dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è Telegram –≤ —Å—Ç–∏–ª–µ –ø—Ä–∏–º–µ—Ä–∞"""
    symbol = signal['symbol']
    action = signal['action']
    price = signal['entry_price']
    confidence = signal['confidence']
    leverage = signal.get('leverage', 5.0)
    analysis = signal.get('analysis', {})
    mtf_analysis = signal.get('mtf_analysis', {})
    onchain_data = signal.get('onchain_data', {})
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ–∑–∏—Ü–∏–∏
    if action == 'BUY':
        position_type = "–î–õ–ò–ù–ù–£–Æ –ü–û–ó–ò–¶–ò–Æ"
        action_emoji = "üöÄ"
    else:
        position_type = "–ö–û–†–û–¢–ö–£–Æ –ü–û–ó–ò–¶–ò–Æ"
        action_emoji = "üìâ"
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º TP/SL
    if action == 'BUY':
        tp1 = price * 1.025  # +2.5%
        tp2 = price * 1.05   # +5%
        tp3 = price * 1.10   # +10%
        tp4 = price * 1.15   # +15%
        sl = price * 0.95    # -5%
    else:
        tp1 = price * 0.975  # -2.5%
        tp2 = price * 0.95   # -5%
        tp3 = price * 0.90   # -10%
        tp4 = price * 0.85   # -15%
        sl = price * 1.05    # +5%
    
    message = f"üö® **–°–ò–ì–ù–ê–õ –ù–ê {position_type}** {action_emoji}\n\n"
    message += f"**–ü–∞—Ä–∞:** {symbol}\n"
    message += f"**–î–µ–π—Å—Ç–≤–∏–µ:** {action}\n"
    message += f"**–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞:** ${price:.6f}\n"
    message += f"**‚ö° –ü–ª–µ—á–æ:** {leverage:.1f}x\n\n"
    
    # Take Profit —É—Ä–æ–≤–Ω–∏
    message += "**üéØ Take Profit:**\n"
    message += f"TP1: ${tp1:.6f}\n"
    message += f"TP2: ${tp2:.6f}\n"
    message += f"TP3: ${tp3:.6f}\n"
    message += f"TP4: ${tp4:.6f}\n\n"
    
    # Stop Loss
    message += f"**üõë Stop Loss:** ${sl:.6f}\n\n"
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    message += f"**üìä –£—Ä–æ–≤–µ–Ω—å —É—Å–ø–µ—Ö–∞:** {confidence*100:.0f}%\n"
    message += f"**üïí –í—Ä–µ–º—è:** {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
    
    # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    message += "**üîé –ü–æ—á–µ–º—É —Å–∏–≥–Ω–∞–ª –Ω–∞ –¥–ª–∏–Ω–Ω—É—é –ø–æ–∑–∏—Ü–∏—é ‚ùì**\n\n"
    message += "**–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —Å–¥–µ–ª–∫–∏ üëá**\n\n"
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –æ–±—ä—è—Å–Ω–µ–Ω–∏—è
    explanation = explain_signal(signal, analysis, mtf_analysis, onchain_data)
    message += explanation
    
    return message

def explain_signal(signal: Dict, analysis: Dict, mtf_analysis: Dict = None, onchain_data: Dict = None) -> str:
    """–î–µ—Ç–∞–ª—å–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞"""
    explanations = []
    warnings = []
    
    action = signal.get('action', 'BUY')
    
    # RSI –∞–Ω–∞–ª–∏–∑
    rsi = analysis.get('rsi', 50)
    if rsi > 70:
        explanations.append(f"‚Ä¢ RSI —Å–∏–ª—å–Ω—ã–π > 70 ({rsi:.2f}) - –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å")
    elif rsi > 60:
        explanations.append(f"‚Ä¢ RSI —Å–∏–ª—å–Ω—ã–π > 60 ({rsi:.2f})")
    elif rsi < 30:
        explanations.append(f"‚Ä¢ RSI —Å–ª–∞–±—ã–π < 30 ({rsi:.2f}) - –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å")
    elif rsi < 40:
        explanations.append(f"‚Ä¢ RSI —Å–ª–∞–±—ã–π < 40 ({rsi:.2f})")
    
    # MACD –∞–Ω–∞–ª–∏–∑
    macd_data = analysis.get('macd', {})
    hist = macd_data.get('histogram', 0)
    if abs(hist) > 0.005:
        if hist > 0:
            explanations.append(f"‚Ä¢ –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ MACD —Å–∏–ª—å–Ω–∞—è ({hist:.4f})")
        else:
            explanations.append(f"‚Ä¢ –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ MACD –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è ({hist:.4f})")
    elif abs(hist) > 0.003:
        if hist > 0:
            explanations.append("‚Ä¢ –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ MACD —É–º–µ—Ä–µ–Ω–Ω–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è")
        else:
            explanations.append("‚Ä¢ –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ MACD —É–º–µ—Ä–µ–Ω–Ω–æ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è")
    
    # EMA –∞–Ω–∞–ª–∏–∑
    price = analysis.get('price', 0)
    ema_20 = analysis.get('ema_20', 0)
    ema_50 = analysis.get('ema_50', 0)
    if price > ema_20 > ema_50:
        explanations.append("‚Ä¢ –¶–µ–Ω–∞ –≤—ã—à–µ EMA, —Å–∏–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ")
    elif price < ema_20 < ema_50:
        explanations.append("‚Ä¢ –¶–µ–Ω–∞ –Ω–∏–∂–µ EMA, –º–µ–¥–≤–µ–∂–∏–π —Ç—Ä–µ–Ω–¥")
    elif price > ema_20 and ema_20 < ema_50:
        explanations.append("‚Ä¢ –°–º–µ—à–∞–Ω–Ω—ã–π EMA —Ç—Ä–µ–Ω–¥")
    
    # Bollinger Bands –∞–Ω–∞–ª–∏–∑
    bb_upper = analysis.get('bb_upper', 0)
    bb_lower = analysis.get('bb_lower', 0)
    if price > bb_upper:
        explanations.append("‚Ä¢ –¶–µ–Ω–∞ –ø—Ä–æ–±–∏–ª–∞ –ø–æ–ª–æ—Å—É –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞ (–ø—Ä–æ–±–æ–π)")
    elif price < bb_lower:
        explanations.append("‚Ä¢ –¶–µ–Ω–∞ –Ω–∏–∂–µ –Ω–∏–∂–Ω–µ–π –ø–æ–ª–æ—Å—ã –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞")
    elif price > bb_upper * 0.98:
        explanations.append("‚Ä¢ –¶–µ–Ω–∞ –±–ª–∏–∑–∫–æ –∫ –≤–µ—Ä—Ö–Ω–µ–π –ø–æ–ª–æ—Å–µ –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞")
    elif price < bb_lower * 1.02:
        explanations.append("‚Ä¢ –¶–µ–Ω–∞ –±–ª–∏–∑–∫–æ –∫ –Ω–∏–∂–Ω–µ–π –ø–æ–ª–æ—Å–µ –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞")
    
    # MA50 –∞–Ω–∞–ª–∏–∑
    ma_50 = analysis.get('ma_50', 0)
    if price > ma_50:
        explanations.append("‚Ä¢ –§–∏–ª—å—Ç—Ä MA50 –ø–µ—Ä–µ—Å–µ–∫ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—É—é –ª–∏–Ω–∏—é")
    else:
        explanations.append("‚Ä¢ –¶–µ–Ω–∞ –Ω–∏–∂–µ MA50")
    
    # ADX –∞–Ω–∞–ª–∏–∑
    adx = analysis.get('adx', 0)
    if adx >= 30:
        explanations.append(f"‚Ä¢ –°–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞ –æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è (ADX ‚â• 30, {adx:.1f})")
    elif adx >= 25:
        explanations.append(f"‚Ä¢ –°–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞ –≤—ã—Å–æ–∫–∞—è (ADX ‚â• 25, {adx:.1f})")
    elif adx >= 20:
        explanations.append(f"‚Ä¢ –°–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞ —É–º–µ—Ä–µ–Ω–Ω–∞—è (ADX ‚â• 20, {adx:.1f})")
    else:
        explanations.append(f"‚Ä¢ –°–ª–∞–±—ã–π —Ç—Ä–µ–Ω–¥ (ADX < 20, {adx:.1f})")
    
    # Volume –∞–Ω–∞–ª–∏–∑
    volume_ratio = analysis.get('volume_ratio', 1.0)
    if volume_ratio > 2.0:
        explanations.append(f"‚Ä¢ –†–æ—Å—Ç –æ–±—ä—ë–º–∞ –±–æ–ª–µ–µ {(volume_ratio-1)*100:.0f}%!")
    elif volume_ratio > 1.5:
        explanations.append(f"‚Ä¢ –†–æ—Å—Ç –æ–±—ä—ë–º–∞ –±–æ–ª–µ–µ {(volume_ratio-1)*100:.0f}%!")
    elif volume_ratio > 1.2:
        explanations.append(f"‚Ä¢ –£–º–µ—Ä–µ–Ω–Ω—ã–π —Ä–æ—Å—Ç –æ–±—ä—ë–º–∞ {(volume_ratio-1)*100:.0f}%")
    elif volume_ratio < 0.8:
        explanations.append(f"‚Ä¢ –ü–∞–¥–µ–Ω–∏–µ –æ–±—ä—ë–º–∞ {(1-volume_ratio)*100:.0f}%")
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã (—Å–∏–º—É–ª—è—Ü–∏—è)
    if action == 'BUY':
        explanations.append("‚Ä¢ –û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–∞—Ç—Ç–µ—Ä–Ω ¬´–¢—Ä–∏ –±–µ–ª—ã—Ö —Å–æ–ª–¥–∞—Ç–∞¬ª")
        explanations.append("‚Ä¢ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —á–∞—Å–æ–≤–æ–≥–æ —Ç—Ä–µ–Ω–¥–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ")
        explanations.append("‚Ä¢ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ 4-—á–∞—Å–æ–≤–æ–≥–æ —Ç—Ä–µ–Ω–¥–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ")
    else:
        explanations.append("‚Ä¢ –û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–∞—Ç—Ç–µ—Ä–Ω ¬´–¢—Ä–∏ —á–µ—Ä–Ω—ã—Ö –≤–æ—Ä–æ–Ω–∞¬ª")
        explanations.append("‚Ä¢ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —á–∞—Å–æ–≤–æ–≥–æ —Ç—Ä–µ–Ω–¥–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ")
        explanations.append("‚Ä¢ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ 4-—á–∞—Å–æ–≤–æ–≥–æ —Ç—Ä–µ–Ω–¥–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ")
    
    # Multi-Timeframe –∞–Ω–∞–ª–∏–∑ - –ò–°–ü–†–ê–í–õ–ï–ù–û
    if mtf_analysis:
        tf_signals = []
        
        for tf, tf_data in mtf_analysis.items():
            if tf_data.get('price', 0) > 0:
                tf_rsi = tf_data.get('rsi', 50)
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
                tf_direction = 0
                if tf_rsi < 40:  # –ë—ã—á–∏–π —Å–∏–≥–Ω–∞–ª
                    tf_direction = 1
                elif tf_rsi > 60:  # –ú–µ–¥–≤–µ–∂–∏–π —Å–∏–≥–Ω–∞–ª
                    tf_direction = -1
                
                tf_signals.append(tf_direction)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
        if len(tf_signals) >= 2:
            positive_signals = sum(1 for s in tf_signals if s > 0)
            negative_signals = sum(1 for s in tf_signals if s < 0)
            total_signals = len(tf_signals)
            
            if positive_signals >= total_signals * 0.75:
                explanations.append("‚Ä¢ –í—ã—Å–æ–∫–∞—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤")
            elif negative_signals >= total_signals * 0.75:
                explanations.append("‚Ä¢ –í—ã—Å–æ–∫–∞—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤")
            elif positive_signals >= total_signals * 0.5 or negative_signals >= total_signals * 0.5:
                explanations.append("‚Ä¢ –£–º–µ—Ä–µ–Ω–Ω–∞—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤")
            else:
                warnings.append("‚ùóÔ∏è–¢–∞–π–º—Ñ—Ä–µ–π–º—ã –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º—ã")
    
    # On-chain –∞–Ω–∞–ª–∏–∑
    whale_score = onchain_data.get('whale_activity', {}).get('score', 50)
    exchange_sentiment = onchain_data.get('exchange_flows', {}).get('sentiment', 'neutral')
    social_sentiment_score = onchain_data.get('social_sentiment', {}).get('score', 0)
    
    explanations.append(f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–∏—Ç–æ–≤: {onchain_data.get('whale_activity', {}).get('level', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
    explanations.append(f"‚Ä¢ –ü–æ—Ç–æ–∫–∏ –Ω–∞ –±–∏—Ä–∂–∏: {onchain_data.get('exchange_flows', {}).get('description', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
    explanations.append(f"‚Ä¢ –°–æ—Ü–∏–∞–ª—å–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {onchain_data.get('social_sentiment', {}).get('description', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
    
    # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
    # –£—Ä–æ–≤–µ–Ω—å –ø–æ–¥–¥–µ—Ä–∂–∫–∏/—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
    support_distance = abs(price - bb_lower) / price * 100
    resistance_distance = abs(bb_upper - price) / price * 100
    
    if support_distance > 5:
        warnings.append(f"‚ùóÔ∏è–£—Ä–æ–≤–µ–Ω—å –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –¥–∞–ª–µ–∫–æ –æ—Ç —Ü–µ–Ω—ã: ${bb_lower:.4f} ({support_distance:.1f}%)")
    if resistance_distance > 5:
        warnings.append(f"‚ùóÔ∏è–£—Ä–æ–≤–µ–Ω—å —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –¥–∞–ª–µ–∫–æ –æ—Ç —Ü–µ–Ω—ã: ${bb_upper:.4f} ({resistance_distance:.1f}%)")
    
    # Stochastic RSI –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
    if rsi > 80 or rsi < 20:
        warnings.append("‚ùóÔ∏è–°–ª–∞–±–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è Stoch RSI")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    result = "\n".join(explanations)
    
    if warnings:
        result += "\n\n**‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø:**\n" + "\n".join(warnings)
    
    return result

class OnChainAnalyzer:
    """On-chain –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ Dune Analytics –∏ –≤–Ω–µ—à–Ω–∏–µ API"""
    
    def __init__(self):
        self.dune_api_key = EXTERNAL_APIS['dune']['api_key']
        self.crypto_panic_key = EXTERNAL_APIS['crypto_panic']['api_key']
        self.cache = {}
        self.cache_timeout = 300  # 5 –º–∏–Ω—É—Ç
    
    async def get_onchain_metrics(self, symbol: str) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ on-chain –º–µ—Ç—Ä–∏–∫"""
        try:
            cache_key = f"onchain_{symbol}"
            current_time = time.time()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            if cache_key in self.cache:
                cached_data, cache_time = self.cache[cache_key]
                if current_time - cache_time < self.cache_timeout:
                    return cached_data
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            whale_activity = await self._get_whale_activity(symbol)
            exchange_flows = await self._get_exchange_flows(symbol)
            social_sentiment = await self._get_social_sentiment(symbol)
            
            onchain_data = {
                'whale_activity': whale_activity,
                'exchange_flows': exchange_flows,
                'social_sentiment': social_sentiment,
                'timestamp': current_time
            }
            
            # –ö—ç—à–∏—Ä—É–µ–º
            self.cache[cache_key] = (onchain_data, current_time)
            return onchain_data
            
        except Exception as e:
            print(f"‚ùå OnChain analysis error for {symbol}: {e}")
            return {}
    
    async def _get_whale_activity(self, symbol: str) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–∏—Ç–æ–≤"""
        try:
            # –°–∏–º—É–ª—è—Ü–∏—è whale activity (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ Dune Analytics)
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—Ä–æ—Å –∫ Dune API —Å query_id
            
            whale_score = np.random.uniform(0, 100)
            if whale_score > 80:
                activity_level = "very_high"
                description = "–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–∏—Ç–æ–≤"
            elif whale_score > 60:
                activity_level = "high"
                description = "–í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–∏—Ç–æ–≤"
            elif whale_score > 40:
                activity_level = "moderate"
                description = "–£–º–µ—Ä–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–∏—Ç–æ–≤"
            else:
                activity_level = "low"
                description = "–ù–∏–∑–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–∏—Ç–æ–≤"
            
            return {
                'score': whale_score,
                'level': activity_level,
                'description': description,
                'large_transactions': np.random.randint(5, 50),
                'net_flow': np.random.uniform(-1000000, 1000000)
            }
            
        except Exception as e:
            print(f"‚ùå Whale activity error: {e}")
            return {'score': 50, 'level': 'unknown', 'description': '–î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã'}
    
    async def _get_exchange_flows(self, symbol: str) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ –ø–æ—Ç–æ–∫–æ–≤ –Ω–∞ –±–∏—Ä–∂–∏"""
        try:
            # –°–∏–º—É–ª—è—Ü–∏—è exchange flows
            inflow = np.random.uniform(0, 10000000)
            outflow = np.random.uniform(0, 10000000)
            net_flow = outflow - inflow
            
            if net_flow > 1000000:
                flow_sentiment = "bullish"
                description = "–ë–æ–ª—å—à–æ–π –æ—Ç—Ç–æ–∫ —Å –±–∏—Ä–∂ (–±—ã—á–∏–π —Å–∏–≥–Ω–∞–ª)"
            elif net_flow < -1000000:
                flow_sentiment = "bearish"
                description = "–ë–æ–ª—å—à–æ–π –ø—Ä–∏—Ç–æ–∫ –Ω–∞ –±–∏—Ä–∂–∏ (–º–µ–¥–≤–µ–∂–∏–π —Å–∏–≥–Ω–∞–ª)"
            else:
                flow_sentiment = "neutral"
                description = "–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ –ø–æ—Ç–æ–∫–∏"
            
            return {
                'inflow': inflow,
                'outflow': outflow,
                'net_flow': net_flow,
                'sentiment': flow_sentiment,
                'description': description
            }
            
        except Exception as e:
            print(f"‚ùå Exchange flows error: {e}")
            return {'sentiment': 'neutral', 'description': '–î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã'}
    
    async def _get_social_sentiment(self, symbol: str) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è —á–µ—Ä–µ–∑ CryptoPanic"""
        try:
            # –†–µ–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ CryptoPanic API
            url = f"{EXTERNAL_APIS['crypto_panic']['base_url']}/posts/"
            params = {
                'auth_token': self.crypto_panic_key,
                'currencies': symbol.replace('/USDT', ''),
                'kind': 'news',
                'filter': 'rising'
            }
            
            async with aiohttp.ClientSession() as session:
                async with session.get(url, params=params, timeout=10) as response:
                    if response.status == 200:
                        data = await response.json()
                        
                        if data.get('results'):
                            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤–æ—Å—Ç–∏
                            positive_count = 0
                            negative_count = 0
                            total_count = len(data['results'])
                            
                            for post in data['results'][:10]:  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 10 –Ω–æ–≤–æ—Å—Ç–µ–π
                                votes = post.get('votes', {})
                                if votes.get('positive', 0) > votes.get('negative', 0):
                                    positive_count += 1
                                elif votes.get('negative', 0) > votes.get('positive', 0):
                                    negative_count += 1
                            
                            if total_count > 0:
                                sentiment_score = (positive_count - negative_count) / total_count * 100
                            else:
                                sentiment_score = 0
                            
                            if sentiment_score > 20:
                                sentiment = "bullish"
                                description = "–ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –ø—Ä–µ–æ–±–ª–∞–¥–∞—é—Ç"
                            elif sentiment_score < -20:
                                sentiment = "bearish"
                                description = "–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –ø—Ä–µ–æ–±–ª–∞–¥–∞—é—Ç"
                            else:
                                sentiment = "neutral"
                                description = "–°–º–µ—à–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏"
                            
                            return {
                                'score': sentiment_score,
                                'sentiment': sentiment,
                                'description': description,
                                'news_count': total_count,
                                'positive_news': positive_count,
                                'negative_news': negative_count
                            }
            
            # Fallback –µ—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
            return {
                'score': 0,
                'sentiment': 'neutral',
                'description': '–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏',
                'news_count': 0
            }
            
        except Exception as e:
            print(f"‚ùå Social sentiment error: {e}")
            return {'sentiment': 'neutral', 'description': '–î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã'}

class AlphaSignalBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç —Å —Å–∏—Å—Ç–µ–º–æ–π Best Alpha Only"""
    
    def __init__(self):
        self.data_manager = UniversalDataManager()
        self.ai_engine = RealTimeAIEngine()
        self.onchain_analyzer = OnChainAnalyzer()
        self.telegram_bot = TelegramBot()
        self.running = False
        self.start_time = time.time()  # –î–æ–±–∞–≤–ª—è–µ–º –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        self.pairs = TRADING_PAIRS
        self.timeframes = ['5m', '15m', '1h', '4h']  # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã
        self.min_confidence = 0.8  # –°—Ç—Ä–æ–≥–∏–π –ø–æ—Ä–æ–≥ –¥–ª—è Best Alpha Only
        self.top_n = 5
        self.update_frequency = 300  # 5 –º–∏–Ω—É—Ç
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'cycles': 0,
            'total_signals': 0,
            'sent_signals': 0,
            'errors': 0
        }
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        self.running = True
        self.start_time = time.time()
        
        print("üöÄ CryptoAlphaPro Best Alpha Only Bot v4.0")
        print("=" * 60)
        print(f"üìä –ü–∞—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {len(self.pairs)}")
        print(f"‚è±Ô∏è –¢–∞–π–º—Ñ—Ä–µ–π–º—ã: {self.timeframes}")
        print(f"üéØ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {self.min_confidence*100:.0f}%")
        print(f"üéØ –¢–æ–ø —Å–∏–≥–Ω–∞–ª–æ–≤: {self.top_n}")
        print(f"‚è∞ –ß–∞—Å—Ç–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {self.update_frequency} —Å–µ–∫")
        print("=" * 60)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ
        await self.telegram_bot.send_message(
            "üöÄ **CRYPTOALPHAPRO BEST ALPHA ONLY BOT v4.0 STARTED**\n\n"
            f"üìä –ü–∞—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {len(self.pairs)}\n"
            f"‚è±Ô∏è –¢–∞–π–º—Ñ—Ä–µ–π–º—ã: {', '.join(self.timeframes)}\n"
            f"üéØ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {self.min_confidence*100:.0f}%\n"
            f"üéØ –¢–æ–ø —Å–∏–≥–Ω–∞–ª–æ–≤: {self.top_n}\n"
            f"‚è∞ –ß–∞—Å—Ç–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {self.update_frequency} —Å–µ–∫\n\n"
            "üéØ –°–∏—Å—Ç–µ–º–∞ 'Best Alpha Only' - —Ç–æ–ª—å–∫–æ –ª—É—á—à–∏–µ —Å–∏–≥–Ω–∞–ª—ã!\n\n"
            "üí¨ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: /help –¥–ª—è –∫–æ–º–∞–Ω–¥"
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∏ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        await asyncio.gather(
            self.batch_top_signals_loop(),
            self.telegram_bot.start_webhook_listener()
        )
    
    async def batch_top_signals_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ—Ç–±–æ—Ä–∞ –ª—É—á—à–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
        while self.running:
            try:
                self.stats['cycles'] += 1
                print(f"\nüìä Cycle #{self.stats['cycles']}: Analyzing {len(self.pairs)} pairs...")
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø —Å–∏–≥–Ω–∞–ª—ã
                top_signals = await process_and_collect_signals(
                    self.pairs,
                    self.timeframes,
                    self.data_manager,
                    self.ai_engine,
                    min_confidence=self.min_confidence,
                    top_n=self.top_n
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª—ã –≤ Telegram
                for signal in top_signals:
                    message = format_signal_for_telegram(signal)
                    if await self.telegram_bot.send_message(message):
                        print(f"üì§ Signal for {signal['symbol']} sent to Telegram")
                        self.stats['sent_signals'] += 1
                    else:
                        print(f"‚ùå Failed to send signal for {signal['symbol']}")
                
                self.stats['total_signals'] += len(top_signals)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 10 —Ü–∏–∫–ª–æ–≤
                if self.stats['cycles'] % 10 == 0:
                    uptime = time.time() - self.start_time
                    uptime_str = f"{uptime/3600:.1f}h" if uptime > 3600 else f"{uptime/60:.1f}m"
                    
                    status_message = (
                        f"üìä **BOT STATUS** (Cycle #{self.stats['cycles']})\n\n"
                        f"‚è∞ Uptime: {uptime_str}\n"
                        f"üìà Total signals: {self.stats['total_signals']}\n"
                        f"üì§ Sent signals: {self.stats['sent_signals']}\n"
                        f"‚ùå Errors: {self.stats['errors']}\n"
                        f"üéØ Success rate: {(self.stats['sent_signals']/max(1,self.stats['total_signals'])*100):.1f}%\n"
                        f"ü§ñ Status: üü¢ ACTIVE"
                    )
                    await self.telegram_bot.send_message(status_message)
                
                # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞
                await asyncio.sleep(self.update_frequency)
                
            except Exception as e:
                print(f"‚ùå Error in cycle: {e}")
                self.stats['errors'] += 1
                await asyncio.sleep(60)
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        self.running = False
        print("üõë Bot stopped")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    bot = AlphaSignalBot()
    bot.telegram_bot.set_bot_instance(bot)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –±–æ—Ç–∞ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç
    
    try:
        await bot.start()
    except KeyboardInterrupt:
        print("\nüõë Stopping bot...")
    finally:
        bot.stop()

if __name__ == "__main__":
    asyncio.run(main()) 