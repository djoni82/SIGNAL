#!/usr/bin/env python3
"""
Setup Telegram - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram –±–æ—Ç–∞
"""

import os
import sys

def setup_telegram():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram –±–æ—Ç–∞"""
    print("ü§ñ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram –¥–ª—è CryptoAlphaPro Bot")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    try:
        from config import TELEGRAM_CONFIG
        current_token = TELEGRAM_CONFIG['bot_token']
        current_chat_id = TELEGRAM_CONFIG['chat_id']
        
        print(f"üì± –¢–µ–∫—É—â–∏–π —Ç–æ–∫–µ–Ω: {current_token}")
        print(f"üí¨ –¢–µ–∫—É—â–∏–π chat_id: {current_chat_id}")
        print()
        
    except ImportError:
        print("‚ùå –§–∞–π–ª config.py –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    print("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram:")
    print()
    
    # –¢–æ–∫–µ–Ω –±–æ—Ç–∞
    new_token = input("üîë –í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ (–∏–ª–∏ Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞): ").strip()
    if new_token:
        TELEGRAM_CONFIG['bot_token'] = new_token
        print("‚úÖ –¢–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω")
    
    # Chat ID
    new_chat_id = input("üí¨ –í–≤–µ–¥–∏—Ç–µ chat_id (–∏–ª–∏ Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞): ").strip()
    if new_chat_id:
        TELEGRAM_CONFIG['chat_id'] = new_chat_id
        print("‚úÖ Chat ID –æ–±–Ω–æ–≤–ª–µ–Ω")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º config.py
    try:
        update_config_file()
        print("‚úÖ –§–∞–π–ª config.py –æ–±–Ω–æ–≤–ª–µ–Ω")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è config.py: {e}")
        return False

def update_config_file():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ñ–∞–π–ª config.py —Å –Ω–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
    from config import TELEGRAM_CONFIG, TRADING_CONFIG, ANALYSIS_CONFIG
    
    config_content = f'''#!/usr/bin/env python3
"""
Configuration - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è CryptoAlphaPro Bot
"""

# Telegram –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
TELEGRAM_CONFIG = {{
    'bot_token': '{TELEGRAM_CONFIG['bot_token']}',
    'chat_id': '{TELEGRAM_CONFIG['chat_id']}',
    'enable_telegram': {TELEGRAM_CONFIG['enable_telegram']},
    'send_signals': {TELEGRAM_CONFIG['send_signals']},
    'send_status': {TELEGRAM_CONFIG['send_status']},
    'send_errors': {TELEGRAM_CONFIG['send_errors']},
}}

# –¢–æ—Ä–≥–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
TRADING_CONFIG = {{
    'pairs': {TRADING_CONFIG['pairs']},
    'timeframes': {TRADING_CONFIG['timeframes']},
    'update_frequency': {TRADING_CONFIG['update_frequency']},
    'min_confidence': {TRADING_CONFIG['min_confidence']},
    'top_signals': {TRADING_CONFIG['top_signals']}
}}

# –ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
ANALYSIS_CONFIG = {{
    'min_confidence': {ANALYSIS_CONFIG['min_confidence']},
    'min_risk_reward': {ANALYSIS_CONFIG['min_risk_reward']},
    'max_signals_per_cycle': {ANALYSIS_CONFIG['max_signals_per_cycle']}
}}
'''
    
    with open('config.py', 'w', encoding='utf-8') as f:
        f.write(config_content)

def test_telegram_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram...")
    
    try:
        from telegram_integration import TelegramIntegration
        import asyncio
        
        async def test():
            telegram = TelegramIntegration()
            if telegram.bot_token == 'YOUR_TELEGRAM_BOT_TOKEN':
                print("‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
                return False
            
            if telegram.chat_id == 'YOUR_CHAT_ID':
                print("‚ùå Chat ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
                return False
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
            test_message = "üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç CryptoAlphaPro Bot"
            success = await telegram.send_message(test_message)
            
            if success:
                print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram —É—Å–ø–µ—à–Ω–æ!")
                return True
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram")
                return False
        
        return asyncio.run(test())
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False

def get_telegram_help():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ Telegram"""
    print("\nüìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ Telegram:")
    print("=" * 40)
    print("1. –°–æ–∑–¥–∞–π—Ç–µ –±–æ—Ç–∞ –≤ Telegram:")
    print("   ‚Ä¢ –ù–∞–π–¥–∏—Ç–µ @BotFather –≤ Telegram")
    print("   ‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /newbot")
    print("   ‚Ä¢ –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º")
    print("   ‚Ä¢ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω")
    print()
    print("2. –ü–æ–ª—É—á–∏—Ç–µ –≤–∞—à Chat ID:")
    print("   ‚Ä¢ –ù–∞–π–¥–∏—Ç–µ @userinfobot –≤ Telegram")
    print("   ‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
    print("   ‚Ä¢ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤–∞—à ID")
    print()
    print("3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –±–æ—Ç–∞:")
    print("   ‚Ä¢ –ó–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç: python setup_telegram.py")
    print("   ‚Ä¢ –í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –∏ chat_id")
    print()
    print("4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ:")
    print("   ‚Ä¢ –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python test_telegram.py")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ CryptoAlphaPro Bot - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram")
    print("=" * 50)
    
    while True:
        print("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
        print("1. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å Telegram")
        print("2. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")
        print("3. –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É")
        print("4. –í—ã—Ö–æ–¥")
        
        choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-4): ").strip()
        
        if choice == '1':
            setup_telegram()
        elif choice == '2':
            test_telegram_connection()
        elif choice == '3':
            get_telegram_help()
        elif choice == '4':
            print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")

if __name__ == "__main__":
    main() 