#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Å–∫–∞–ª—å–ø–∏–Ω–≥ –º–æ–¥—É–ª—è
"""

import asyncio
from scalping_engine import ScalpingSignalEngine
from alpha_signal_bot_main import UniversalDataManager

async def test_scalping():
    print("‚ö° –¢–ï–°–¢ –°–ö–ê–õ–¨–ü–ò–ù–ì –ú–û–î–£–õ–Ø")
    print("=" * 50)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–≤–∏–∂–∫–∏
    data_manager = UniversalDataManager()
    scalping_engine = ScalpingSignalEngine(min_confidence=0.70, min_filters=3)  # –û—á–µ–Ω—å –Ω–∏–∑–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∞
    
    test_pairs = ['BTC/USDT', 'ETH/USDT', 'BNB/USDT']
    
    for symbol in test_pairs:
        print(f"\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º {symbol}...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
            ohlcv_data = await data_manager.get_multi_timeframe_data(
                symbol, ['1m', '5m', '15m']
            )
            
            if ohlcv_data:
                print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è {len(ohlcv_data)} —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤")
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
                main_tf = ohlcv_data.get('5m') or ohlcv_data.get('1m')
                if main_tf and main_tf.get('current'):
                    current_price = main_tf['current']['close']
                    print(f"üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${current_price:.6f}")
                    
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∫–∞–ª—å–ø–∏–Ω–≥ —Å–∏–≥–Ω–∞–ª
                    scalp_signal = await scalping_engine.analyze_scalping_signal(
                        symbol, ohlcv_data, current_price
                    )
                    
                    if scalp_signal:
                        print(f"üéâ –°–ö–ê–õ–¨–ü–ò–ù–ì –°–ò–ì–ù–ê–õ –ù–ê–ô–î–ï–ù!")
                        print(f"   –î–µ–π—Å—Ç–≤–∏–µ: {scalp_signal['action']}")
                        print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {scalp_signal['confidence']*100:.1f}%")
                        print(f"   –ü–ª–µ—á–æ: {scalp_signal['leverage']:.0f}x")
                        print(f"   –§–∏–ª—å—Ç—Ä–æ–≤: {scalp_signal['filters_passed']}/{scalp_signal['total_filters']}")
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —Ñ–∏–ª—å—Ç—Ä–∞
                        details = scalp_signal.get('filter_details', [])[:3]
                        for detail in details:
                            print(f"   ‚Ä¢ {detail}")
                    else:
                        print("‚ùå –°–∫–∞–ª—å–ø–∏–Ω–≥ —Å–∏–≥–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
                else:
                    print("‚ùå –ù–µ—Ç —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã")
            else:
                print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    print("\n" + "=" * 50)

if __name__ == "__main__":
    asyncio.run(test_scalping()) 