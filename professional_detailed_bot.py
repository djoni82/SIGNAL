#!/usr/bin/env python3
"""
üöÄ PROFESSIONAL DETAILED CRYPTO SIGNAL BOT v6.0
–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ
"""

import asyncio
import threading
import time
import logging
from datetime import datetime
from typing import Dict, List, Optional, Any
import numpy as np

from data_manager import RealDataCollector
from enhanced_technical_analyzer import ProfessionalTechnicalAnalyzer
from config import TELEGRAM_CONFIG, TRADING_CONFIG, ANALYSIS_CONFIG

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("DetailedSignalBot")

class DetailedSignalGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–µ—Ç–∞–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
    
    def __init__(self):
        self.data_collector = RealDataCollector()
        self.technical_analyzer = ProfessionalTechnicalAnalyzer()
        
    async def analyze_and_generate_signal(self, symbol: str) -> Optional[Dict]:
        """–ê–Ω–∞–ª–∏–∑ —Å–∏–º–≤–æ–ª–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            timeframes = ['5m', '15m', '1h', '4h']
            analysis_data = {}
            
            for tf in timeframes:
                df = await self.data_collector.get_real_ohlcv(symbol, tf, limit=150)
                if df is not None and len(df) >= 50:
                    analysis_data[tf] = df
            
            if not analysis_data:
                return None
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º 15m –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–π–º—Ñ—Ä–µ–π–º
            main_df = analysis_data.get('15m') or analysis_data.get('1h') or list(analysis_data.values())[0]
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
            indicators = self.technical_analyzer.calculate_all_indicators(main_df)
            
            if not indicators:
                return None
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞
            action = self._determine_signal_direction(indicators)
            
            if action == 'NEUTRAL':
                return None
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª
            signal = self._generate_detailed_signal(main_df, symbol, action, indicators, analysis_data)
            
            return signal
            
        except Exception as e:
            logger.error(f"‚ùå Error analyzing {symbol}: {e}")
            return None
    
    def _determine_signal_direction(self, indicators: Dict) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"""
        try:
            bullish_signals = 0
            bearish_signals = 0
            
            # RSI —Å–∏–≥–Ω–∞–ª
            rsi_signal = indicators.get('rsi', {}).get('signal', 'NEUTRAL')
            if 'BUY' in rsi_signal:
                bullish_signals += 2 if 'STRONG' in rsi_signal else 1
            elif 'SELL' in rsi_signal:
                bearish_signals += 2 if 'STRONG' in rsi_signal else 1
            
            # MACD —Å–∏–≥–Ω–∞–ª
            macd_signal = indicators.get('macd', {}).get('signal', 'NEUTRAL')
            macd_strength = indicators.get('macd', {}).get('strength', '—Å–ª–∞–±–∞—è')
            if macd_signal == 'BUY' and macd_strength in ['—Å–∏–ª—å–Ω–∞—è', '—É–º–µ—Ä–µ–Ω–Ω–∞—è']:
                bullish_signals += 2
            elif macd_signal == 'SELL' and macd_strength in ['—Å–∏–ª—å–Ω–∞—è', '—É–º–µ—Ä–µ–Ω–Ω–∞—è']:
                bearish_signals += 2
            
            # EMA —Å–∏–≥–Ω–∞–ª
            ema_signal = indicators.get('ema', {}).get('signal', 'NEUTRAL')
            if 'BUY' in ema_signal:
                bullish_signals += 2 if 'STRONG' in ema_signal else 1
            elif 'SELL' in ema_signal:
                bearish_signals += 2 if 'STRONG' in ema_signal else 1
            
            # Bollinger Bands –ø—Ä–æ–±–æ–π
            bb_signal = indicators.get('bollinger', {}).get('signal', 'NEUTRAL')
            if bb_signal == 'BREAKOUT_UP':
                bullish_signals += 2
            elif bb_signal == 'BREAKOUT_DOWN':
                bearish_signals += 2
            
            # SuperTrend
            supertrend_signal = indicators.get('supertrend', {}).get('signal', 'NEUTRAL')
            if supertrend_signal == 'BUY':
                bullish_signals += 1
            elif supertrend_signal == 'SELL':
                bearish_signals += 1
            
            # ADX —Å–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞
            adx_strength = indicators.get('adx', {}).get('strength', '—Å–ª–∞–±–∞—è')
            if adx_strength in ['–≤—ã—Å–æ–∫–∞—è', '–æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è']:
                # –£—Å–∏–ª–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–∏–≥–Ω–∞–ª
                if bullish_signals > bearish_signals:
                    bullish_signals += 1
                elif bearish_signals > bullish_signals:
                    bearish_signals += 1
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª
            if bullish_signals >= bearish_signals + 2:
                return 'BUY'
            elif bearish_signals >= bullish_signals + 2:
                return 'SELL'
            else:
                return 'NEUTRAL'
                
        except Exception as e:
            logger.error(f"‚ùå Error determining signal direction: {e}")
            return 'NEUTRAL'
    
    def _generate_detailed_signal(self, df, symbol: str, action: str, indicators: Dict, timeframe_data: Dict) -> Dict:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ"""
        try:
            current_price = df['close'].iloc[-1]
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º TP/SL –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ
            if action == 'BUY':
                tp1 = current_price * 1.025   # +2.5%
                tp2 = current_price * 1.05    # +5%
                tp3 = current_price * 1.10    # +10%
                tp4 = current_price * 1.135   # +13.5%
                sl = current_price * 0.95     # -5%
            else:
                tp1 = current_price * 0.975   # -2.5%
                tp2 = current_price * 0.95    # -5%
                tp3 = current_price * 0.90    # -10%
                tp4 = current_price * 0.865   # -13.5%
                sl = current_price * 1.05     # +5%
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
            confidence = self._calculate_confidence(indicators)
            
            # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –ø–ª–µ—á–æ (1x-50x)
            leverage = min(50, max(1, int(confidence * 60)))
            
            # –°–æ–±–∏—Ä–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è
            explanations = self._generate_explanations(indicators, action)
            warnings = self._generate_warnings(indicators, timeframe_data)
            
            return {
                'symbol': symbol,
                'action': action,
                'entry_price': current_price,
                'tp1': tp1,
                'tp2': tp2,
                'tp3': tp3,
                'tp4': tp4,
                'stop_loss': sl,
                'leverage': leverage,
                'confidence': confidence,
                'explanations': explanations,
                'warnings': warnings,
                'timestamp': datetime.now().strftime('%d.%m.%Y %H:%M'),
                'indicators': indicators
            }
            
        except Exception as e:
            logger.error(f"‚ùå Error generating detailed signal: {e}")
            return None
    
    def _calculate_confidence(self, indicators: Dict) -> float:
        """–†–∞—Å—á–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ —Å–∏–≥–Ω–∞–ª–∞"""
        try:
            confidence_factors = []
            
            # RSI —Ñ–∞–∫—Ç–æ—Ä
            rsi_signal = indicators.get('rsi', {}).get('signal', 'NEUTRAL')
            if 'STRONG' in rsi_signal:
                confidence_factors.append(0.25)
            elif 'BUY' in rsi_signal or 'SELL' in rsi_signal:
                confidence_factors.append(0.15)
            
            # MACD —Ñ–∞–∫—Ç–æ—Ä
            macd_strength = indicators.get('macd', {}).get('strength', '—Å–ª–∞–±–∞—è')
            if macd_strength == '—Å–∏–ª—å–Ω–∞—è':
                confidence_factors.append(0.2)
            elif macd_strength == '—É–º–µ—Ä–µ–Ω–Ω–∞—è':
                confidence_factors.append(0.1)
            
            # EMA —Ñ–∞–∫—Ç–æ—Ä
            ema_signal = indicators.get('ema', {}).get('signal', 'NEUTRAL')
            if 'STRONG' in ema_signal:
                confidence_factors.append(0.2)
            elif 'BUY' in ema_signal or 'SELL' in ema_signal:
                confidence_factors.append(0.1)
            
            # ADX —Ñ–∞–∫—Ç–æ—Ä
            adx_strength = indicators.get('adx', {}).get('strength', '—Å–ª–∞–±–∞—è')
            if adx_strength in ['–≤—ã—Å–æ–∫–∞—è', '–æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è']:
                confidence_factors.append(0.15)
            elif adx_strength == '—É–º–µ—Ä–µ–Ω–Ω–∞—è':
                confidence_factors.append(0.1)
            
            # Volume —Ñ–∞–∫—Ç–æ—Ä
            volume_spike = indicators.get('volume_analysis', {}).get('spike_level', '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
            if volume_spike in ['–æ—á–µ–Ω—å —Å–∏–ª—å–Ω—ã–π', '—Å–∏–ª—å–Ω—ã–π']:
                confidence_factors.append(0.1)
            elif volume_spike == '—É–º–µ—Ä–µ–Ω–Ω—ã–π':
                confidence_factors.append(0.05)
            
            # Bollinger Bands —Ñ–∞–∫—Ç–æ—Ä
            bb_signal = indicators.get('bollinger', {}).get('signal', 'NEUTRAL')
            if 'BREAKOUT' in bb_signal:
                confidence_factors.append(0.1)
            
            # Support/Resistance —Ñ–∞–∫—Ç–æ—Ä
            breakout = indicators.get('support_resistance', {}).get('breakout', '')
            if '–ø—Ä–æ–±–∏—Ç' in breakout:
                confidence_factors.append(0.05)
            
            total_confidence = min(sum(confidence_factors) + 0.5, 0.95)
            return total_confidence
            
        except Exception as e:
            logger.error(f"‚ùå Error calculating confidence: {e}")
            return 0.5
    
    def _generate_explanations(self, indicators: Dict, action: str) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—ä—è—Å–Ω–µ–Ω–∏–π –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ"""
        explanations = []
        
        try:
            # RSI –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ
            rsi_desc = indicators.get('rsi', {}).get('description', '')
            if rsi_desc:
                explanations.append(f"‚Ä¢ {rsi_desc}.")
            
            # MACD –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ
            macd_desc = indicators.get('macd', {}).get('description', '')
            if macd_desc:
                explanations.append(f"‚Ä¢ {macd_desc}.")
            
            # EMA –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ
            ema_desc = indicators.get('ema', {}).get('description', '')
            if ema_desc:
                explanations.append(f"‚Ä¢ {ema_desc}.")
            
            # Support/Resistance –ø—Ä–æ–±–æ–π
            breakout = indicators.get('support_resistance', {}).get('breakout', '')
            if '–ø—Ä–æ–±–∏—Ç' in breakout:
                explanations.append(f"‚Ä¢ {breakout}.")
            
            # –ú—É–ª—å—Ç–∏—Ç–∞–π–º—Ñ—Ä–µ–π–º –∞–Ω–∞–ª–∏–∑
            explanations.append("‚Ä¢ –ü—Ä–æ–±–∏—Ç—ã–π –Ω–∞ 15-–º–∏–Ω—É—Ç–Ω–æ–º –≥—Ä–∞—Ñ–∏–∫–µ —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –±—ã–ª –ø–æ–≤—Ç–æ—Ä–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω –Ω–∞ 5-–º–∏–Ω—É—Ç–Ω–æ–º –≥—Ä–∞—Ñ–∏–∫–µ –∏ –≤—ã—Å—Ç—É–ø–∏–ª –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏.")
            
            # Bollinger Bands
            bb_desc = indicators.get('bollinger', {}).get('description', '')
            if bb_desc and '–ø—Ä–æ–±–∏–ª–∞' in bb_desc:
                explanations.append(f"‚Ä¢ {bb_desc}.")
            
            # MA50 –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ
            ma50_cross = indicators.get('ema', {}).get('ma50_cross', '')
            if ma50_cross:
                explanations.append(f"‚Ä¢ {ma50_cross}.")
            
            # ADX —Å–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞
            adx_desc = indicators.get('adx', {}).get('description', '')
            if adx_desc:
                explanations.append(f"‚Ä¢ {adx_desc}.")
            
            # Volume –∞–Ω–∞–ª–∏–∑
            volume_desc = indicators.get('volume_analysis', {}).get('description', '')
            if volume_desc and '–†–æ—Å—Ç –æ–±—ä—ë–º–∞' in volume_desc:
                explanations.append(f"‚Ä¢ {volume_desc}")
            
            # Candlestick –ø–∞—Ç—Ç–µ—Ä–Ω—ã
            patterns = indicators.get('patterns', {}).get('patterns', [])
            for pattern in patterns:
                if '–û–±–Ω–∞—Ä—É–∂–µ–Ω' in pattern:
                    explanations.append(f"‚Ä¢ {pattern}.")
            
            # MTF –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            mtf_desc = indicators.get('mtf_consensus', {}).get('description', '')
            if '–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ' in mtf_desc or '–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ' in mtf_desc:
                explanations.append(f"‚Ä¢ {mtf_desc}.")
            
            return explanations
            
        except Exception as e:
            logger.error(f"‚ùå Error generating explanations: {e}")
            return ["‚Ä¢ –ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"]
    
    def _generate_warnings(self, indicators: Dict, timeframe_data: Dict) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ"""
        warnings = []
        
        try:
            # Support/Resistance –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
            sr_warnings = indicators.get('support_resistance', {}).get('warnings', [])
            warnings.extend([f"‚ùóÔ∏è{w}" for w in sr_warnings])
            
            # –¢–∞–π–º—Ñ—Ä–µ–π–º –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
            if len(timeframe_data) >= 2:
                warnings.append("‚ùóÔ∏è–¢–∞–π–º—Ñ—Ä–µ–π–º—ã –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º—ã (5‚Äì15 –º–∏–Ω—É—Ç).")
            
            # Stochastic RSI –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
            stoch_desc = indicators.get('stochastic', {}).get('description', '')
            if '–°–ª–∞–±–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ' in stoch_desc:
                warnings.append(f"‚ùóÔ∏è{stoch_desc}.")
            
            # SuperTrend –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
            supertrend_desc = indicators.get('supertrend', {}).get('description', '')
            if '–º–µ–¥–≤–µ–∂–∏–π' in supertrend_desc:
                warnings.append(f"{supertrend_desc}")
            
            # MTF Consensus –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
            mtf_consensus = indicators.get('mtf_consensus', {}).get('consensus', '')
            if 'sell' in mtf_consensus:
                warnings.append(f"MTF Consensus == \"{mtf_consensus}\"")
            
            # VWAP –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
            vwap_desc = indicators.get('vwap', {}).get('description', '')
            if 'Price < VWAP' in vwap_desc:
                warnings.append(vwap_desc)
            
            # Volume –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
            volume_desc = indicators.get('volume_analysis', {}).get('description', '')
            if '–ù–µ—Ç Volume Spike' in volume_desc:
                warnings.append(volume_desc)
            
            # Donchian –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
            donchian_desc = indicators.get('donchian', {}).get('description', '')
            if 'Price < Donchian Mid' in donchian_desc:
                warnings.append(donchian_desc)
            
            return warnings
            
        except Exception as e:
            logger.error(f"‚ùå Error generating warnings: {e}")
            return []

class DetailedTelegramBot:
    """Telegram –±–æ—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
    
    def __init__(self):
        self.bot_token = TELEGRAM_CONFIG['bot_token']
        self.chat_id = TELEGRAM_CONFIG['chat_id']
        self.admin_chat_id = TELEGRAM_CONFIG.get('admin_chat_id', self.chat_id)
        
    async def send_detailed_signal(self, signal: Dict) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ"""
        try:
            message = self._format_detailed_signal(signal)
            return await self._send_message(message)
        except Exception as e:
            logger.error(f"‚ùå Error sending signal: {e}")
            return False
    
    def _format_detailed_signal(self, signal: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ"""
        try:
            symbol = signal['symbol']
            action = signal['action']
            entry_price = signal['entry_price']
            tp1 = signal['tp1']
            tp2 = signal['tp2']
            tp3 = signal['tp3']
            tp4 = signal['tp4']
            stop_loss = signal['stop_loss']
            leverage = signal['leverage']
            confidence = signal['confidence']
            timestamp = signal['timestamp']
            explanations = signal['explanations']
            warnings = signal['warnings']
            
            position_type = "–î–õ–ò–ù–ù–£–Æ –ü–û–ó–ò–¶–ò–Æ" if action == 'BUY' else "–ö–û–†–û–¢–ö–£–Æ –ü–û–ó–ò–¶–ò–Æ"
            emoji = "üöÄ" if action == 'BUY' else "üìâ"
            
            # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            message = f"–°–ò–ì–ù–ê–õ –ù–ê {position_type} –ø–æ {symbol} {emoji}\n\n"
            message += f"üí∞ –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: ${entry_price:.6f}\n\n"
            
            # Take Profit —É—Ä–æ–≤–Ω–∏
            message += f"üéØ TP1: ${tp1:.6f}\n"
            message += f"üéØ TP2: ${tp2:.6f}\n"
            message += f"üéØ TP3: ${tp3:.6f}\n"
            message += f"üéØ TP4: ${tp4:.6f}\n\n"
            
            # Stop Loss
            message += f"üõë –°—Ç–æ–ø-–ª–æ—Å—Å: ${stop_loss:.6f}\n"
            
            # –ü–ª–µ—á–æ –∏ —É—Ä–æ–≤–µ–Ω—å —É—Å–ø–µ—Ö–∞
            message += f"–ü–ª–µ—á–æ ; {leverage} –•\n"
            message += f"üìä –£—Ä–æ–≤–µ–Ω—å —É—Å–ø–µ—Ö–∞: {confidence*100:.0f}%\n"
            message += f"üïí –í—Ä–µ–º—è: {timestamp}\n\n"
            
            # –û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞
            message += f"üîé –ü–æ—á–µ–º—É —Å–∏–≥–Ω–∞–ª –Ω–∞ {'–¥–ª–∏–Ω–Ω—É—é' if action == 'BUY' else '–∫–æ—Ä–æ—Ç–∫—É—é'} –ø–æ–∑–∏—Ü–∏—é ‚ùì\n\n"
            message += "–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —Å–¥–µ–ª–∫–∏ üëá\n\n"
            
            # –î–µ—Ç–∞–ª—å–Ω—ã–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è
            for explanation in explanations:
                message += f"{explanation}\n"
            
            # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
            if warnings:
                for warning in warnings:
                    message += f"{warning}\n"
            
            return message
            
        except Exception as e:
            logger.error(f"‚ùå Error formatting signal: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è {signal.get('symbol', 'UNKNOWN')}"
    
    async def _send_message(self, message: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
        try:
            import aiohttp
            
            url = f"https://api.telegram.org/bot{self.bot_token}/sendMessage"
            data = {
                'chat_id': self.chat_id,
                'text': message,
                'disable_web_page_preview': True
            }
            
            async with aiohttp.ClientSession() as session:
                async with session.post(url, json=data, timeout=10) as response:
                    if response.status == 200:
                        result = await response.json()
                        return result.get('ok', False)
            
            return False
            
        except Exception as e:
            logger.error(f"‚ùå Telegram send error: {e}")
            return False

class ProfessionalDetailedBot:
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞"""
    
    def __init__(self):
        self.signal_generator = DetailedSignalGenerator()
        self.telegram_bot = DetailedTelegramBot()
        self.running = False
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        self.pairs = TRADING_CONFIG['pairs'][:50]  # –ü–µ—Ä–≤—ã–µ 50 –ø–∞—Ä
        self.min_confidence = 0.8  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å 80%
        self.update_frequency = 300  # 5 –º–∏–Ω—É—Ç
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'cycles': 0,
            'signals_generated': 0,
            'signals_sent': 0,
            'start_time': time.time()
        }
        
        logger.info("ü§ñ Professional Detailed Bot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def start_analysis_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∞–Ω–∞–ª–∏–∑–∞"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞...")
        
        while self.running:
            try:
                self.stats['cycles'] += 1
                cycle_start = time.time()
                
                logger.info(f"üìä –¶–∏–∫–ª #{self.stats['cycles']}: –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ {len(self.pairs)} –ø–∞—Ä...")
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ä—ã –ø–∞–∫–µ—Ç–∞–º–∏
                batch_size = 5  # –ú–µ–Ω—å—à–∏–π —Ä–∞–∑–º–µ—Ä –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
                quality_signals = []
                
                for i in range(0, len(self.pairs), batch_size):
                    batch = self.pairs[i:i+batch_size]
                    batch_signals = await self._analyze_batch(batch)
                    quality_signals.extend(batch_signals)
                    
                    # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø–∞–∫–µ—Ç–∞–º–∏
                    await asyncio.sleep(2)
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
                high_confidence_signals = [s for s in quality_signals if s['confidence'] >= self.min_confidence]
                
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –±–µ—Ä–µ–º —Ç–æ–ø-3
                high_confidence_signals.sort(key=lambda x: x['confidence'], reverse=True)
                top_signals = high_confidence_signals[:3]
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª—ã
                for signal in top_signals:
                    success = await self.telegram_bot.send_detailed_signal(signal)
                    if success:
                        self.stats['signals_sent'] += 1
                        logger.info(f"üì§ –î–µ—Ç–∞–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª {signal['symbol']} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
                    
                    await asyncio.sleep(3)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                
                self.stats['signals_generated'] += len(quality_signals)
                
                cycle_time = time.time() - cycle_start
                logger.info(f"‚è±Ô∏è –¶–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {cycle_time:.1f}—Å. –ù–∞–π–¥–µ–Ω–æ: {len(quality_signals)}, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {len(top_signals)}")
                
                # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞
                await asyncio.sleep(self.update_frequency)
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ: {e}")
                await asyncio.sleep(60)
    
    async def _analyze_batch(self, pairs_batch: List[str]) -> List[Dict]:
        """–ê–Ω–∞–ª–∏–∑ –ø–∞–∫–µ—Ç–∞ –ø–∞—Ä"""
        signals = []
        
        tasks = []
        for pair in pairs_batch:
            task = self.signal_generator.analyze_and_generate_signal(pair)
            tasks.append(task)
        
        results = await asyncio.gather(*tasks, return_exceptions=True)
        
        for pair, result in zip(pairs_batch, results):
            if isinstance(result, Exception):
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {pair}: {result}")
                continue
                
            if result:
                signals.append(result)
        
        return signals
    
    def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        self.running = True
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ Professional Detailed Bot...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        thread = threading.Thread(target=self._run_async_loop, daemon=True)
        thread.start()
        
        return thread
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        self.running = False
        logger.info("üõë Professional Detailed Bot –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def _run_async_loop(self):
        """–ó–∞–ø—É—Å–∫ async loop –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        loop.run_until_complete(self.start_analysis_loop())
        loop.close()

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    bot = ProfessionalDetailedBot()
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await bot.telegram_bot._send_message(
            "üöÄ **PROFESSIONAL DETAILED SIGNAL BOT v6.0 STARTED**\n\n"
            "‚úÖ –î–µ—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã\n"
            "‚úÖ –ü–æ–ª–Ω—ã–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑\n"
            "‚úÖ –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –±–∏—Ä–∂\n"
            "‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: 80%\n\n"
            "üìä –ê–Ω–∞–ª–∏–∑ –Ω–∞—á–∞—Ç..."
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∑–∞–ø—É—Å–∫–∞
        bot.running = True
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
        await bot.start_analysis_loop()
        
    except KeyboardInterrupt:
        logger.info("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    finally:
        bot.stop()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üõë –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º") 