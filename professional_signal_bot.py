#!/usr/bin/env python3
"""
üöÄ PROFESSIONAL CRYPTO ALPHA PRO SIGNAL BOT v5.0
- –ü–æ–ª–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram (/start, /stop, /status, /restart)
- WebSocket real-time –¥–∞–Ω–Ω—ã–µ —Å 3 –±–∏—Ä–∂
- –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã (SuperTrend, Donchian, VWAP)
- –¢–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –Ω–∏–∫–∞–∫–∏—Ö —Å–∏–º—É–ª—è—Ü–∏–π
- –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –¥–ª—è production
"""

import asyncio
import threading
import time
import logging
from datetime import datetime
from typing import Dict, List, Optional, Any
import json
import os
import signal
import sys

from data_manager import RealDataCollector, AdvancedTechnicalAnalyzer
from config import TELEGRAM_CONFIG, TRADING_CONFIG, ANALYSIS_CONFIG

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('crypto_alpha_pro.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger("CryptoAlphaPro")

class TradingBotController:
    """–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞ —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —á–µ—Ä–µ–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    
    def __init__(self):
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞
        self.running = False
        self.websocket_running = False
        self.analysis_running = False
        
        # –ü–æ—Ç–æ–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        self.main_thread = None
        self.websocket_thread = None
        self.telegram_thread = None
        
        # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.data_collector = RealDataCollector()
        self.telegram_bot = None
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'start_time': None,
            'cycles_completed': 0,
            'signals_generated': 0,
            'signals_sent': 0,
            'errors': 0,
            'websocket_messages': 0,
            'last_signal_time': None
        }
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        self.pairs = TRADING_CONFIG['pairs'][:50]  # –ü–µ—Ä–≤—ã–µ 50 –ø–∞—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        self.timeframes = ['5m', '15m', '1h', '4h']
        self.min_confidence = ANALYSIS_CONFIG['min_confidence']
        self.update_frequency = TRADING_CONFIG['update_frequency']
        
        # –ö—ç—à —Å–∏–≥–Ω–∞–ª–æ–≤
        self.signal_cache = {}
        self.last_prices = {}
        
        logger.info("ü§ñ TradingBotController –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def trading_analysis_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∞–Ω–∞–ª–∏–∑–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –∞–Ω–∞–ª–∏–∑–∞...")
        self.stats['start_time'] = time.time()
        
        while self.analysis_running:
            try:
                cycle_start = time.time()
                self.stats['cycles_completed'] += 1
                
                logger.info(f"üìä –¶–∏–∫–ª #{self.stats['cycles_completed']}: –ê–Ω–∞–ª–∏–∑ {len(self.pairs)} –ø–∞—Ä...")
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ä—ã –ø–∞–∫–µ—Ç–∞–º–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
                batch_size = 10
                all_signals = []
                
                for i in range(0, len(self.pairs), batch_size):
                    batch = self.pairs[i:i+batch_size]
                    batch_signals = await self._analyze_batch(batch)
                    all_signals.extend(batch_signals)
                    
                    # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø–∞–∫–µ—Ç–∞–º–∏
                    await asyncio.sleep(1)
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã
                quality_signals = self._filter_quality_signals(all_signals)
                
                if quality_signals:
                    logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(quality_signals)} –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤")
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª—É—á—à–∏–µ —Å–∏–≥–Ω–∞–ª—ã
                    for signal in quality_signals[:5]:  # –¢–æ–ø 5 —Å–∏–≥–Ω–∞–ª–æ–≤
                        await self._send_signal_to_telegram(signal)
                        self.stats['signals_sent'] += 1
                        await asyncio.sleep(2)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ü–∏–∫–ª–∞
                cycle_time = time.time() - cycle_start
                logger.info(f"‚è±Ô∏è –¶–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {cycle_time:.1f}—Å. –ù–∞–π–¥–µ–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {len(all_signals)}, –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö: {len(quality_signals)}")
                
                # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞
                await asyncio.sleep(self.update_frequency)
                
            except Exception as e:
                self.stats['errors'] += 1
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –∞–Ω–∞–ª–∏–∑–∞: {e}")
                await asyncio.sleep(60)  # –ü–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    async def _analyze_batch(self, pairs_batch: List[str]) -> List[Dict]:
        """–ê–Ω–∞–ª–∏–∑ –ø–∞–∫–µ—Ç–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä"""
        signals = []
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ä—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        tasks = []
        for pair in pairs_batch:
            task = self.data_collector.analyze_symbol_advanced(pair, self.timeframes)
            tasks.append(task)
        
        results = await asyncio.gather(*tasks, return_exceptions=True)
        
        for pair, result in zip(pairs_batch, results):
            if isinstance(result, Exception):
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {pair}: {result}")
                continue
                
            if result and result.get('timeframes'):
                signal = self._generate_signal_from_analysis(result)
                if signal:
                    signals.append(signal)
                    self.stats['signals_generated'] += 1
        
        return signals
    
    def _generate_signal_from_analysis(self, analysis: Dict) -> Optional[Dict]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            symbol = analysis['symbol']
            timeframes = analysis['timeframes']
            
            if not timeframes:
                return None
            
            # –ë–µ—Ä–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–π–º—Ñ—Ä–µ–π–º (15m)
            main_tf = timeframes.get('15m') or timeframes.get('1h') or list(timeframes.values())[0]
            
            if not main_tf:
                return None
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            price = main_tf['price']
            supertrend = main_tf['supertrend']
            donchian = main_tf['donchian']
            vwap = main_tf['vwap']
            rsi = main_tf['advanced_rsi']
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º confidence –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
            confidence_factors = []
            signal_direction = None
            
            # SuperTrend –∞–Ω–∞–ª–∏–∑
            if supertrend['trend'] == 'BULLISH' and supertrend['strength'] > 1.0:
                confidence_factors.append(0.25)
                signal_direction = 'BUY'
            elif supertrend['trend'] == 'BEARISH' and supertrend['strength'] > 1.0:
                confidence_factors.append(0.25)
                signal_direction = 'SELL'
            
            # Donchian Channel –∞–Ω–∞–ª–∏–∑
            if donchian['signal'] == 'BREAKOUT_UP' and donchian['breakout_potential'] > 0.8:
                confidence_factors.append(0.2)
                if signal_direction != 'SELL':
                    signal_direction = 'BUY'
            elif donchian['signal'] == 'BREAKOUT_DOWN' and donchian['breakout_potential'] > 0.8:
                confidence_factors.append(0.2)
                if signal_direction != 'BUY':
                    signal_direction = 'SELL'
            
            # VWAP –∞–Ω–∞–ª–∏–∑
            if vwap['signal'] == 'UNDERVALUED' and abs(vwap['deviation_pct']) > 2:
                confidence_factors.append(0.15)
                if signal_direction != 'SELL':
                    signal_direction = 'BUY'
            elif vwap['signal'] == 'OVERVALUED' and abs(vwap['deviation_pct']) > 2:
                confidence_factors.append(0.15)
                if signal_direction != 'BUY':
                    signal_direction = 'SELL'
            
            # RSI –∞–Ω–∞–ª–∏–∑
            if rsi['signal'] in ['BUY', 'STRONG_BUY']:
                confidence_factors.append(0.2)
                if signal_direction != 'SELL':
                    signal_direction = 'BUY'
            elif rsi['signal'] in ['SELL', 'STRONG_SELL']:
                confidence_factors.append(0.2)
                if signal_direction != 'BUY':
                    signal_direction = 'SELL'
            
            # –ú—É–ª—å—Ç–∏—Ç–∞–π–º—Ñ—Ä–µ–π–º —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å
            tf_agreement = self._calculate_timeframe_agreement(timeframes)
            confidence_factors.append(tf_agreement * 0.2)
            
            # –ò—Ç–æ–≥–æ–≤–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
            total_confidence = min(sum(confidence_factors), 0.95)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
            if total_confidence < self.min_confidence:
                return None
            
            if not signal_direction:
                return None
            
            # –ù–æ–≤–æ—Å—Ç–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä
            news_sentiment = analysis.get('news', {})
            if news_sentiment.get('sentiment') == 'very_bearish' and signal_direction == 'BUY':
                total_confidence *= 0.8  # –°–Ω–∏–∂–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ø—Ä–∏ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç—è—Ö
            elif news_sentiment.get('sentiment') == 'very_bullish' and signal_direction == 'SELL':
                total_confidence *= 0.8
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ—Å–ª–µ –Ω–æ–≤–æ—Å—Ç–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞
            if total_confidence < self.min_confidence:
                return None
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º TP/SL —É—Ä–æ–≤–Ω–∏
            tp_levels, sl_level = self._calculate_tp_sl(price, signal_direction, supertrend, donchian)
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–ª–µ—á–æ
            leverage = self._calculate_leverage(total_confidence, main_tf.get('volume', 0))
            
            return {
                'symbol': symbol,
                'action': signal_direction,
                'confidence': total_confidence,
                'entry_price': price,
                'tp_levels': tp_levels,
                'sl_level': sl_level,
                'leverage': leverage,
                'analysis': {
                    'supertrend': supertrend,
                    'donchian': donchian,
                    'vwap': vwap,
                    'rsi': rsi,
                    'timeframe_agreement': tf_agreement,
                    'news_sentiment': news_sentiment.get('sentiment', 'neutral')
                },
                'timestamp': datetime.now().isoformat(),
                'data_quality': 'REAL'
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞: {e}")
            return None
    
    def _calculate_timeframe_agreement(self, timeframes: Dict) -> float:
        """–†–∞—Å—á–µ—Ç —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ –º–µ–∂–¥—É —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º–∏"""
        try:
            signals = []
            
            for tf_name, tf_data in timeframes.items():
                if 'supertrend' in tf_data and 'advanced_rsi' in tf_data:
                    st_signal = 1 if tf_data['supertrend']['trend'] == 'BULLISH' else -1
                    rsi_signal = 1 if tf_data['advanced_rsi']['rsi'] < 50 else -1
                    
                    # –°—Ä–µ–¥–Ω–∏–π —Å–∏–≥–Ω–∞–ª –¥–ª—è —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
                    avg_signal = (st_signal + rsi_signal) / 2
                    signals.append(avg_signal)
            
            if len(signals) < 2:
                return 0.5
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å
            positive_signals = sum(1 for s in signals if s > 0)
            negative_signals = sum(1 for s in signals if s < 0)
            total_signals = len(signals)
            
            agreement = max(positive_signals, negative_signals) / total_signals
            return agreement
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏: {e}")
            return 0.5
    
    def _calculate_tp_sl(self, price: float, direction: str, supertrend: Dict, donchian: Dict) -> tuple:
        """–†–∞—Å—á–µ—Ç —É—Ä–æ–≤–Ω–µ–π Take Profit –∏ Stop Loss"""
        try:
            if direction == 'BUY':
                # Take Profit —É—Ä–æ–≤–Ω–∏
                tp1 = price * 1.02    # +2%
                tp2 = price * 1.05    # +5%
                tp3 = price * 1.10    # +10%
                tp4 = price * 1.15    # +15%
                
                # Stop Loss –Ω–∞ –æ—Å–Ω–æ–≤–µ SuperTrend –∏–ª–∏ Donchian
                sl_supertrend = supertrend.get('support_resistance', price * 0.95)
                sl_donchian = donchian.get('lower', price * 0.95)
                sl_level = max(sl_supertrend, sl_donchian, price * 0.93)  # –ú–∏–Ω–∏–º—É–º -7%
                
            else:  # SELL
                # Take Profit —É—Ä–æ–≤–Ω–∏
                tp1 = price * 0.98    # -2%
                tp2 = price * 0.95    # -5%
                tp3 = price * 0.90    # -10%
                tp4 = price * 0.85    # -15%
                
                # Stop Loss
                sl_supertrend = supertrend.get('support_resistance', price * 1.05)
                sl_donchian = donchian.get('upper', price * 1.05)
                sl_level = min(sl_supertrend, sl_donchian, price * 1.07)  # –ú–∞–∫—Å–∏–º—É–º +7%
            
            return [tp1, tp2, tp3, tp4], sl_level
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ TP/SL: {e}")
            # Fallback –∑–Ω–∞—á–µ–Ω–∏—è
            if direction == 'BUY':
                return [price * 1.02, price * 1.05, price * 1.10, price * 1.15], price * 0.95
            else:
                return [price * 0.98, price * 0.95, price * 0.90, price * 0.85], price * 1.05
    
    def _calculate_leverage(self, confidence: float, volume: float) -> float:
        """–†–∞—Å—á–µ—Ç –ø–ª–µ—á–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –æ–±—ä–µ–º–∞"""
        try:
            # –ë–∞–∑–æ–≤–æ–µ –ø–ª–µ—á–æ
            base_leverage = 3.0
            
            # –ú–Ω–æ–∂–∏—Ç–µ–ª—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ (0.8-0.95 -> 1.0-1.5)
            confidence_multiplier = 0.5 + (confidence - 0.8) / 0.15 * 1.0
            
            # –ú–Ω–æ–∂–∏—Ç–µ–ª—å –æ–±—ä–µ–º–∞ (–Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è)
            volume_multiplier = min(volume / 1000000, 2.0) if volume > 0 else 1.0
            
            leverage = base_leverage * confidence_multiplier * volume_multiplier
            return max(1.0, min(leverage, 10.0))  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 1x-10x
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –ø–ª–µ—á–∞: {e}")
            return 3.0
    
    def _filter_quality_signals(self, signals: List[Dict]) -> List[Dict]:
        """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
        if not signals:
            return []
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        quality_signals = [s for s in signals if s.get('confidence', 0) >= self.min_confidence]
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        quality_signals.sort(key=lambda x: x.get('confidence', 0), reverse=True)
        
        # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ —Å–∏–º–≤–æ–ª–∞–º
        seen_symbols = set()
        unique_signals = []
        for signal in quality_signals:
            symbol = signal.get('symbol')
            if symbol not in seen_symbols:
                seen_symbols.add(symbol)
                unique_signals.append(signal)
        
        return unique_signals
    
    async def _send_signal_to_telegram(self, signal: Dict):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –≤ Telegram"""
        try:
            if not self.telegram_bot:
                return
            
            message = self._format_signal_message(signal)
            success = await self.telegram_bot.send_message(message)
            
            if success:
                logger.info(f"üì§ –°–∏–≥–Ω–∞–ª {signal['symbol']} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram")
                self.stats['last_signal_time'] = time.time()
            else:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∏–≥–Ω–∞–ª {signal['symbol']}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏–≥–Ω–∞–ª–∞: {e}")
    
    def _format_signal_message(self, signal: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è Telegram"""
        try:
            symbol = signal['symbol']
            action = signal['action']
            price = signal['entry_price']
            confidence = signal['confidence']
            leverage = signal['leverage']
            tp_levels = signal['tp_levels']
            sl_level = signal['sl_level']
            analysis = signal['analysis']
            
            action_emoji = "üöÄ" if action == 'BUY' else "üìâ"
            position_type = "–î–õ–ò–ù–ù–£–Æ –ü–û–ó–ò–¶–ò–Æ" if action == 'BUY' else "–ö–û–†–û–¢–ö–£–Æ –ü–û–ó–ò–¶–ò–Æ"
            
            message = f"üö® **–ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–´–ô –°–ò–ì–ù–ê–õ –ù–ê {position_type}** {action_emoji}\n\n"
            message += f"**–ü–∞—Ä–∞:** {symbol}\n"
            message += f"**–î–µ–π—Å—Ç–≤–∏–µ:** {action}\n"
            message += f"**–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞:** ${price:.6f}\n"
            message += f"**‚ö° –ü–ª–µ—á–æ:** {leverage:.1f}x\n"
            message += f"**üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:** {confidence*100:.1f}%\n\n"
            
            # Take Profit —É—Ä–æ–≤–Ω–∏
            message += "**üéØ Take Profit:**\n"
            for i, tp in enumerate(tp_levels, 1):
                message += f"TP{i}: ${tp:.6f}\n"
            
            message += f"\n**üõë Stop Loss:** ${sl_level:.6f}\n\n"
            
            # –í—Ä–µ–º—è
            message += f"**üïí –í—Ä–µ–º—è:** {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
            
            # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
            message += "**üîç –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó:**\n\n"
            
            # SuperTrend
            st = analysis['supertrend']
            message += f"‚Ä¢ **SuperTrend:** {st['trend']} (—Å–∏–ª–∞: {st['strength']:.1f}%)\n"
            
            # Donchian Channel
            dc = analysis['donchian']
            message += f"‚Ä¢ **Donchian Channel:** {dc['signal']} (–ø–æ–∑–∏—Ü–∏—è: {dc['position_pct']:.1f}%)\n"
            
            # VWAP
            vwap = analysis['vwap']
            message += f"‚Ä¢ **VWAP:** {vwap['signal']} (–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {vwap['deviation_pct']:.1f}%)\n"
            
            # RSI
            rsi = analysis['rsi']
            message += f"‚Ä¢ **Advanced RSI:** {rsi['signal']} ({rsi['rsi']:.1f})\n"
            
            # –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
            tf_agreement = analysis['timeframe_agreement']
            message += f"‚Ä¢ **–ú—É–ª—å—Ç–∏—Ç–∞–π–º—Ñ—Ä–µ–π–º —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å:** {tf_agreement*100:.0f}%\n"
            
            # –ù–æ–≤–æ—Å—Ç–Ω–æ–π —Ñ–æ–Ω
            news = analysis['news_sentiment']
            message += f"‚Ä¢ **–ù–æ–≤–æ—Å—Ç–Ω–æ–π —Ñ–æ–Ω:** {news}\n\n"
            
            message += "**‚ö° –î–ê–ù–ù–´–ï: 100% –†–ï–ê–õ–¨–ù–´–ï (WebSocket + REST API)**\n"
            message += "**ü§ñ CryptoAlphaPro v5.0 - Professional Trading Bot**"
            
            return message
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è {signal.get('symbol', 'UNKNOWN')}"
    
    async def start_websocket_streams(self):
        """–ó–∞–ø—É—Å–∫ WebSocket –ø–æ—Ç–æ–∫–æ–≤"""
        try:
            self.websocket_running = True
            logger.info("üåê –ó–∞–ø—É—Å–∫ WebSocket –ø–æ—Ç–æ–∫–æ–≤...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º WebSocket –¥–ª—è —Ç–æ–ø –ø–∞—Ä
            top_pairs = self.pairs[:20]  # –¢–æ–ø 20 –ø–∞—Ä –¥–ª—è WebSocket
            await self.data_collector.start_realtime_streams(top_pairs)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ WebSocket –ø–æ—Ç–æ–∫–æ–≤: {e}")
            self.websocket_running = False
    
    async def stop_websocket_streams(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ WebSocket –ø–æ—Ç–æ–∫–æ–≤"""
        try:
            self.websocket_running = False
            await self.data_collector.stop_realtime_streams()
            logger.info("üõë WebSocket –ø–æ—Ç–æ–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ WebSocket: {e}")
    
    def start_bot(self) -> str:
        """–ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞"""
        try:
            if self.running:
                return "ü§ñ –ë–æ—Ç —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!"
            
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ CryptoAlphaPro Bot...")
            
            self.running = True
            self.analysis_running = True
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ –∞–Ω–∞–ª–∏–∑–∞
            self.main_thread = threading.Thread(target=self._run_analysis_loop, daemon=True)
            self.main_thread.start()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º WebSocket –ø–æ—Ç–æ–∫
            self.websocket_thread = threading.Thread(target=self._run_websocket_loop, daemon=True)
            self.websocket_thread.start()
            
            return "üöÄ **CRYPTOALPHAPRO BOT –ó–ê–ü–£–©–ï–ù!**\n\n" + \
                   f"üìä –ü–∞—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {len(self.pairs)}\n" + \
                   f"‚è±Ô∏è –¢–∞–π–º—Ñ—Ä–µ–π–º—ã: {', '.join(self.timeframes)}\n" + \
                   f"üéØ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {self.min_confidence*100:.0f}%\n" + \
                   f"‚è∞ –ß–∞—Å—Ç–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {self.update_frequency}—Å\n\n" + \
                   "üåê WebSocket –ø–æ—Ç–æ–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã\n" + \
                   "üì° –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å 3 –±–∏—Ä–∂\n" + \
                   "üîç –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –≤–∫–ª—é—á–µ–Ω—ã"
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}"
    
    def stop_bot(self) -> str:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞"""
        try:
            if not self.running:
                return "ü§ñ –ë–æ—Ç —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
            
            logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ CryptoAlphaPro Bot...")
            
            self.running = False
            self.analysis_running = False
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º WebSocket
            if self.websocket_running:
                asyncio.create_task(self.stop_websocket_streams())
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–æ–≤
            if self.main_thread and self.main_thread.is_alive():
                self.main_thread.join(timeout=10)
            
            if self.websocket_thread and self.websocket_thread.is_alive():
                self.websocket_thread.join(timeout=10)
            
            return "üõë **CRYPTOALPHAPRO BOT –û–°–¢–ê–ù–û–í–õ–ï–ù**\n\n" + \
                   f"‚è±Ô∏è –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {self._get_uptime()}\n" + \
                   f"üîÑ –¶–∏–∫–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {self.stats['cycles_completed']}\n" + \
                   f"üìä –°–∏–≥–Ω–∞–ª–æ–≤ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {self.stats['signals_generated']}\n" + \
                   f"üì§ –°–∏–≥–Ω–∞–ª–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {self.stats['signals_sent']}"
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}"
    
    def get_status(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞"""
        try:
            status = "üü¢ –†–ê–ë–û–¢–ê–ï–¢" if self.running else "üî¥ –û–°–¢–ê–ù–û–í–õ–ï–ù"
            uptime = self._get_uptime()
            
            # –ü–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–≥–Ω–∞–ª
            last_signal = "–ù–∏–∫–æ–≥–¥–∞"
            if self.stats['last_signal_time']:
                last_signal_ago = time.time() - self.stats['last_signal_time']
                if last_signal_ago < 3600:
                    last_signal = f"{last_signal_ago/60:.0f} –º–∏–Ω –Ω–∞–∑–∞–¥"
                else:
                    last_signal = f"{last_signal_ago/3600:.1f} —á –Ω–∞–∑–∞–¥"
            
            return f"üìä **–°–¢–ê–¢–£–° CRYPTOALPHAPRO BOT**\n\n" + \
                   f"**–°–æ—Å—Ç–æ—è–Ω–∏–µ:** {status}\n" + \
                   f"**‚è±Ô∏è –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:** {uptime}\n" + \
                   f"**üîÑ –¶–∏–∫–ª–æ–≤:** {self.stats['cycles_completed']}\n" + \
                   f"**üìä –°–∏–≥–Ω–∞–ª–æ–≤ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ:** {self.stats['signals_generated']}\n" + \
                   f"**üì§ –°–∏–≥–Ω–∞–ª–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:** {self.stats['signals_sent']}\n" + \
                   f"**‚ùå –û—à–∏–±–æ–∫:** {self.stats['errors']}\n" + \
                   f"**üì° WebSocket:** {'üü¢ –ê–∫—Ç–∏–≤–µ–Ω' if self.websocket_running else 'üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}\n" + \
                   f"**üïê –ü–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–≥–Ω–∞–ª:** {last_signal}\n\n" + \
                   f"**üìà –ü–∞—Ä –≤ –∞–Ω–∞–ª–∏–∑–µ:** {len(self.pairs)}\n" + \
                   f"**üéØ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:** {self.min_confidence*100:.0f}%"
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}"
    
    def _get_uptime(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã"""
        if not self.stats['start_time']:
            return "–ù–µ –∑–∞–ø—É—â–µ–Ω"
        
        uptime_seconds = time.time() - self.stats['start_time']
        
        if uptime_seconds < 60:
            return f"{uptime_seconds:.0f} —Å–µ–∫"
        elif uptime_seconds < 3600:
            return f"{uptime_seconds/60:.0f} –º–∏–Ω"
        else:
            hours = uptime_seconds // 3600
            minutes = (uptime_seconds % 3600) // 60
            return f"{hours:.0f}—á {minutes:.0f}–º"
    
    def _run_analysis_loop(self):
        """–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        try:
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            loop.run_until_complete(self.trading_analysis_loop())
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        finally:
            loop.close()
    
    def _run_websocket_loop(self):
        """–ó–∞–ø—É—Å–∫ WebSocket –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        try:
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            loop.run_until_complete(self.start_websocket_streams())
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ WebSocket –ø–æ—Ç–æ–∫–µ: {e}")
        finally:
            loop.close()

# Telegram Bot –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
class TelegramBotManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä Telegram –±–æ—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã–º –±–æ—Ç–æ–º"""
    
    def __init__(self, trading_controller: TradingBotController):
        self.bot_token = TELEGRAM_CONFIG['bot_token']
        self.chat_id = TELEGRAM_CONFIG['chat_id']
        self.admin_chat_id = TELEGRAM_CONFIG.get('admin_chat_id', self.chat_id)
        self.trading_controller = trading_controller
        self.running = False
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Å—ã–ª–∫—É –≤ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–µ
        trading_controller.telegram_bot = self
    
    async def send_message(self, message: str, chat_id: str = None) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
        try:
            target_chat_id = chat_id or self.chat_id
            url = f"https://api.telegram.org/bot{self.bot_token}/sendMessage"
            data = {
                'chat_id': target_chat_id,
                'text': message,
                'parse_mode': 'Markdown',
                'disable_web_page_preview': True
            }
            
            import aiohttp
            async with aiohttp.ClientSession() as session:
                async with session.post(url, json=data, timeout=10) as response:
                    if response.status == 200:
                        result = await response.json()
                        return result.get('ok', False)
            
            return False
            
        except Exception as e:
            logger.error(f"‚ùå Telegram send error: {e}")
            return False
    
    async def start_polling(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥"""
        self.running = True
        offset = 0
        
        logger.info("üì± Telegram bot polling started...")
        
        while self.running:
            try:
                url = f"https://api.telegram.org/bot{self.bot_token}/getUpdates"
                params = {'offset': offset, 'limit': 10, 'timeout': 30}
                
                import aiohttp
                async with aiohttp.ClientSession() as session:
                    async with session.get(url, params=params, timeout=35) as response:
                        if response.status == 200:
                            data = await response.json()
                            
                            if data.get('ok') and data.get('result'):
                                for update in data['result']:
                                    await self._process_update(update)
                                    offset = update['update_id'] + 1
                
                await asyncio.sleep(1)
                
            except Exception as e:
                logger.error(f"‚ùå Telegram polling error: {e}")
                await asyncio.sleep(5)
    
    async def _process_update(self, update: Dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π Telegram"""
        try:
            if 'message' not in update:
                return
            
            message = update['message']
            chat_id = str(message['chat']['id'])
            text = message.get('text', '').strip()
            user_id = message['from']['id']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
            if chat_id != str(self.admin_chat_id):
                await self.send_message("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º", chat_id)
                return
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
            if text.startswith('/'):
                await self._handle_command(text, chat_id)
            
        except Exception as e:
            logger.error(f"‚ùå Error processing update: {e}")
    
    async def _handle_command(self, command: str, chat_id: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        try:
            command = command.lower().strip()
            
            if command in ['/start', '/startbot']:
                response = self.trading_controller.start_bot()
                await self.send_message(response, chat_id)
                
            elif command in ['/stop', '/stopbot']:
                response = self.trading_controller.stop_bot()
                await self.send_message(response, chat_id)
                
            elif command == '/status':
                response = self.trading_controller.get_status()
                await self.send_message(response, chat_id)
                
            elif command == '/restart':
                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∑–∞–Ω–æ–≤–æ
                stop_response = self.trading_controller.stop_bot()
                await self.send_message(stop_response, chat_id)
                await asyncio.sleep(3)
                start_response = self.trading_controller.start_bot()
                await self.send_message(f"üîÑ **–ü–ï–†–ï–ó–ê–ü–£–°–ö –ó–ê–í–ï–†–®–ï–ù**\n\n{start_response}", chat_id)
                
            elif command == '/help':
                help_text = "üìö **–ö–û–ú–ê–ù–î–´ –£–ü–†–ê–í–õ–ï–ù–ò–Ø CRYPTOALPHAPRO BOT**\n\n" + \
                           "üöÄ `/start` –∏–ª–∏ `/startbot` - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n" + \
                           "üõë `/stop` –∏–ª–∏ `/stopbot` - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞\n" + \
                           "üìä `/status` - –°—Ç–∞—Ç—É—Å –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n" + \
                           "üîÑ `/restart` - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n" + \
                           "üìö `/help` - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n" + \
                           "**–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ v5.0:**\n" + \
                           "‚Ä¢ WebSocket real-time –¥–∞–Ω–Ω—ã–µ\n" + \
                           "‚Ä¢ SuperTrend, Donchian, VWAP –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã\n" + \
                           "‚Ä¢ –†–µ–∞–ª—å–Ω—ã–µ on-chain –¥–∞–Ω–Ω—ã–µ\n" + \
                           "‚Ä¢ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤"
                await self.send_message(help_text, chat_id)
                
            else:
                await self.send_message("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help", chat_id)
                
        except Exception as e:
            logger.error(f"‚ùå Command handling error: {e}")
            await self.send_message("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã", chat_id)
    
    def stop_polling(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è"""
        self.running = False

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ CryptoAlphaPro Professional Signal Bot v5.0")
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞
    trading_controller = TradingBotController()
    
    # –°–æ–∑–¥–∞–µ–º Telegram –º–µ–Ω–µ–¥–∂–µ—Ä
    telegram_manager = TelegramBotManager(trading_controller)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    def signal_handler(signum, frame):
        logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")
        trading_controller.stop_bot()
        telegram_manager.stop_polling()
        sys.exit(0)
    
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await telegram_manager.send_message(
            "ü§ñ **CRYPTOALPHAPRO BOT v5.0 ONLINE**\n\n" +
            "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!\n\n" +
            "**–ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:**\n" +
            "üöÄ `/startbot` - –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é\n" +
            "üìä `/status` - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å\n" +
            "üìö `/help` - –ü–æ–ª–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞\n\n" +
            "**–ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ v5.0:**\n" +
            "‚Ä¢ WebSocket real-time –ø–æ—Ç–æ–∫–∏\n" +
            "‚Ä¢ SuperTrend, Donchian, VWAP\n" +
            "‚Ä¢ –†–µ–∞–ª—å–Ω—ã–µ on-chain –¥–∞–Ω–Ω—ã–µ\n" +
            "‚Ä¢ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞"
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º Telegram polling
        await telegram_manager.start_polling()
        
    except KeyboardInterrupt:
        logger.info("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        trading_controller.stop_bot()
        telegram_manager.stop_polling()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üõë –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        sys.exit(1) 