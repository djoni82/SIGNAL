#!/usr/bin/env python3
"""
Signal Explainer - –î–µ—Ç–∞–ª—å–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
"""

import math
from typing import Dict, List, Any, Optional
from datetime import datetime

class SignalExplainer:
    """–ö–ª–∞—Å—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –æ–±—ä—è—Å–Ω–µ–Ω–∏–π —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
    
    def __init__(self):
        self.thresholds = {
            'rsi_strong': 60,
            'rsi_weak': 40,
            'macd_hist_threshold': 0.01,
            'adx_strong': 25,
            'volume_spike': 1.5,
            'bb_breakout': 0.95,
            'support_distance': 0.05,  # 5%
            'resistance_distance': 0.05  # 5%
        }
    
    def explain_signal(self, signal: Dict[str, Any], analysis: Dict[str, Any], 
                      mtf_analysis: Optional[Dict[str, Any]] = None) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞
        
        Args:
            signal: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–∏–≥–Ω–∞–ª–∞
            analysis: –°–ª–æ–≤–∞—Ä—å —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –∞–Ω–∞–ª–∏–∑–æ–º
            mtf_analysis: –ú—É–ª—å—Ç–∏—Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
            
        Returns:
            –°—Ç—Ä–æ–∫–∞ —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º —Å–∏–≥–Ω–∞–ª–∞
        """
        explanations = []
        warnings = []
        
        # RSI –∞–Ω–∞–ª–∏–∑
        if 'rsi' in analysis:
            rsi = analysis['rsi']
            if rsi > self.thresholds['rsi_strong']:
                explanations.append(f"‚Ä¢ RSI —Å–∏–ª—å–Ω—ã–π > 60 ({rsi:.2f})")
            elif rsi < self.thresholds['rsi_weak']:
                explanations.append(f"‚Ä¢ RSI —Å–ª–∞–±—ã–π < 40 ({rsi:.2f})")
            else:
                explanations.append(f"‚Ä¢ RSI –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π ({rsi:.2f})")
        
        # MACD –∞–Ω–∞–ª–∏–∑
        if 'macd' in analysis:
            macd_data = analysis['macd']
            if 'histogram' in macd_data:
                hist = macd_data['histogram']
                if abs(hist) > self.thresholds['macd_hist_threshold']:
                    if hist > 0:
                        explanations.append(f"‚Ä¢ –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ MACD —Å–∏–ª—å–Ω–∞—è ({hist:.3f})")
                    else:
                        explanations.append(f"‚Ä¢ –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ MACD –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è ({hist:.3f})")
        
        # EMA –∞–Ω–∞–ª–∏–∑
        if 'ema' in analysis:
            ema_data = analysis['ema']
            if 'ema_8' in ema_data and 'ema_21' in ema_data:
                ema_8 = ema_data['ema_8']
                ema_21 = ema_data['ema_21']
                if ema_8 > ema_21:
                    explanations.append("‚Ä¢ –¶–µ–Ω–∞ –≤—ã—à–µ EMA, —Å–∏–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ")
                else:
                    explanations.append("‚Ä¢ –¶–µ–Ω–∞ –Ω–∏–∂–µ EMA, —Å–ª–∞–±–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ")
        
        # Bollinger Bands –∞–Ω–∞–ª–∏–∑
        if 'bollinger' in analysis:
            bb_data = analysis['bollinger']
            if 'position' in bb_data:
                position = bb_data['position']
                if position > self.thresholds['bb_breakout']:
                    explanations.append("‚Ä¢ –¶–µ–Ω–∞ –ø—Ä–æ–±–∏–ª–∞ –ø–æ–ª–æ—Å—É –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞ (–ø—Ä–æ–±–æ–π)")
                elif position < 0.05:
                    explanations.append("‚Ä¢ –¶–µ–Ω–∞ —É –Ω–∏–∂–Ω–µ–π –ø–æ–ª–æ—Å—ã –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞")
        
        # ADX –∞–Ω–∞–ª–∏–∑ (—Å–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞)
        if 'adx' in analysis:
            adx_data = analysis['adx']
            if 'adx' in adx_data:
                adx = adx_data['adx']
                if adx >= self.thresholds['adx_strong']:
                    explanations.append(f"‚Ä¢ –°–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞ –≤—ã—Å–æ–∫–∞—è (ADX ‚â• 25, {adx:.1f})")
                else:
                    explanations.append(f"‚Ä¢ –°–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞ —Å–ª–∞–±–∞—è (ADX < 25, {adx:.1f})")
        
        # Volume –∞–Ω–∞–ª–∏–∑
        if 'volume' in analysis:
            volume_data = analysis['volume']
            if 'ratio' in volume_data:
                ratio = volume_data['ratio']
                if ratio > self.thresholds['volume_spike']:
                    explanations.append(f"‚Ä¢ –†–æ—Å—Ç –æ–±—ä—ë–º–∞ –±–æ–ª–µ–µ {(ratio-1)*100:.0f}%!")
                elif ratio < 0.7:
                    explanations.append(f"‚Ä¢ –°–Ω–∏–∂–µ–Ω–∏–µ –æ–±—ä—ë–º–∞ –Ω–∞ {(1-ratio)*100:.0f}%")
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã
        if 'patterns' in analysis:
            patterns = analysis['patterns']
            if 'bullish_three_white_soldiers' in patterns:
                explanations.append("‚Ä¢ –û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–∞—Ç—Ç–µ—Ä–Ω ¬´–¢—Ä–∏ –±–µ–ª—ã—Ö —Å–æ–ª–¥–∞—Ç–∞¬ª")
            if 'bearish_three_black_crows' in patterns:
                explanations.append("‚Ä¢ –û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–∞—Ç—Ç–µ—Ä–Ω ¬´–¢—Ä–∏ —á–µ—Ä–Ω—ã—Ö –≤–æ—Ä–æ–Ω–∞¬ª")
            if 'doji' in patterns:
                explanations.append("‚Ä¢ –û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–∞—Ç—Ç–µ—Ä–Ω ¬´–î–æ–¥–∂–∏¬ª")
        
        # –ú—É–ª—å—Ç–∏—Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
        if mtf_analysis:
            mtf_explanations = self._analyze_mtf(mtf_analysis)
            explanations.extend(mtf_explanations)
        
        # –£—Ä–æ–≤–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
        support_warnings = self._analyze_support_resistance(signal, analysis)
        warnings.extend(support_warnings)
        
        # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result = "\n".join(explanations)
        
        if warnings:
            result += "\n\n‚ùóÔ∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:\n" + "\n".join(warnings)
        
        return result
    
    def _analyze_mtf(self, mtf_analysis: Dict[str, Any]) -> List[str]:
        """–ê–Ω–∞–ª–∏–∑ –º—É–ª—å—Ç–∏—Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        explanations = []
        
        if 'timeframes' in mtf_analysis:
            timeframes = mtf_analysis['timeframes']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
            bullish_count = 0
            bearish_count = 0
            
            for tf, data in timeframes.items():
                if data.get('trend') == 'bullish':
                    bullish_count += 1
                elif data.get('trend') == 'bearish':
                    bearish_count += 1
            
            if bullish_count > bearish_count:
                explanations.append(f"‚Ä¢ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ ({bullish_count}/{len(timeframes)} —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤)")
            elif bearish_count > bullish_count:
                explanations.append(f"‚Ä¢ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ ({bearish_count}/{len(timeframes)} —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤)")
            else:
                explanations.append("‚Ä¢ –¢–∞–π–º—Ñ—Ä–µ–π–º—ã –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º—ã")
        
        return explanations
    
    def _analyze_support_resistance(self, signal: Dict[str, Any], analysis: Dict[str, Any]) -> List[str]:
        """–ê–Ω–∞–ª–∏–∑ —É—Ä–æ–≤–Ω–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è"""
        warnings = []
        
        current_price = signal.get('price', 0)
        if current_price <= 0:
            return warnings
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        if 'support' in analysis:
            support = analysis['support']
            if support > 0:
                distance = (current_price - support) / current_price
                if distance > self.thresholds['support_distance']:
                    warnings.append(f"‚ùóÔ∏è –£—Ä–æ–≤–µ–Ω—å –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –¥–∞–ª–µ–∫–æ –æ—Ç —Ü–µ–Ω—ã: ${support:.4f} ({distance*100:.1f}%)")
        
        # –ê–Ω–∞–ª–∏–∑ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
        if 'resistance' in analysis:
            resistance = analysis['resistance']
            if resistance > 0:
                distance = (resistance - current_price) / current_price
                if distance > self.thresholds['resistance_distance']:
                    warnings.append(f"‚ùóÔ∏è –£—Ä–æ–≤–µ–Ω—å —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –¥–∞–ª–µ–∫–æ –æ—Ç —Ü–µ–Ω—ã: ${resistance:.4f} ({distance*100:.1f}%)")
        
        return warnings
    
    def format_signal_message(self, signal: Dict[str, Any], analysis: Dict[str, Any], 
                            mtf_analysis: Optional[Dict[str, Any]] = None) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º
        
        Args:
            signal: –î–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª–∞
            analysis: –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
            mtf_analysis: –ú—É–ª—å—Ç–∏—Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞
        action = signal.get('action', 'HOLD')
        symbol = signal.get('symbol', 'UNKNOWN')
        price = signal.get('price', 0)
        confidence = signal.get('confidence', 0)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ–∑–∏—Ü–∏–∏
        if action in ['BUY', 'STRONG_BUY']:
            position_type = "–î–õ–ò–ù–ù–£–Æ –ü–û–ó–ò–¶–ò–Æ"
        elif action in ['SELL', 'STRONG_SELL']:
            position_type = "–ö–û–†–û–¢–ö–£–Æ –ü–û–ó–ò–¶–ò–Æ"
        else:
            position_type = "–ü–û–ó–ò–¶–ò–Æ"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        msg = f"üö® –°–ò–ì–ù–ê–õ –ù–ê {position_type} –ø–æ {symbol} üöÄ\n\n"
        msg += f"üí∞ –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: ${price:.6f}\n\n"
        
        # Take Profit —É—Ä–æ–≤–Ω–∏
        if 'take_profit' in signal:
            tp_levels = signal['take_profit']
            for i, tp in enumerate(tp_levels[:4], 1):
                msg += f"üéØ TP{i}: ${tp:.6f}\n"
        
        # Stop Loss
        if 'stop_loss' in signal:
            sl = signal['stop_loss']
            msg += f"\nüõë –°—Ç–æ–ø-–ª–æ—Å—Å: ${sl:.6f}\n"
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        msg += f"\nüìä –£—Ä–æ–≤–µ–Ω—å —É—Å–ø–µ—Ö–∞: {confidence*100:.0f}%\n"
        msg += f"üïí –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
        
        # –û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞
        explanation = self.explain_signal(signal, analysis, mtf_analysis)
        if explanation:
            msg += f"üîé –ü–æ—á–µ–º—É —Å–∏–≥–Ω–∞–ª –Ω–∞ {position_type.lower()} ‚ùì\n\n"
            msg += "–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —Å–¥–µ–ª–∫–∏ üëá\n\n"
            msg += explanation
        
        return msg
    
    def calculate_take_profit_levels(self, entry_price: float, direction: str = 'long') -> List[float]:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —É—Ä–æ–≤–Ω–∏ Take Profit"""
        if direction == 'long':
            return [
                entry_price * 1.025,  # TP1: +2.5%
                entry_price * 1.05,   # TP2: +5%
                entry_price * 1.10,   # TP3: +10%
                entry_price * 1.15    # TP4: +15%
            ]
        else:
            return [
                entry_price * 0.975,  # TP1: -2.5%
                entry_price * 0.95,   # TP2: -5%
                entry_price * 0.90,   # TP3: -10%
                entry_price * 0.85    # TP4: -15%
            ]
    
    def calculate_stop_loss(self, entry_price: float, direction: str = 'long', 
                          atr: Optional[float] = None) -> float:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç Stop Loss"""
        if atr:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º ATR –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ SL
            if direction == 'long':
                return entry_price - (atr * 2)
            else:
                return entry_price + (atr * 2)
        else:
            # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç
            if direction == 'long':
                return entry_price * 0.95  # -5%
            else:
                return entry_price * 1.05  # +5% 