#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è CryptoAlphaPro Bot
"""

import asyncio
import ccxt
import pandas as pd
import numpy as np
from datetime import datetime

async def test_real_data():
    print('üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –†–ï–ê–õ–¨–ù–´–• –¥–∞–Ω–Ω—ã—Ö...')
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∏—Ä–∂—É
    binance = ccxt.binance({'enableRateLimit': True})
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        ohlcv = binance.fetch_ohlcv('BTC/USDT', '1h', limit=50)
        
        if ohlcv and len(ohlcv) >= 50:
            closes = [candle[4] for candle in ohlcv]
            highs = [candle[2] for candle in ohlcv]
            lows = [candle[3] for candle in ohlcv]
            volumes = [candle[5] for candle in ohlcv]
            
            # –†–ï–ê–õ–¨–ù–´–ô RSI —Ä–∞—Å—á–µ—Ç
            def calculate_rsi(prices, period=14):
                deltas = np.diff(prices)
                gains = np.where(deltas > 0, deltas, 0)
                losses = np.where(deltas < 0, -deltas, 0)
                
                avg_gain = np.mean(gains[:period])
                avg_loss = np.mean(losses[:period])
                
                for i in range(period, len(gains)):
                    avg_gain = (avg_gain * (period - 1) + gains[i]) / period
                    avg_loss = (avg_loss * (period - 1) + losses[i]) / period
                
                if avg_loss == 0:
                    return 100
                rs = avg_gain / avg_loss
                return 100 - (100 / (1 + rs))
            
            # –†–ï–ê–õ–¨–ù–´–ô MACD —Ä–∞—Å—á–µ—Ç
            def calculate_ema(prices, period):
                alpha = 2 / (period + 1)
                ema = [prices[0]]
                for price in prices[1:]:
                    ema.append(alpha * price + (1 - alpha) * ema[-1])
                return np.array(ema)
            
            rsi = calculate_rsi(closes)
            current_price = closes[-1]
            
            ema_12 = calculate_ema(closes, 12)
            ema_26 = calculate_ema(closes, 26)
            macd = ema_12[-1] - ema_26[-1]
            
            # Volume analysis
            avg_volume = np.mean(volumes[-20:])
            volume_ratio = volumes[-1] / avg_volume
            
            print('=' * 50)
            print('üìä BTC/USDT –†–ï–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï:')
            print('=' * 50)
            print(f'üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${current_price:,.2f}')
            print(f'üìà RSI (14): {rsi:.2f}')
            print(f'üìä MACD: {macd:.4f}')
            print(f'üìä EMA 12: ${ema_12[-1]:,.2f}')
            print(f'üìä EMA 26: ${ema_26[-1]:,.2f}')
            print(f'üìà Volume Ratio: {volume_ratio:.2f}x')
            print(f'üïí –í—Ä–µ–º—è: {datetime.now().strftime("%d.%m.%Y %H:%M:%S")}')
            print(f'‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã —Å Binance (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å–≤–µ—á–µ–π)')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —Å–≤–µ–∂–∏–µ
            last_timestamp = ohlcv[-1][0]
            current_time = datetime.now().timestamp() * 1000
            age_minutes = (current_time - last_timestamp) / (1000 * 60)
            
            print(f'‚è∞ –í–æ–∑—Ä–∞—Å—Ç –¥–∞–Ω–Ω—ã—Ö: {age_minutes:.1f} –º–∏–Ω—É—Ç')
            
            if age_minutes < 120:  # –î–∞–Ω–Ω—ã–µ —Å–≤–µ–∂–µ–µ 2 —á–∞—Å–æ–≤
                print('‚úÖ –î–ê–ù–ù–´–ï –°–í–ï–ñ–ò–ï –ò –†–ï–ê–õ–¨–ù–´–ï!')
            else:
                print('‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ')
                
            print('=' * 50)
            print('üéØ –ê–ù–ê–õ–ò–ó:')
            
            if rsi > 70:
                print('üìà RSI: –ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å (–≤–æ–∑–º–æ–∂–µ–Ω –æ—Ç–∫–∞—Ç)')
            elif rsi < 30:
                print('üìâ RSI: –ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å (–≤–æ–∑–º–æ–∂–µ–Ω –æ—Ç—Å–∫–æ–∫)')
            else:
                print('üìä RSI: –ù–æ—Ä–º–∞–ª—å–Ω–∞—è –∑–æ–Ω–∞')
                
            if macd > 0:
                print('üìà MACD: –ë—ã—á–∏–π —Å–∏–≥–Ω–∞–ª')
            else:
                print('üìâ MACD: –ú–µ–¥–≤–µ–∂–∏–π —Å–∏–≥–Ω–∞–ª')
                
            if volume_ratio > 1.5:
                print('üìä Volume: –ü–æ–≤—ã—à–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å')
            else:
                print('üìä Volume: –û–±—ã—á–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å')
                
            print('=' * 50)
            
        else:
            print('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö')
            
    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞: {e}')

if __name__ == "__main__":
    asyncio.run(test_real_data()) 