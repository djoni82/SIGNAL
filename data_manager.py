#!/usr/bin/env python3
"""
data_manager.py

üöÄ –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–´–ô –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô DATA MANAGER
- WebSocket real-time –¥–∞–Ω–Ω—ã–µ (Binance, Bybit, OKX)
- REST API fallback —á–µ—Ä–µ–∑ ccxt
- –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã (SuperTrend, Donchian, VWAP)
- –†–µ–∞–ª—å–Ω—ã–µ on-chain –¥–∞–Ω–Ω—ã–µ (Dune Analytics)
- –ù–æ–≤–æ—Å—Ç–Ω–æ–π –∞–Ω–∞–ª–∏–∑ (CryptoPanic)
- –¢–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –Ω–∏–∫–∞–∫–∏—Ö —Å–∏–º—É–ª—è—Ü–∏–π!
"""

import ccxt
import asyncio
import aiohttp
import websockets
import pandas as pd
import numpy as np
import time
import json
import logging
from typing import Dict, List, Optional, Any
from datetime import datetime, timedelta
import requests
from config import EXCHANGE_KEYS, EXTERNAL_APIS

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("CryptoAlphaPro_DataManager")

class WebSocketManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –¥–ª—è real-time –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self):
        self.connections = {}
        self.data_callbacks = {}
        self.running = False
        
    async def connect_binance_stream(self, symbols: List[str], callback):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Binance WebSocket"""
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–∏–º–≤–æ–ª—ã –≤ —Ñ–æ—Ä–º–∞—Ç Binance
            streams = []
            for symbol in symbols:
                binance_symbol = symbol.replace('/', '').lower()
                streams.append(f"{binance_symbol}@ticker")
                streams.append(f"{binance_symbol}@kline_1m")
            
            stream_url = f"wss://stream.binance.com:9443/ws/{'/'.join(streams)}"
            
            async with websockets.connect(stream_url) as websocket:
                logger.info(f"‚úÖ Binance WebSocket connected: {len(symbols)} symbols")
                self.connections['binance'] = websocket
                
                while self.running:
                    try:
                        message = await asyncio.wait_for(websocket.recv(), timeout=30)
                        data = json.loads(message)
                        await callback('binance', data)
                    except asyncio.TimeoutError:
                        # Ping –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                        await websocket.ping()
                    except Exception as e:
                        logger.error(f"‚ùå Binance WebSocket error: {e}")
                        break
                        
        except Exception as e:
            logger.error(f"‚ùå Failed to connect Binance WebSocket: {e}")
    
    async def connect_bybit_stream(self, symbols: List[str], callback):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Bybit WebSocket"""
        try:
            url = "wss://stream.bybit.com/v5/public/spot"
            
            async with websockets.connect(url) as websocket:
                # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–∏–º–≤–æ–ª—ã
                for symbol in symbols:
                    bybit_symbol = symbol.replace('/', '')
                    subscribe_msg = {
                        "op": "subscribe",
                        "args": [
                            f"tickers.{bybit_symbol}",
                            f"kline.1.{bybit_symbol}"
                        ]
                    }
                    await websocket.send(json.dumps(subscribe_msg))
                
                logger.info(f"‚úÖ Bybit WebSocket connected: {len(symbols)} symbols")
                self.connections['bybit'] = websocket
                
                while self.running:
                    try:
                        message = await asyncio.wait_for(websocket.recv(), timeout=30)
                        data = json.loads(message)
                        await callback('bybit', data)
                    except asyncio.TimeoutError:
                        # Ping
                        await websocket.send(json.dumps({"op": "ping"}))
                    except Exception as e:
                        logger.error(f"‚ùå Bybit WebSocket error: {e}")
                        break
                        
        except Exception as e:
            logger.error(f"‚ùå Failed to connect Bybit WebSocket: {e}")
    
    async def connect_okx_stream(self, symbols: List[str], callback):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ OKX WebSocket"""
        try:
            url = "wss://ws.okx.com:8443/ws/v5/public"
            
            async with websockets.connect(url) as websocket:
                # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–∏–º–≤–æ–ª—ã
                for symbol in symbols:
                    okx_symbol = symbol.replace('/', '-')
                    subscribe_msg = {
                        "op": "subscribe",
                        "args": [
                            {"channel": "tickers", "instId": okx_symbol},
                            {"channel": "candle1m", "instId": okx_symbol}
                        ]
                    }
                    await websocket.send(json.dumps(subscribe_msg))
                
                logger.info(f"‚úÖ OKX WebSocket connected: {len(symbols)} symbols")
                self.connections['okx'] = websocket
                
                while self.running:
                    try:
                        message = await asyncio.wait_for(websocket.recv(), timeout=30)
                        data = json.loads(message)
                        await callback('okx', data)
                    except asyncio.TimeoutError:
                        # Ping
                        await websocket.send("ping")
                    except Exception as e:
                        logger.error(f"‚ùå OKX WebSocket error: {e}")
                        break
                        
        except Exception as e:
            logger.error(f"‚ùå Failed to connect OKX WebSocket: {e}")
    
    async def start_streams(self, symbols: List[str], callback):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö WebSocket –ø–æ—Ç–æ–∫–æ–≤"""
        self.running = True
        
        tasks = [
            self.connect_binance_stream(symbols, callback),
            self.connect_bybit_stream(symbols, callback),
            self.connect_okx_stream(symbols, callback)
        ]
        
        await asyncio.gather(*tasks, return_exceptions=True)
    
    async def stop_streams(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö WebSocket –ø–æ—Ç–æ–∫–æ–≤"""
        self.running = False
        for name, connection in self.connections.items():
            try:
                await connection.close()
                logger.info(f"‚úÖ {name} WebSocket disconnected")
            except:
                pass
        self.connections.clear()

class AdvancedTechnicalAnalyzer:
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏"""
    
    @staticmethod
    def calculate_supertrend(df: pd.DataFrame, period: int = 10, multiplier: float = 3.0) -> Dict:
        """SuperTrend –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ª–æ–∂–Ω—ã—Ö –ø—Ä–æ–±–æ–µ–≤"""
        high = df['high'].values
        low = df['low'].values
        close = df['close'].values
        
        # ATR —Ä–∞—Å—á–µ—Ç
        tr1 = high - low
        tr2 = np.abs(high - np.roll(close, 1))
        tr3 = np.abs(low - np.roll(close, 1))
        tr = np.maximum(tr1, np.maximum(tr2, tr3))
        atr = pd.Series(tr).rolling(period).mean().values
        
        # SuperTrend —Ä–∞—Å—á–µ—Ç
        hl2 = (high + low) / 2
        upper_band = hl2 + (multiplier * atr)
        lower_band = hl2 - (multiplier * atr)
        
        supertrend = np.zeros(len(close))
        direction = np.ones(len(close))
        
        for i in range(1, len(close)):
            if close[i] <= lower_band[i-1]:
                direction[i] = -1
            elif close[i] >= upper_band[i-1]:
                direction[i] = 1
            else:
                direction[i] = direction[i-1]
            
            if direction[i] == 1:
                supertrend[i] = lower_band[i]
            else:
                supertrend[i] = upper_band[i]
        
        current_trend = "BULLISH" if direction[-1] == 1 else "BEARISH"
        trend_strength = abs(close[-1] - supertrend[-1]) / close[-1] * 100
        
        return {
            'trend': current_trend,
            'strength': trend_strength,
            'support_resistance': supertrend[-1],
            'signal': 'BUY' if current_trend == 'BULLISH' and close[-1] > supertrend[-1] else 'SELL'
        }
    
    @staticmethod
    def calculate_donchian_channel(df: pd.DataFrame, period: int = 20) -> Dict:
        """Donchian Channel –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–æ–±–æ–µ–≤"""
        high = df['high'].rolling(period).max()
        low = df['low'].rolling(period).min()
        middle = (high + low) / 2
        
        current_price = df['close'].iloc[-1]
        upper_channel = high.iloc[-1]
        lower_channel = low.iloc[-1]
        middle_channel = middle.iloc[-1]
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ —Ü–µ–Ω—ã –≤ –∫–∞–Ω–∞–ª–µ
        channel_position = (current_price - lower_channel) / (upper_channel - lower_channel) * 100
        
        signal = "NEUTRAL"
        if current_price >= upper_channel * 0.99:  # –ë–ª–∏–∑–∫–æ –∫ –≤–µ—Ä—Ö–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü–µ
            signal = "BREAKOUT_UP"
        elif current_price <= lower_channel * 1.01:  # –ë–ª–∏–∑–∫–æ –∫ –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü–µ
            signal = "BREAKOUT_DOWN"
        
        return {
            'upper': upper_channel,
            'lower': lower_channel,
            'middle': middle_channel,
            'position_pct': channel_position,
            'signal': signal,
            'breakout_potential': abs(50 - channel_position) / 50  # 0-1, –≥–¥–µ 1 = –Ω–∞ –≥—Ä–∞–Ω–∏—Ü–µ
        }
    
    @staticmethod
    def calculate_vwap(df: pd.DataFrame) -> Dict:
        """VWAP (Volume Weighted Average Price)"""
        typical_price = (df['high'] + df['low'] + df['close']) / 3
        volume = df['volume']
        
        cumulative_volume = volume.cumsum()
        cumulative_price_volume = (typical_price * volume).cumsum()
        
        vwap = cumulative_price_volume / cumulative_volume
        current_vwap = vwap.iloc[-1]
        current_price = df['close'].iloc[-1]
        
        # –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç VWAP
        vwap_deviation = (current_price - current_vwap) / current_vwap * 100
        
        signal = "NEUTRAL"
        if vwap_deviation > 2:
            signal = "OVERVALUED"
        elif vwap_deviation < -2:
            signal = "UNDERVALUED"
        
        return {
            'vwap': current_vwap,
            'deviation_pct': vwap_deviation,
            'signal': signal,
            'strength': abs(vwap_deviation) / 5 * 100  # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ 0-100%
        }
    
    @staticmethod
    def calculate_advanced_rsi(df: pd.DataFrame, period: int = 14) -> Dict:
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π RSI —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Å–∏–≥–Ω–∞–ª–∞–º–∏"""
        close = df['close']
        delta = close.diff()
        
        gain = (delta.where(delta > 0, 0)).rolling(window=period).mean()
        loss = (-delta.where(delta < 0, 0)).rolling(window=period).mean()
        
        rs = gain / loss
        rsi = 100 - (100 / (1 + rs))
        
        current_rsi = rsi.iloc[-1]
        
        # –î–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏—è –∞–Ω–∞–ª–∏–∑ (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π)
        price_trend = (close.iloc[-5:].iloc[-1] - close.iloc[-5:].iloc[0]) > 0
        rsi_trend = (rsi.iloc[-5:].iloc[-1] - rsi.iloc[-5:].iloc[0]) > 0
        divergence = price_trend != rsi_trend
        
        # –°–∏–≥–Ω–∞–ª—ã
        signal = "NEUTRAL"
        if current_rsi > 80:
            signal = "STRONG_SELL"
        elif current_rsi > 70:
            signal = "SELL"
        elif current_rsi < 20:
            signal = "STRONG_BUY"
        elif current_rsi < 30:
            signal = "BUY"
        
        return {
            'rsi': current_rsi,
            'signal': signal,
            'divergence': divergence,
            'momentum': "STRONG" if current_rsi > 70 or current_rsi < 30 else "WEAK"
        }

class RealDataCollector:
    """–°–±–æ—Ä—â–∏–∫ —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ —Å–∏–º—É–ª—è—Ü–∏–π"""
    
    def __init__(self):
        self.exchanges = self._init_exchanges()
        self.websocket_manager = WebSocketManager()
        self.technical_analyzer = AdvancedTechnicalAnalyzer()
        self.cache = {}
        self.cache_timeout = 60
        
    def _init_exchanges(self) -> Dict:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∏—Ä–∂ —á–µ—Ä–µ–∑ ccxt"""
        exchanges = {}
        
        try:
            exchanges['binance'] = ccxt.binance({
                'apiKey': EXCHANGE_KEYS['binance']['key'],
                'secret': EXCHANGE_KEYS['binance']['secret'],
                'sandbox': False,
                'enableRateLimit': True,
                'rateLimit': 1200
            })
        except Exception as e:
            logger.error(f"‚ùå Binance init error: {e}")
        
        try:
            exchanges['bybit'] = ccxt.bybit({
                'apiKey': EXCHANGE_KEYS['bybit']['key'],
                'secret': EXCHANGE_KEYS['bybit']['secret'],
                'sandbox': False,
                'enableRateLimit': True,
                'rateLimit': 2000
            })
        except Exception as e:
            logger.error(f"‚ùå Bybit init error: {e}")
        
        try:
            exchanges['okx'] = ccxt.okx({
                'apiKey': EXCHANGE_KEYS['okx']['key'],
                'secret': EXCHANGE_KEYS['okx']['secret'],
                'password': EXCHANGE_KEYS['okx']['passphrase'],
                'sandbox': False,
                'enableRateLimit': True,
                'rateLimit': 1000
            })
        except Exception as e:
            logger.error(f"‚ùå OKX init error: {e}")
        
        logger.info(f"‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(exchanges)} –±–∏—Ä–∂")
        return exchanges
    
    async def get_real_ohlcv(self, symbol: str, timeframe: str = '1h', limit: int = 100) -> Optional[pd.DataFrame]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö OHLCV –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ ccxt —Å fallback"""
        cache_key = f"{symbol}_{timeframe}_{limit}"
        current_time = time.time()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if cache_key in self.cache:
            cached_data, cache_time = self.cache[cache_key]
            if current_time - cache_time < self.cache_timeout:
                return cached_data
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –±–∏—Ä–∂
        exchange_priority = ['binance', 'okx', 'bybit']
        
        for exchange_name in exchange_priority:
            if exchange_name not in self.exchanges:
                continue
                
            try:
                exchange = self.exchanges[exchange_name]
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                ohlcv = await asyncio.get_event_loop().run_in_executor(
                    None, 
                    lambda: exchange.fetch_ohlcv(symbol, timeframe, limit=limit)
                )
                
                if ohlcv and len(ohlcv) > 0:
                    df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
                    df['datetime'] = pd.to_datetime(df['timestamp'], unit='ms')
                    df['exchange'] = exchange_name
                    
                    # –ö—ç—à–∏—Ä—É–µ–º
                    self.cache[cache_key] = (df, current_time)
                    logger.info(f"‚úÖ {symbol} data from {exchange_name}: {len(df)} candles")
                    return df
                    
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è {exchange_name} error for {symbol}: {e}")
                continue
        
        logger.error(f"‚ùå Failed to get data for {symbol} from all exchanges")
        return None
    
    async def get_real_onchain_data(self, symbol: str) -> Dict:
        """–†–µ–∞–ª—å–Ω—ã–µ on-chain –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ Dune Analytics"""
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –±–∞–∑–æ–≤—ã–π –∞–∫—Ç–∏–≤ (BTC –∏–∑ BTC/USDT)
            base_asset = symbol.split('/')[0].upper()
            
            # –†–µ–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ Dune Analytics
            dune_api_key = EXTERNAL_APIS['dune']['api_key']
            headers = {"x-dune-api-key": dune_api_key, "Content-Type": "application/json"}
            
            # –ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞ - whale transactions
            query_id = EXTERNAL_APIS['dune']['query_id']  # ID –≤–∞—à–µ–≥–æ Dune –∑–∞–ø—Ä–æ—Å–∞
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–ø—Ä–æ—Å
            exec_response = requests.post(
                f"https://api.dune.com/api/v1/query/{query_id}/execute",
                headers=headers,
                json={"parameters": {"token": base_asset}}
            )
            
            if exec_response.status_code != 200:
                logger.error(f"‚ùå Dune API execution error: {exec_response.text}")
                return self._get_fallback_onchain_data()
            
            execution_id = exec_response.json()["execution_id"]
            
            # –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            for _ in range(30):  # –ú–∞–∫—Å–∏–º—É–º 60 —Å–µ–∫—É–Ω–¥ –æ–∂–∏–¥–∞–Ω–∏—è
                result_response = requests.get(
                    f"https://api.dune.com/api/v1/execution/{execution_id}/results",
                    headers=headers
                )
                
                if result_response.status_code == 200:
                    result_data = result_response.json()
                    if result_data.get("result", {}).get("rows"):
                        rows = result_data["result"]["rows"]
                        
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                        total_whale_volume = sum(row.get('amount', 0) for row in rows[-10:])  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
                        whale_count = len([r for r in rows[-10:] if r.get('amount', 0) > 1000000])  # –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ > 1M USD
                        
                        return {
                            'whale_activity': {
                                'total_volume_24h': total_whale_volume,
                                'large_transactions': whale_count,
                                'activity_level': 'high' if whale_count > 5 else 'moderate' if whale_count > 2 else 'low',
                                'score': min(whale_count * 20, 100)  # 0-100 —Å–∫–æ—Ä
                            },
                            'data_source': 'dune_analytics',
                            'timestamp': time.time()
                        }
                
                await asyncio.sleep(2)
            
            logger.warning("‚ö†Ô∏è Dune API timeout, using fallback")
            return self._get_fallback_onchain_data()
            
        except Exception as e:
            logger.error(f"‚ùå On-chain data error: {e}")
            return self._get_fallback_onchain_data()
    
    def _get_fallback_onchain_data(self) -> Dict:
        """Fallback on-chain –¥–∞–Ω–Ω—ã–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫"""
        return {
            'whale_activity': {
                'total_volume_24h': 0,
                'large_transactions': 0,
                'activity_level': 'unknown',
                'score': 50
            },
            'data_source': 'fallback',
            'timestamp': time.time()
        }
    
    async def get_real_news_sentiment(self, symbol: str) -> Dict:
        """–†–µ–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π —á–µ—Ä–µ–∑ CryptoPanic API"""
        try:
            base_asset = symbol.split('/')[0].upper()
            
            url = f"{EXTERNAL_APIS['crypto_panic']['base_url']}/posts/"
            params = {
                'auth_token': EXTERNAL_APIS['crypto_panic']['api_key'],
                'currencies': base_asset,
                'kind': 'news',
                'filter': 'rising'
            }
            
            async with aiohttp.ClientSession() as session:
                async with session.get(url, params=params, timeout=10) as response:
                    if response.status == 200:
                        data = await response.json()
                        
                        if data.get('results'):
                            # –†–µ–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π
                            news_items = data['results'][:20]  # –ë–µ—Ä–µ–º 20 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
                            
                            positive_count = 0
                            negative_count = 0
                            total_impact = 0
                            
                            for item in news_items:
                                votes = item.get('votes', {})
                                positive = votes.get('positive', 0)
                                negative = votes.get('negative', 0)
                                
                                if positive > negative:
                                    positive_count += 1
                                    total_impact += positive
                                elif negative > positive:
                                    negative_count += 1
                                    total_impact += negative
                            
                            total_news = len(news_items)
                            sentiment_score = (positive_count - negative_count) / max(total_news, 1) * 100
                            
                            sentiment = "neutral"
                            if sentiment_score > 30:
                                sentiment = "very_bullish"
                            elif sentiment_score > 10:
                                sentiment = "bullish"
                            elif sentiment_score < -30:
                                sentiment = "very_bearish"
                            elif sentiment_score < -10:
                                sentiment = "bearish"
                            
                            return {
                                'sentiment': sentiment,
                                'score': sentiment_score,
                                'total_news': total_news,
                                'positive_news': positive_count,
                                'negative_news': negative_count,
                                'impact_score': total_impact,
                                'data_source': 'crypto_panic',
                                'timestamp': time.time()
                            }
            
            return self._get_fallback_news_sentiment()
            
        except Exception as e:
            logger.error(f"‚ùå News sentiment error: {e}")
            return self._get_fallback_news_sentiment()
    
    def _get_fallback_news_sentiment(self) -> Dict:
        """Fallback –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –∞–Ω–∞–ª–∏–∑"""
        return {
            'sentiment': 'neutral',
            'score': 0,
            'total_news': 0,
            'positive_news': 0,
            'negative_news': 0,
            'impact_score': 0,
            'data_source': 'fallback',
            'timestamp': time.time()
        }
    
    async def analyze_symbol_advanced(self, symbol: str, timeframes: List[str] = ['5m', '15m', '1h', '4h']) -> Dict:
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–∏–º–≤–æ–ª–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
        try:
            analysis_results = {}
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
            for tf in timeframes:
                df = await self.get_real_ohlcv(symbol, tf, limit=150)
                if df is not None and len(df) >= 50:  # –ú–∏–Ω–∏–º—É–º 50 —Å–≤–µ—á–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                    
                    # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
                    supertrend = self.technical_analyzer.calculate_supertrend(df)
                    donchian = self.technical_analyzer.calculate_donchian_channel(df)
                    vwap = self.technical_analyzer.calculate_vwap(df)
                    advanced_rsi = self.technical_analyzer.calculate_advanced_rsi(df)
                    
                    analysis_results[tf] = {
                        'price': float(df['close'].iloc[-1]),
                        'volume': float(df['volume'].iloc[-1]),
                        'supertrend': supertrend,
                        'donchian': donchian,
                        'vwap': vwap,
                        'advanced_rsi': advanced_rsi,
                        'exchange': df['exchange'].iloc[-1],
                        'timestamp': df['timestamp'].iloc[-1]
                    }
            
            # On-chain –∏ –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –∞–Ω–∞–ª–∏–∑
            onchain_data = await self.get_real_onchain_data(symbol)
            news_sentiment = await self.get_real_news_sentiment(symbol)
            
            return {
                'symbol': symbol,
                'timeframes': analysis_results,
                'onchain': onchain_data,
                'news': news_sentiment,
                'analysis_timestamp': time.time(),
                'data_quality': 'REAL'  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —Ä–µ–∞–ª—å–Ω—ã–µ
            }
            
        except Exception as e:
            logger.error(f"‚ùå Advanced analysis error for {symbol}: {e}")
            return None
    
    async def start_realtime_streams(self, symbols: List[str]):
        """–ó–∞–ø—É—Å–∫ real-time WebSocket –ø–æ—Ç–æ–∫–æ–≤"""
        async def websocket_callback(exchange: str, data: Dict):
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ WebSocket –¥–∞–Ω–Ω—ã—Ö"""
            try:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –±–∏—Ä–∂–∏
                if exchange == 'binance':
                    if 'e' in data and data['e'] == '24hrTicker':
                        symbol = data['s']  # BTCUSDT
                        price = float(data['c'])
                        volume = float(data['v'])
                        logger.info(f"üìä Binance {symbol}: ${price:.6f} Vol: {volume:.0f}")
                
                elif exchange == 'bybit':
                    if 'topic' in data and 'tickers' in data['topic']:
                        for ticker in data.get('data', []):
                            symbol = ticker.get('symbol', '')
                            price = float(ticker.get('lastPrice', 0))
                            logger.info(f"üìä Bybit {symbol}: ${price:.6f}")
                
                elif exchange == 'okx':
                    if 'data' in data:
                        for item in data['data']:
                            if 'instId' in item:
                                symbol = item['instId']
                                price = float(item.get('last', 0))
                                logger.info(f"üìä OKX {symbol}: ${price:.6f}")
                                
            except Exception as e:
                logger.error(f"‚ùå WebSocket callback error: {e}")
        
        logger.info(f"üöÄ Starting WebSocket streams for {len(symbols)} symbols...")
        await self.websocket_manager.start_streams(symbols, websocket_callback)
    
    async def stop_realtime_streams(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ WebSocket –ø–æ—Ç–æ–∫–æ–≤"""
        await self.websocket_manager.stop_streams()
        logger.info("üõë WebSocket streams stopped")

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    async def test_data_manager():
        collector = RealDataCollector()
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        result = await collector.analyze_symbol_advanced('BTC/USDT')
        if result:
            print("‚úÖ Analysis result:")
            for tf, data in result['timeframes'].items():
                print(f"  {tf}: ${data['price']:.2f} - SuperTrend: {data['supertrend']['trend']}")
            print(f"  News: {result['news']['sentiment']} ({result['news']['score']:.1f})")
            print(f"  On-chain: {result['onchain']['whale_activity']['activity_level']}")
        
        # –¢–µ—Å—Ç WebSocket (–∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥)
        # await collector.start_realtime_streams(['BTC/USDT', 'ETH/USDT'])
    
    asyncio.run(test_data_manager()) 