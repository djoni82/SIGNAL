#!/usr/bin/env python3
"""
Telegram Enhanced Signal Bot
Telegram –±–æ—Ç —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ —Å–∏–≥–Ω–∞–ª–∞–º–∏
"""

import asyncio
import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
from typing import Dict, Any, Optional
import time

from enhanced_signal_bot_with_explanations import EnhancedSignalBot

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class TelegramEnhancedBot:
    """Telegram –±–æ—Ç —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ —Å–∏–≥–Ω–∞–ª–∞–º–∏"""
    
    def __init__(self, token: str, chat_id: str):
        self.token = token
        self.chat_id = chat_id
        self.application = None
        self.signal_bot = None
        self.running = False
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Å–∏–≥–Ω–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞
        self.config = {
            'signals': {
                'min_confidence': 0.3,
                'interval': 300,  # 5 –º–∏–Ω—É—Ç –º–µ–∂–¥—É —Å–∏–≥–Ω–∞–ª–∞–º–∏
                'cycle_interval': 60  # 1 –º–∏–Ω—É—Ç–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏
            },
            'trading_pairs': [
                'BTC/USDT', 'ETH/USDT', 'BNB/USDT', 'ADA/USDT', 'SOL/USDT',
                'DOT/USDT', 'LINK/USDT', 'MATIC/USDT', 'AVAX/USDT', 'ATOM/USDT'
            ]
        }
        
        logger.info("ü§ñ Telegram Enhanced Bot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç Telegram –±–æ—Ç–∞"""
        try:
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            self.application = Application.builder().token(self.token).build()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
            self.application.add_handler(CommandHandler("start", self.cmd_start))
            self.application.add_handler(CommandHandler("startbot", self.cmd_start_bot))
            self.application.add_handler(CommandHandler("stopbot", self.cmd_stop_bot))
            self.application.add_handler(CommandHandler("status", self.cmd_status))
            self.application.add_handler(CommandHandler("signals", self.cmd_signals))
            self.application.add_handler(CommandHandler("pairs", self.cmd_pairs))
            self.application.add_handler(CommandHandler("help", self.cmd_help))
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
            await self.application.initialize()
            await self.application.start()
            await self.application.updater.start_polling()
            
            self.running = True
            logger.info("ü§ñ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω")
            
            # –î–µ—Ä–∂–∏–º –±–æ—Ç–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã–º
            while self.running:
                await asyncio.sleep(1)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Telegram –±–æ—Ç–∞: {e}")
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç Telegram –±–æ—Ç–∞"""
        self.running = False
        if self.signal_bot:
            await self.signal_bot.stop()
        
        if self.application:
            await self.application.updater.stop()
            await self.application.stop()
            await self.application.shutdown()
        
        logger.info("üõë Telegram –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    async def send_message(self, message: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
        try:
            if self.application:
                await self.application.bot.send_message(
                    chat_id=self.chat_id,
                    text=message,
                    parse_mode='HTML'
                )
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    async def cmd_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        welcome_message = """
üöÄ <b>CryptoAlphaPro Signal Bot</b>

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –±–æ—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è–º–∏.

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/startbot - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
/stopbot - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
/status - –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞
/signals - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
/pairs - –°–ø–∏—Å–æ–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä
/help - –°–ø—Ä–∞–≤–∫–∞

<b>–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:</b>
‚Ä¢ –î–µ—Ç–∞–ª—å–Ω—ã–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤
‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ (RSI, MACD, ADX, Bollinger Bands)
‚Ä¢ –ü–∞—Ç—Ç–µ—Ä–Ω—ã —Å–≤–µ—á–µ–π
‚Ä¢ –ú—É–ª—å—Ç–∏—Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
‚Ä¢ –£—Ä–æ–≤–Ω–∏ Take Profit –∏ Stop Loss
‚Ä¢ –ê–Ω–∞–ª–∏–∑ –æ–±—ä–µ–º–æ–≤

–ù–∞–∂–º–∏—Ç–µ /startbot –¥–ª—è –∑–∞–ø—É—Å–∫–∞!
        """
        await update.message.reply_text(welcome_message, parse_mode='HTML')
    
    async def cmd_start_bot(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /startbot"""
        try:
            if self.signal_bot and self.signal_bot.running:
                await update.message.reply_text("‚ö†Ô∏è –ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω!")
                return
            
            # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–∏–≥–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç
            self.signal_bot = EnhancedSignalBot(self.config)
            
            # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
            original_send_signal = self.signal_bot.send_signal
            self.signal_bot.send_signal = lambda signal, analysis: self.send_signal_to_telegram(signal, analysis)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ
            asyncio.create_task(self.signal_bot.start())
            
            await update.message.reply_text("üöÄ –ë–æ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–ø—É—â–µ–Ω! –û–∂–∏–¥–∞–π—Ç–µ —Å–∏–≥–Ω–∞–ª—ã...")
            logger.info("üöÄ –°–∏–≥–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ Telegram")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
    
    async def cmd_stop_bot(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stopbot"""
        try:
            if not self.signal_bot or not self.signal_bot.running:
                await update.message.reply_text("‚ö†Ô∏è –ë–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω!")
                return
            
            await self.signal_bot.stop()
            await update.message.reply_text("üõë –ë–æ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
            logger.info("üõë –°–∏–≥–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ Telegram")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}")
    
    async def cmd_status(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
        try:
            if not self.signal_bot:
                status_message = "üìä <b>–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:</b>\n‚Ä¢ –°–∏–≥–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç: –ù–µ –∑–∞–ø—É—â–µ–Ω"
            else:
                status = self.signal_bot.get_status()
                status_message = f"""
üìä <b>–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:</b>
‚Ä¢ –°–∏–≥–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç: {'üü¢ –ó–∞–ø—É—â–µ–Ω' if status['running'] else 'üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}
‚Ä¢ –í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {status['signal_count']}
‚Ä¢ –¢–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä: {status['trading_pairs']}
‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {status['min_confidence']*100:.0f}%
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–≥–Ω–∞–ª: {time.strftime('%H:%M:%S', time.localtime(status['last_signal_time'])) if status['last_signal_time'] > 0 else '–ù–µ—Ç'}
                """
            
            await update.message.reply_text(status_message, parse_mode='HTML')
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    async def cmd_signals(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /signals"""
        try:
            if not self.signal_bot:
                await update.message.reply_text("‚ö†Ô∏è –ë–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω!")
                return
            
            status = self.signal_bot.get_status()
            signals_message = f"""
üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤:</b>
‚Ä¢ –í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {status['signal_count']}
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–≥–Ω–∞–ª: {time.strftime('%H:%M:%S', time.localtime(status['last_signal_time'])) if status['last_signal_time'] > 0 else '–ù–µ—Ç'}
‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Å–∏–≥–Ω–∞–ª–∞–º–∏: {self.config['signals']['interval']} —Å–µ–∫
‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {status['min_confidence']*100:.0f}%
            """
            
            await update.message.reply_text(signals_message, parse_mode='HTML')
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    async def cmd_pairs(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /pairs"""
        try:
            pairs_message = "üìä <b>–¢–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã:</b>\n\n"
            for i, pair in enumerate(self.config['trading_pairs'], 1):
                pairs_message += f"{i}. {pair}\n"
            
            pairs_message += f"\n–í—Å–µ–≥–æ –ø–∞—Ä: {len(self.config['trading_pairs'])}"
            
            await update.message.reply_text(pairs_message, parse_mode='HTML')
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–∞—Ä: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    async def cmd_help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_message = """
üìö <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:</b>

<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞
/startbot - –ó–∞–ø—É—Å—Ç–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–∏–≥–Ω–∞–ª–æ–≤
/stopbot - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–∏–≥–Ω–∞–ª–æ–≤
/status - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
/signals - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
/pairs - –°–ø–∏—Å–æ–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

<b>–û —Å–∏–≥–Ω–∞–ª–∞—Ö:</b>
‚Ä¢ –°–∏–≥–Ω–∞–ª—ã –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: 30%
‚Ä¢ –í–∫–ª—é—á–∞—é—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è
‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞—é—Ç —É—Ä–æ–≤–Ω–∏ TP –∏ SL
‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã

<b>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑:</b>
‚Ä¢ RSI (Relative Strength Index)
‚Ä¢ MACD (Moving Average Convergence Divergence)
‚Ä¢ ADX (Average Directional Index)
‚Ä¢ Bollinger Bands
‚Ä¢ –ü–∞—Ç—Ç–µ—Ä–Ω—ã —Å–≤–µ—á–µ–π
‚Ä¢ –ê–Ω–∞–ª–∏–∑ –æ–±—ä–µ–º–æ–≤

<b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b>
–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.
        """
        await update.message.reply_text(help_message, parse_mode='HTML')
    
    async def send_signal_to_telegram(self, signal: Dict[str, Any], analysis: Dict[str, Any]):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–∏–≥–Ω–∞–ª –≤ Telegram —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º"""
        try:
            from signal_explainer import SignalExplainer
            
            explainer = SignalExplainer()
            
            # –°–æ–∑–¥–∞–µ–º –º—É–ª—å—Ç–∏—Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
            mtf_analysis = {
                'timeframes': {
                    '15m': {'trend': 'bullish' if signal['action'] == 'BUY' else 'bearish'},
                    '1h': {'trend': 'bullish' if signal['action'] == 'BUY' else 'bearish'},
                    '4h': {'trend': 'neutral'}
                },
                'overall_trend': 'bullish' if signal['action'] == 'BUY' else 'bearish'
            }
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = explainer.format_signal_message(signal, analysis, mtf_analysis)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            status = self.signal_bot.get_status()
            message += f"\nüìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:</b>\n"
            message += f"‚Ä¢ –í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {status['signal_count']}\n"
            message += f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–≥–Ω–∞–ª: {time.strftime('%H:%M:%S')}\n"
            message += f"‚Ä¢ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signal['confidence']*100:.0f}%\n"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
            await self.send_message(message)
            logger.info(f"üì§ –°–∏–≥–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram: {signal['symbol']} {signal['action']}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏–≥–Ω–∞–ª–∞ –≤ Telegram: {e}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    TOKEN = "8243982780:AAHb72Vjf76iIbiS-khO0dLhkmgvsbKKobg"
    CHAT_ID = "5333574230"
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    bot = TelegramEnhancedBot(TOKEN, CHAT_ID)
    
    try:
        await bot.start()
    except KeyboardInterrupt:
        logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        await bot.stop()
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        await bot.stop()

if __name__ == "__main__":
    asyncio.run(main()) 