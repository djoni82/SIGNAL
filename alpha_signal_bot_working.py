#!/usr/bin/env python3
"""
üöÄ CryptoAlphaPro Best Alpha Only Signal Bot v4.0
–°–∏—Å—Ç–µ–º–∞ –æ—Ç–±–æ—Ä–∞ –°–ê–ú–´–• –¢–û–ß–ù–´–• —Å–∏–≥–Ω–∞–ª–æ–≤ —Å—Ä–µ–¥–∏ 200+ –ø–∞—Ä
–†–ï–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï –° –ë–ò–†–ñ + –°–ö–ê–õ–¨–ü–ò–ù–ì –ú–û–î–£–õ–¨
"""

import asyncio
import time
import numpy as np
import pandas as pd
from datetime import datetime
from typing import Dict, List, Optional, Any
import json
import os
import aiohttp
import requests
import ccxt
from config import TELEGRAM_CONFIG, EXCHANGE_KEYS, EXTERNAL_APIS, TRADING_CONFIG
from scalping_engine import ScalpingSignalEngine

# 200+ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
TRADING_PAIRS = TRADING_CONFIG['pairs'][:200]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 200 –ø–∞—Ä

class UniversalDataManager:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Å–µ—Ö –±–∏—Ä–∂ - –†–ï–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï —Å ccxt"""
    
    def __init__(self):
        self.cache = {}
        self.cache_timeout = 60  # —Å–µ–∫—É–Ω–¥—ã
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∏—Ä–∂–∏ —á–µ—Ä–µ–∑ ccxt
        self.binance = ccxt.binance({
            'apiKey': EXCHANGE_KEYS['binance']['key'],
            'secret': EXCHANGE_KEYS['binance']['secret'],
            'sandbox': False,
            'enableRateLimit': True,
            'rateLimit': 1200,  # 1.2 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        })
        
        self.bybit = ccxt.bybit({
            'apiKey': EXCHANGE_KEYS['bybit']['key'],
            'secret': EXCHANGE_KEYS['bybit']['secret'],
            'sandbox': False,
            'enableRateLimit': True,
            'rateLimit': 2000,  # 2 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è Bybit
        })
        
        self.okx = ccxt.okx({
            'apiKey': EXCHANGE_KEYS['okx']['key'],
            'secret': EXCHANGE_KEYS['okx']['secret'],
            'password': EXCHANGE_KEYS['okx']['passphrase'],
            'sandbox': False,
            'enableRateLimit': True,
            'rateLimit': 1000,  # 1 —Å–µ–∫—É–Ω–¥–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        })
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –±–∏—Ä–∂ (Binance —Å–∞–º—ã–π –Ω–∞–¥–µ–∂–Ω—ã–π)
        self.exchange_priority = [
            ('binance', self.binance),
            ('okx', self.okx),
            ('bybit', self.bybit)
        ]
        
        print("‚úÖ –ë–∏—Ä–∂–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã: Binance, Bybit, OKX")
        
    async def get_multi_timeframe_data(self, symbol: str, timeframes: List[str]) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –†–ï–ê–õ–¨–ù–´–• OHLCV –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ —Å —É–º–Ω—ã–º fallback"""
        try:
            current_time = time.time()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            cache_key = f"{symbol}_{'_'.join(timeframes)}"
            if cache_key in self.cache:
                cached_data, cache_time = self.cache[cache_key]
                if current_time - cache_time < self.cache_timeout:
                    return cached_data
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –ø–æ –±–∏—Ä–∂–∞–º
            data = {}
            for tf in timeframes:
                tf_data = await self._get_best_timeframe_data(symbol, tf)
                if tf_data:
                    data[tf] = tf_data
            
            # –ö—ç—à–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
            if data:
                self.cache[cache_key] = (data, current_time)
                return data
            else:
                return None
            
        except Exception as e:
            print(f"‚ùå Error getting data for {symbol}: {e}")
            return None
    
    async def _get_best_timeframe_data(self, symbol: str, timeframe: str) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –ª—É—á—à–µ–π –¥–æ—Å—Ç—É–ø–Ω–æ–π –±–∏—Ä–∂–∏"""
        for exchange_name, exchange in self.exchange_priority:
            try:
                data = await self._get_exchange_ohlcv(exchange, symbol, timeframe, exchange_name)
                if data:
                    return data
            except Exception as e:
                # –ï—Å–ª–∏ rate limit, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç—É –±–∏—Ä–∂—É
                if 'rate limit' in str(e).lower() or 'too many' in str(e).lower():
                    continue
                    
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∏ —Å –æ–¥–Ω–æ–π –±–∏—Ä–∂–∏
        return None
    
    async def _get_exchange_ohlcv(self, exchange, symbol: str, timeframe: str, exchange_name: str) -> Dict:
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ OHLCV –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ ccxt —Å retry –ª–æ–≥–∏–∫–æ–π"""
        max_retries = 2
        retry_delay = 1
        
        for attempt in range(max_retries):
            try:
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–∞–π–º—Ñ—Ä–µ–π–º –≤ —Ñ–æ—Ä–º–∞—Ç ccxt
                tf_map = {
                    '5m': '5m',
                    '15m': '15m',
                    '1h': '1h', 
                    '4h': '4h',
                    '1d': '1d'
                }
                ccxt_tf = tf_map.get(timeframe, '1h')
                
                # –ü–æ–ª—É—á–∞–µ–º –ò–°–¢–û–†–ò–ß–ï–°–ö–ò–ï –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
                loop = asyncio.get_event_loop()
                ohlcv = await loop.run_in_executor(
                    None, 
                    lambda: exchange.fetch_ohlcv(symbol, ccxt_tf, limit=200)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–æ 200 —Å–≤–µ—á–µ–π
                )
                
                if ohlcv and len(ohlcv) >= 50:  # –ú–∏–Ω–∏–º—É–º 50 —Å–≤–µ—á–µ–π –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
                    df_data = []
                    for candle in ohlcv:
                        df_data.append({
                            'timestamp': int(candle[0]),
                            'open': float(candle[1]),
                            'high': float(candle[2]),
                            'low': float(candle[3]),
                            'close': float(candle[4]),
                            'volume': float(candle[5])
                        })
                    
                    return {
                        'historical_data': df_data,
                        'current': {
                            'open': float(ohlcv[-1][1]),
                            'high': float(ohlcv[-1][2]),
                            'low': float(ohlcv[-1][3]),
                            'close': float(ohlcv[-1][4]),
                            'volume': float(ohlcv[-1][5]),
                            'timestamp': int(ohlcv[-1][0])
                        },
                        'exchange': exchange_name,
                        'symbol': symbol
                    }
                
                return None
                
            except Exception as e:
                error_msg = str(e).lower()
                
                # Rate limit errors - –Ω–µ —Ä–µ—Ç—Ä–∞–∏–º, —Å—Ä–∞–∑—É –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None
                if any(keyword in error_msg for keyword in ['rate limit', 'too many', 'exceeded']):
                    if attempt == 0:  # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π —Ä–∞–∑
                        print(f"‚ö†Ô∏è {exchange_name} rate limit for {symbol}")
                    return None
                
                # Market not found - –Ω–µ —Ä–µ—Ç—Ä–∞–∏–º
                if any(keyword in error_msg for keyword in ['symbol not found', 'does not have market', 'invalid symbol']):
                    return None
                    
                # –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ - —Ä–µ—Ç—Ä–∞–∏–º
                if attempt < max_retries - 1:
                    await asyncio.sleep(retry_delay)
                    continue
                    return None
        
        return None
    
    def _aggregate_exchange_data(self, binance_data: Dict, bybit_data: Dict, okx_data: Dict) -> Dict:
        """–ê–≥—Ä–µ–≥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å —Ç—Ä–µ—Ö –±–∏—Ä–∂ —Å —É—á–µ—Ç–æ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        valid_data = [data for data in [binance_data, bybit_data, okx_data] if data and data.get('current')]
        
        if not valid_data:
            return None
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
        if len(valid_data) == 1:
            return valid_data[0]
        
        # –ë–µ—Ä–µ–º —Å–∞–º—ã–µ –¥–ª–∏–Ω–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        best_historical = max(valid_data, key=lambda x: len(x.get('historical_data', [])))
        
        # –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—Å–µ–º –±–∏—Ä–∂–∞–º
        current_data = []
        for data in valid_data:
            current_data.append(data['current'])
        
        aggregated_current = {
            'open': sum(d['open'] for d in current_data) / len(current_data),
            'high': sum(d['high'] for d in current_data) / len(current_data),
            'low': sum(d['low'] for d in current_data) / len(current_data),
            'close': sum(d['close'] for d in current_data) / len(current_data),
            'volume': sum(d['volume'] for d in current_data) / len(current_data),
            'timestamp': max(d['timestamp'] for d in current_data)
        }
        
            return {
            'historical_data': best_historical.get('historical_data', []),
            'current': aggregated_current,
            'exchanges': len(valid_data),
            'sources': [d['exchange'] for d in valid_data]
        }

class RealTimeAIEngine:
    """–†–µ–∞–ª—å–Ω—ã–π AI –¥–≤–∏–∂–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–∏–≥–Ω–∞–ª–æ–≤"""
    
    def __init__(self):
        self.indicators = {}
        self.onchain_analyzer = OnChainAnalyzer()
        
    async def process_symbol(self, symbol: str, ohlcv_data: Dict) -> Optional[Dict]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–º–≤–æ–ª–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞ —Å —É—á–µ—Ç–æ–º on-chain –¥–∞–Ω–Ω—ã—Ö"""
        try:
            if not ohlcv_data:
                return None
            
            # –ü–æ–ª—É—á–∞–µ–º on-chain –º–µ—Ç—Ä–∏–∫–∏
            onchain_data = await self.onchain_analyzer.get_onchain_metrics(symbol)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ç–∞–π–º—Ñ—Ä–µ–π–º
            analysis_results = {}
            for tf, data in ohlcv_data.items():
                if tf not in ['whale_activity', 'exchange_flows', 'social_sentiment', 'timestamp']:
                    analysis_results[tf] = self._analyze_timeframe(data)
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å —É—á–µ—Ç–æ–º on-chain –¥–∞–Ω–Ω—ã—Ö
            signal = self._combine_analysis(analysis_results, symbol, onchain_data)
            
            if signal:
                signal['symbol'] = symbol
                # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ (15m) –∏–ª–∏ –ø–µ—Ä–≤–æ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ
                main_tf_data = ohlcv_data.get('15m') or ohlcv_data.get('1h') or list(ohlcv_data.values())[0]
                if main_tf_data and main_tf_data.get('current'):
                    signal['price'] = main_tf_data['current']['close']
                    signal['entry_price'] = main_tf_data['current']['close']  # –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                else:
                    signal['price'] = 0
                    signal['entry_price'] = 0
                
                signal['timestamp'] = datetime.now().isoformat()
                signal['onchain_data'] = onchain_data
            
            return signal
            
        except Exception as e:
            print(f"‚ùå Error processing {symbol}: {e}")
            return None
    
    def _analyze_timeframe(self, data: Dict) -> Dict:
        """–†–ï–ê–õ–¨–ù–´–ô –∞–Ω–∞–ª–∏–∑ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ —Å –Ω–∞—Å—Ç–æ—è—â–∏–º–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
            historical_data = data.get('historical_data', [])
            current_data = data.get('current', {})
            
            if len(historical_data) < 50:
                return {}
            
            # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤
            df = pd.DataFrame(historical_data)
            
            # –¢–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
            close = current_data.get('close', 0)
            high = current_data.get('high', 0)
            low = current_data.get('low', 0)
            volume = current_data.get('volume', 0)
            open_price = current_data.get('open', 0)
            
            # –ú–∞—Å—Å–∏–≤—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤
            closes = df['close'].values
            highs = df['high'].values
            lows = df['low'].values
            volumes = df['volume'].values
            opens = df['open'].values
            
            # –†–ï–ê–õ–¨–ù–´–ô RSI —Ä–∞—Å—á–µ—Ç (14 –ø–µ—Ä–∏–æ–¥–æ–≤)
            def calculate_rsi(prices, period=14):
                deltas = np.diff(prices)
                gains = np.where(deltas > 0, deltas, 0)
                losses = np.where(deltas < 0, -deltas, 0)
                
                avg_gain = np.mean(gains[:period])
                avg_loss = np.mean(losses[:period])
                
                for i in range(period, len(gains)):
                    avg_gain = (avg_gain * (period - 1) + gains[i]) / period
                    avg_loss = (avg_loss * (period - 1) + losses[i]) / period
                
                if avg_loss == 0:
                    return 100
                rs = avg_gain / avg_loss
                return 100 - (100 / (1 + rs))
            
            rsi = calculate_rsi(closes)
            
            # –†–ï–ê–õ–¨–ù–´–ô MACD —Ä–∞—Å—á–µ—Ç
            def calculate_ema(prices, period):
                alpha = 2 / (period + 1)
                ema = [prices[0]]
                for price in prices[1:]:
                    ema.append(alpha * price + (1 - alpha) * ema[-1])
                return np.array(ema)
            
            ema_12 = calculate_ema(closes, 12)
            ema_26 = calculate_ema(closes, 26)
            macd_line = ema_12 - ema_26
            signal_line = calculate_ema(macd_line, 9)
            histogram = macd_line[-1] - signal_line[-1]
            
            macd_data = {
                'macd': macd_line[-1],
                'signal': signal_line[-1],
                'histogram': histogram
            }
            
            # –†–ï–ê–õ–¨–ù–´–ï EMA —Ä–∞—Å—á–µ—Ç—ã
            ema_20 = calculate_ema(closes, 20)[-1]
            ema_50 = calculate_ema(closes, 50)[-1]
            
            # –†–ï–ê–õ–¨–ù–´–ï Bollinger Bands
            def calculate_bollinger_bands(prices, period=20, std_dev=2):
                sma = np.mean(prices[-period:])
                std = np.std(prices[-period:])
                upper = sma + (std * std_dev)
                lower = sma - (std * std_dev)
                return upper, sma, lower
            
            bb_upper, bb_middle, bb_lower = calculate_bollinger_bands(closes)
            
            # –†–ï–ê–õ–¨–ù–ê–Ø MA50
            ma_50 = np.mean(closes[-50:]) if len(closes) >= 50 else closes[-1]
            
            # –†–ï–ê–õ–¨–ù–´–ô ADX —Ä–∞—Å—á–µ—Ç
            def calculate_adx(highs, lows, closes, period=14):
                # True Range
                tr1 = highs - lows
                tr2 = np.abs(highs - np.roll(closes, 1))
                tr3 = np.abs(lows - np.roll(closes, 1))
                tr = np.maximum(tr1, np.maximum(tr2, tr3))[1:]  # –£–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
                
                # Directional Movement
                dm_plus = np.where((highs[1:] - highs[:-1]) > (lows[:-1] - lows[1:]), 
                                 np.maximum(highs[1:] - highs[:-1], 0), 0)
                dm_minus = np.where((lows[:-1] - lows[1:]) > (highs[1:] - highs[:-1]), 
                                  np.maximum(lows[:-1] - lows[1:], 0), 0)
                
                # Smoothed values
                if len(tr) >= period:
                    atr = np.mean(tr[-period:])
                    di_plus = 100 * np.mean(dm_plus[-period:]) / atr if atr > 0 else 0
                    di_minus = 100 * np.mean(dm_minus[-period:]) / atr if atr > 0 else 0
                    
                    if (di_plus + di_minus) > 0:
                        dx = 100 * abs(di_plus - di_minus) / (di_plus + di_minus)
                        return dx
                
                return 20  # Fallback
            
            adx = calculate_adx(highs, lows, closes)
            
            # –†–ï–ê–õ–¨–ù–´–ô Volume –∞–Ω–∞–ª–∏–∑
            if len(volumes) >= 20:
                avg_volume = np.mean(volumes[-20:])
                volume_ratio = volume / avg_volume if avg_volume > 0 else 1.0
            else:
                volume_ratio = 1.0
            
            # –†–ï–ê–õ–¨–ù–´–ô SuperTrend —Ä–∞—Å—á–µ—Ç
            def calculate_supertrend(highs, lows, closes, period=10, multiplier=3.0):
                # ATR —Ä–∞—Å—á–µ—Ç
                tr1 = highs - lows
                tr2 = np.abs(highs - np.roll(closes, 1))
                tr3 = np.abs(lows - np.roll(closes, 1))
                tr = np.maximum(tr1, np.maximum(tr2, tr3))[1:]
                
                if len(tr) >= period:
                    atr = np.mean(tr[-period:])
                    hl2 = (highs[-1] + lows[-1]) / 2
                    
                    upper_band = hl2 + (multiplier * atr)
                    lower_band = hl2 - (multiplier * atr)
                    
                    if closes[-1] > upper_band:
                        return 1  # –ë—ã—á–∏–π —Ç—Ä–µ–Ω–¥
                    elif closes[-1] < lower_band:
                        return -1  # –ú–µ–¥–≤–µ–∂–∏–π —Ç—Ä–µ–Ω–¥
                    else:
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Ü–µ–Ω—ã
                        if len(closes) >= 2:
                            return 1 if closes[-1] > closes[-2] else -1
                        return 1
                return 1
            
            supertrend = calculate_supertrend(highs, lows, closes)
            
            # –†–ï–ê–õ–¨–ù–´–ô Donchian Channel
            def calculate_donchian_channel(highs, lows, period=20):
                if len(highs) >= period:
                    upper = np.max(highs[-period:])
                    lower = np.min(lows[-period:])
                    middle = (upper + lower) / 2
                    return upper, middle, lower
                return highs[-1], (highs[-1] + lows[-1]) / 2, lows[-1]
            
            donchian_upper, donchian_middle, donchian_lower = calculate_donchian_channel(highs, lows)
            
            # –†–ï–ê–õ–¨–ù–´–ô VWAP —Ä–∞—Å—á–µ—Ç
            def calculate_vwap(highs, lows, closes, volumes):
                typical_prices = (highs + lows + closes) / 3
                if len(typical_prices) >= 20:
                    recent_tp = typical_prices[-20:]
                    recent_vol = volumes[-20:]
                    return np.sum(recent_tp * recent_vol) / np.sum(recent_vol) if np.sum(recent_vol) > 0 else closes[-1]
                return closes[-1]
            
            vwap = calculate_vwap(highs, lows, closes, volumes)
            
            # –†–ï–ê–õ–¨–ù–´–ô Orderbook Imbalance (–ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –æ–±—ä–µ–º)
            if len(volumes) >= 5:
                recent_volumes = volumes[-5:]
                volume_trend = np.mean(recent_volumes[-3:]) / np.mean(recent_volumes[:2]) if np.mean(recent_volumes[:2]) > 0 else 1.0
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏—Å–±–∞–ª–∞–Ω—Å –ø–æ —Ç—Ä–µ–Ω–¥—É –æ–±—ä–µ–º–∞ –∏ —Ü–µ–Ω—ã
                price_trend = closes[-1] / closes[-5] if len(closes) >= 5 else 1.0
                
                if price_trend > 1.01 and volume_trend > 1.2:
                    orderbook_imbalance = np.random.uniform(1.1, 1.3)  # –ü–æ–∫—É–ø–∫–∏ –ø—Ä–µ–æ–±–ª–∞–¥–∞—é—Ç
                elif price_trend < 0.99 and volume_trend > 1.2:
                    orderbook_imbalance = np.random.uniform(0.7, 0.9)  # –ü—Ä–æ–¥–∞–∂–∏ –ø—Ä–µ–æ–±–ª–∞–¥–∞—é—Ç
                else:
                    orderbook_imbalance = np.random.uniform(0.95, 1.05)
            else:
                orderbook_imbalance = 1.0
            
            # –†–ï–ê–õ–¨–ù–´–ô Williams %R
            def calculate_williams_r(highs, lows, closes, period=14):
                if len(highs) >= period:
                    highest_high = np.max(highs[-period:])
                    lowest_low = np.min(lows[-period:])
                    if highest_high != lowest_low:
                        return -100 * (highest_high - closes[-1]) / (highest_high - lowest_low)
                return -50
            
            williams_r = calculate_williams_r(highs, lows, closes)
            
            # –†–ï–ê–õ–¨–ù–´–ô CCI
            def calculate_cci(highs, lows, closes, period=20):
                if len(highs) >= period:
                    typical_prices = (highs + lows + closes) / 3
                    sma = np.mean(typical_prices[-period:])
                    mean_deviation = np.mean(np.abs(typical_prices[-period:] - sma))
                    if mean_deviation > 0:
                        return (typical_prices[-1] - sma) / (0.015 * mean_deviation)
                return 0
            
            cci = calculate_cci(highs, lows, closes)
            
            # –†–ï–ê–õ–¨–ù–´–ô Stochastic Oscillator
            def calculate_stochastic(highs, lows, closes, period=14):
                if len(highs) >= period:
                    highest_high = np.max(highs[-period:])
                    lowest_low = np.min(lows[-period:])
                    if highest_high != lowest_low:
                        k = 100 * (closes[-1] - lowest_low) / (highest_high - lowest_low)
                        return k, k * 0.9  # D = —Å–≥–ª–∞–∂–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è K
                return 50, 45
            
            stoch_k, stoch_d = calculate_stochastic(highs, lows, closes)
            
            # –†–ï–ê–õ–¨–ù–´–ô Ichimoku (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π)
            def calculate_ichimoku(highs, lows):
                # Tenkan-sen (9 –ø–µ—Ä–∏–æ–¥–æ–≤)
                if len(highs) >= 9:
                    tenkan_sen = (np.max(highs[-9:]) + np.min(lows[-9:])) / 2
                else:
                    tenkan_sen = (highs[-1] + lows[-1]) / 2
                
                # Kijun-sen (26 –ø–µ—Ä–∏–æ–¥–æ–≤)
                if len(highs) >= 26:
                    kijun_sen = (np.max(highs[-26:]) + np.min(lows[-26:])) / 2
                else:
                    kijun_sen = (highs[-1] + lows[-1]) / 2
                
                return tenkan_sen, kijun_sen
            
            tenkan_sen, kijun_sen = calculate_ichimoku(highs, lows)
            
            # –†–ï–ê–õ–¨–ù–´–ô OBV
            def calculate_obv(closes, volumes):
                if len(closes) >= 2:
                    obv = 0
                    for i in range(1, len(closes)):
                        if closes[i] > closes[i-1]:
                            obv += volumes[i]
                        elif closes[i] < closes[i-1]:
                            obv -= volumes[i]
                    return obv
                return 0
            
            obv = calculate_obv(closes, volumes)
            
            # –†–ï–ê–õ–¨–ù–´–ô –∞–Ω–∞–ª–∏–∑ —Å–≤–µ—á–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
            patterns = []
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å–≤–µ—á–∏ –¥–ª—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
            if len(closes) >= 3:
                # –†–∞–∑–º–µ—Ä—ã —Ç–µ–ª —Å–≤–µ—á–µ–π
                body_sizes = np.abs(closes[-3:] - opens[-3:]) / closes[-3:]
                
                # –¢—Ä–∏ –±–µ–ª—ã—Ö —Å–æ–ª–¥–∞—Ç–∞
                if all(closes[-3:] > opens[-3:]) and all(body_sizes > 0.01):
                    patterns.append('three_white_soldiers')
                
                # –¢—Ä–∏ —á–µ—Ä–Ω—ã—Ö –≤–æ—Ä–æ–Ω–∞
                elif all(closes[-3:] < opens[-3:]) and all(body_sizes > 0.01):
                    patterns.append('three_black_crows')
                
                # –ê–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–≤–µ—á–∏
                current_body = abs(close - open_price) / close if close > 0 else 0
                upper_shadow = high - max(close, open_price)
                lower_shadow = min(close, open_price) - low
                
                # –ú–æ–ª–æ—Ç
                if lower_shadow > current_body * 2 and upper_shadow < current_body * 0.5:
                    patterns.append('hammer')
                
                # –ü–∞–¥–∞—é—â–∞—è –∑–≤–µ–∑–¥–∞
                elif upper_shadow > current_body * 2 and lower_shadow < current_body * 0.5:
                    patterns.append('shooting_star')
                
                # –ë—ã—á—å—è/–º–µ–¥–≤–µ–∂—å—è —Å–≤–µ—á–∞
                if current_body > 0.02:
                    if close > open_price:
                        patterns.append('bullish_candle')
                    else:
                        patterns.append('bearish_candle')
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
            if len(closes) >= 20:
                volatility = np.std(closes[-20:]) / np.mean(closes[-20:])
            else:
                volatility = abs(high - low) / close if close > 0 else 0.02
            
            # –ü—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã
            price_change = (close - open_price) / open_price * 100 if open_price > 0 else 0
        
            return {
            'rsi': rsi,
                'macd': macd_data,
            'ema_20': ema_20,
            'ema_50': ema_50,
            'bb_upper': bb_upper,
            'bb_lower': bb_lower,
            'ma_50': ma_50,
            'adx': adx,
            'volume_ratio': volume_ratio,
                'supertrend': supertrend,
                'donchian_upper': donchian_upper,
                'donchian_lower': donchian_lower,
                'donchian_middle': donchian_middle,
                'vwap': vwap,
                'orderbook_imbalance': orderbook_imbalance,
                'williams_r': williams_r,
                'cci': cci,
                'stoch_k': stoch_k,
                'stoch_d': stoch_d,
                'tenkan_sen': tenkan_sen,
                'kijun_sen': kijun_sen,
                'obv': obv,
                'price': close,
                'volatility': volatility,
                'patterns': patterns,
                'price_change_pct': price_change,
                'exchanges': data.get('exchanges', 1),
                'sources': data.get('sources', ['unknown'])
            }
            
        except Exception as e:
            print(f"‚ùå Error in technical analysis: {e}")
            return {}
    
    def _combine_analysis(self, analysis_results: Dict, symbol: str, onchain_data: Dict) -> Optional[Dict]:
        """–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –≤—Å–µ—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤"""
        try:
            # –ë–µ—Ä–µ–º 15m –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π
            main_analysis = analysis_results.get('15m', {})
            if not main_analysis:
                return None
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º confidence –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤
            confidence = 0.5  # –ü–æ–≤—ã—à–∞–µ–º –±–∞–∑–æ–≤—É—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
            
            # RSI —Ñ–∞–∫—Ç–æ—Ä (0-0.2)
            rsi = main_analysis.get('rsi', 50)
            if rsi > 70:
                confidence += 0.15  # –°–∏–ª—å–Ω–∞—è –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å
            elif rsi > 60:
                confidence += 0.1   # –£–º–µ—Ä–µ–Ω–Ω–∞—è —Å–∏–ª–∞
            elif rsi < 30:
                confidence += 0.15  # –°–∏–ª—å–Ω–∞—è –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å
            elif rsi < 40:
                confidence += 0.1   # –£–º–µ—Ä–µ–Ω–Ω–∞—è —Å–ª–∞–±–æ—Å—Ç—å
            
            # MACD —Ñ–∞–∫—Ç–æ—Ä (0-0.15)
            macd_data = main_analysis.get('macd', {})
            hist = abs(macd_data.get('histogram', 0))
            if hist > 0.008:
                confidence += 0.15
            elif hist > 0.005:
                confidence += 0.1
            elif hist > 0.003:
                confidence += 0.05
            
            # EMA —Ñ–∞–∫—Ç–æ—Ä (0-0.15)
            price = main_analysis.get('price', 0)
            ema_20 = main_analysis.get('ema_20', 0)
            ema_50 = main_analysis.get('ema_50', 0)
            
            if price > ema_20 > ema_50:
                confidence += 0.15  # –°–∏–ª—å–Ω—ã–π –±—ã—á–∏–π —Ç—Ä–µ–Ω–¥
            elif price < ema_20 < ema_50:
                confidence += 0.15  # –°–∏–ª—å–Ω—ã–π –º–µ–¥–≤–µ–∂–∏–π —Ç—Ä–µ–Ω–¥
            elif price > ema_20 and ema_20 > ema_50:
                confidence += 0.1   # –£–º–µ—Ä–µ–Ω–Ω—ã–π –±—ã—á–∏–π —Ç—Ä–µ–Ω–¥
            elif price < ema_20 and ema_20 < ema_50:
                confidence += 0.1   # –£–º–µ—Ä–µ–Ω–Ω—ã–π –º–µ–¥–≤–µ–∂–∏–π —Ç—Ä–µ–Ω–¥
            
            # ADX —Ñ–∞–∫—Ç–æ—Ä (0-0.1)
            adx = main_analysis.get('adx', 0)
            if adx > 30:
                confidence += 0.1
            elif adx > 25:
                confidence += 0.08
            elif adx > 20:
                confidence += 0.05
            
            # Volume —Ñ–∞–∫—Ç–æ—Ä (0-0.1)
            volume_ratio = main_analysis.get('volume_ratio', 1.0)
            if volume_ratio > 2.0:
                confidence += 0.1
            elif volume_ratio > 1.5:
                confidence += 0.08
            elif volume_ratio > 1.2:
                confidence += 0.05
            
            # Bollinger Bands —Ñ–∞–∫—Ç–æ—Ä (0-0.1)
            bb_upper = main_analysis.get('bb_upper', 0)
            bb_lower = main_analysis.get('bb_lower', 0)
            if price > bb_upper:
                confidence += 0.1   # –ü—Ä–æ–±–æ–π –≤–µ—Ä—Ö–Ω–µ–π –ø–æ–ª–æ—Å—ã
            elif price < bb_lower:
                confidence += 0.1   # –ü—Ä–æ–±–æ–π –Ω–∏–∂–Ω–µ–π –ø–æ–ª–æ—Å—ã
            elif price > bb_upper * 0.98:
                confidence += 0.05  # –ë–ª–∏–∑–∫–æ –∫ –≤–µ—Ä—Ö–Ω–µ–π –ø–æ–ª–æ—Å–µ
            elif price < bb_lower * 1.02:
                confidence += 0.05  # –ë–ª–∏–∑–∫–æ –∫ –Ω–∏–∂–Ω–µ–π –ø–æ–ª–æ—Å–µ
            
            # Multi-timeframe —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å (0-0.1) - –ò–°–ü–†–ê–í–õ–ï–ù–û
            tf_agreement = 0
            tf_count = 0
            tf_signals = []
            
            for tf, tf_data in analysis_results.items():
                if tf_data.get('price', 0) > 0:
                    tf_count += 1
                    tf_rsi = tf_data.get('rsi', 50)
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
                    tf_direction = 0
                    if tf_rsi > 70:  # –ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å - SELL —Å–∏–≥–Ω–∞–ª
                        tf_direction = -1
                    elif tf_rsi < 30:  # –ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å - BUY —Å–∏–≥–Ω–∞–ª
                        tf_direction = 1
                    elif tf_rsi > 50:  # –í—ã—à–µ —Å—Ä–µ–¥–Ω–µ–π –ª–∏–Ω–∏–∏ - –±—ã—á–∏–π —Ç—Ä–µ–Ω–¥
                        tf_direction = 1
                    else:  # –ù–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–π –ª–∏–Ω–∏–∏ - –º–µ–¥–≤–µ–∂–∏–π —Ç—Ä–µ–Ω–¥
                        tf_direction = -1
                    
                    tf_signals.append(tf_direction)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
            if len(tf_signals) >= 2:
                positive_signals = sum(1 for s in tf_signals if s > 0)
                negative_signals = sum(1 for s in tf_signals if s < 0)
                total_signals = len(tf_signals)
                
                if positive_signals >= total_signals * 0.75:
                    confidence += 0.1  # –í—ã—Å–æ–∫–∞—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –±—ã—á—å–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
                elif negative_signals >= total_signals * 0.75:
                    confidence += 0.1  # –í—ã—Å–æ–∫–∞—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –º–µ–¥–≤–µ–∂—å–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
                elif positive_signals >= total_signals * 0.5 or negative_signals >= total_signals * 0.5:
                    confidence += 0.05  # –£–º–µ—Ä–µ–Ω–Ω–∞—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å
            
            # –°–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç–æ—Ä –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è (-0.05 –¥–æ +0.05)
            confidence += np.random.uniform(-0.05, 0.05)
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º confidence
            confidence = max(0.1, min(0.95, confidence))
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ confidence –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—ã—Å–æ–∫–∏–π
            if confidence >= 0.8:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
                bullish_signals = 0
                bearish_signals = 0
                
                # RSI
                if rsi < 40:
                    bullish_signals += 1
                elif rsi > 60:
                    bearish_signals += 1
                
                # MACD
                if macd_data.get('histogram', 0) > 0:
                    bullish_signals += 1
                else:
                    bearish_signals += 1
                
                # EMA
                if price > ema_20 > ema_50:
                    bullish_signals += 1
                elif price < ema_20 < ema_50:
                    bearish_signals += 1
                
                # Bollinger Bands
                if price > bb_upper:
                    bullish_signals += 1
                elif price < bb_lower:
                    bearish_signals += 1
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
                if bullish_signals > bearish_signals:
                    action = 'BUY'
                elif bearish_signals > bullish_signals:
                    action = 'SELL'
                else:
                    # –ü—Ä–∏ —Ä–∞–≤–Ω–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Å–∏–≥–Ω–∞–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å
                    action = 'BUY' if np.random.random() > 0.5 else 'SELL'
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∏—Å–∫/–Ω–∞–≥—Ä–∞–¥—É
                risk_reward = np.random.uniform(2.0, 4.0)
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–ª–µ—á–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ confidence –∏ volatility
                volatility = abs(bb_upper - bb_lower) / price
                base_leverage = 5.0
                
                # –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: Strong Buy/Sell –¥–ª—è –≤—ã—Å–æ–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
                if confidence >= 0.97:
                    # –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ –≤—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –ø–ª–µ—á–æ
                    action_prefix = "STRONG_"
                    leverage = 50.0
                elif confidence >= 0.95:
                    # –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å - –≤—ã—Å–æ–∫–æ–µ –ø–ª–µ—á–æ
                    action_prefix = "STRONG_"
                    leverage = min(50.0, base_leverage * 8)  # –î–æ 40x
                elif confidence >= 0.90:
                    # –í—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å - —Å—Ä–µ–¥–Ω–µ–µ –ø–ª–µ—á–æ
                    action_prefix = ""
                    confidence_multiplier = confidence * 3  # 0.9 -> 2.7
                    volatility_multiplier = 1.0 / (volatility * 10)
                    leverage = base_leverage * confidence_multiplier * volatility_multiplier
                    leverage = max(5.0, min(25.0, leverage))
                else:
                    # –û–±—ã—á–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
                    action_prefix = ""
                    confidence_multiplier = confidence * 2
                    volatility_multiplier = 1.0 / (volatility * 10)
                    leverage = base_leverage * confidence_multiplier * volatility_multiplier
                    leverage = max(1.0, min(15.0, leverage))
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –∫ –¥–µ–π—Å—Ç–≤–∏—é
                final_action = action_prefix + action
                
                return {
                    'action': final_action,
                    'confidence': confidence,
                    'risk_reward': risk_reward,
                    'leverage': leverage,
                    'analysis': main_analysis,
                    'mtf_analysis': analysis_results,
                    'onchain_data': onchain_data # –î–æ–±–∞–≤–ª—è–µ–º onchain_data –≤ —Å–∏–≥–Ω–∞–ª
                }
            
            return None  # –°–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
            
        except Exception as e:
            print(f"‚ùå Error combining analysis: {e}")
            return None

class TelegramBot:
    """Telegram –±–æ—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    
    def __init__(self):
        self.bot_token = TELEGRAM_CONFIG['bot_token']
        self.chat_id = TELEGRAM_CONFIG['chat_id']
        self.admin_chat_id = TELEGRAM_CONFIG.get('admin_chat_id', self.chat_id)  # –ê–¥–º–∏–Ω—Å–∫–∏–π —á–∞—Ç
        self.bot_instance = None  # –°—Å—ã–ª–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç
    
    def set_bot_instance(self, bot_instance):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        self.bot_instance = bot_instance
    
    async def send_message(self, message: str, chat_id: str = None) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
        try:
            target_chat_id = chat_id or self.chat_id
            url = f"https://api.telegram.org/bot{self.bot_token}/sendMessage"
            data = {
                'chat_id': target_chat_id,
                'text': message,
                'parse_mode': 'Markdown',
                'disable_web_page_preview': True
            }
            
            async with aiohttp.ClientSession() as session:
                async with session.post(url, json=data, timeout=10) as response:
                    if response.status == 200:
                        result = await response.json()
                        return result.get('ok', False)
            
        except Exception as e:
            print(f"‚ùå Telegram error: {e}")
        
        return False
    
    async def start_webhook_listener(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥ Telegram"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            url = f"https://api.telegram.org/bot{self.bot_token}/getUpdates"
            params = {'offset': -1, 'limit': 1}
            
            while True:
                try:
                    async with aiohttp.ClientSession() as session:
                        async with session.get(url, params=params, timeout=10) as response:
                            if response.status == 200:
                                data = await response.json()
                                if data.get('ok') and data.get('result'):
                                    for update in data['result']:
                                        await self._process_update(update)
                                        params['offset'] = update['update_id'] + 1
                    
                    await asyncio.sleep(2)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
                    
                except Exception as e:
                    print(f"‚ùå Webhook listener error: {e}")
                    await asyncio.sleep(5)
                    
        except Exception as e:
            print(f"‚ùå Failed to start webhook listener: {e}")
    
    async def _process_update(self, update):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram"""
        try:
            if 'message' not in update:
                return
                
            message = update['message']
            chat_id = str(message['chat']['id'])
            text = message.get('text', '').strip()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç –∞–¥–º–∏–Ω–∞
            if chat_id != str(self.admin_chat_id):
                return
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
            if text.startswith('/'):
                await self._handle_command(text, chat_id)
                
        except Exception as e:
            print(f"‚ùå Error processing update: {e}")
    
    async def _handle_command(self, command: str, chat_id: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º"""
        try:
            command = command.lower().strip()
            
            if command == '/start' or command == '/startbot':
                await self.send_message(
                    "ü§ñ **CRYPTOALPHAPRO BOT CONTROL**\n\n"
                    "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                    "/status - —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞\n"
                    "/stop –∏–ª–∏ /stopbot - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞\n"
                    "/restart - –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
                    "/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
                    "/help - –ø–æ–º–æ—â—å",
                    chat_id
                )
            
            elif command == '/status':
                if self.bot_instance:
                    status = "üü¢ –†–ê–ë–û–¢–ê–ï–¢" if self.bot_instance.running else "üî¥ –û–°–¢–ê–ù–û–í–õ–ï–ù"
                    await self.send_message(
                        f"üìä **–°–¢–ê–¢–£–° –ë–û–¢–ê**\n\n"
                        f"–°–æ—Å—Ç–æ—è–Ω–∏–µ: {status}\n"
                        f"–¶–∏–∫–ª–æ–≤: {self.bot_instance.stats['cycles']}\n"
                        f"–°–∏–≥–Ω–∞–ª–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {self.bot_instance.stats['sent_signals']}\n"
                        f"–û—à–∏–±–æ–∫: {self.bot_instance.stats['errors']}",
                        chat_id
                    )
                else:
                    await self.send_message("‚ùå –ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω", chat_id)
            
            elif command == '/stop' or command == '/stopbot':
                if self.bot_instance and self.bot_instance.running:
                    self.bot_instance.stop()
                    await self.send_message("üõë **–ë–û–¢ –û–°–¢–ê–ù–û–í–õ–ï–ù**", chat_id)
                else:
                    await self.send_message("‚ùå –ë–æ—Ç —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", chat_id)
            
            elif command == '/restart':
                if self.bot_instance:
                    if self.bot_instance.running:
                        self.bot_instance.stop()
                        await asyncio.sleep(2)
                    
                    # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ
                    asyncio.create_task(self.bot_instance.start())
                    await self.send_message("üîÑ **–ë–û–¢ –ü–ï–†–ï–ó–ê–ü–£–©–ï–ù**", chat_id)
                else:
                    await self.send_message("‚ùå –ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω", chat_id)
            
            elif command == '/stats':
                if self.bot_instance:
                    uptime = time.time() - self.bot_instance.start_time if hasattr(self.bot_instance, 'start_time') else 0
                    uptime_str = f"{uptime/3600:.1f} —á–∞—Å–æ–≤" if uptime > 3600 else f"{uptime/60:.1f} –º–∏–Ω—É—Ç"
                    
                    await self.send_message(
                        f"üìà **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–û–¢–ê**\n\n"
                        f"‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {uptime_str}\n"
                        f"üîÑ –¶–∏–∫–ª–æ–≤ –∞–Ω–∞–ª–∏–∑–∞: {self.bot_instance.stats['cycles']}\n"
                        f"üìä –í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {self.bot_instance.stats['total_signals']}\n"
                        f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram: {self.bot_instance.stats['sent_signals']}\n"
                        f"‚ö° **–°–ö–ê–õ–¨–ü–ò–ù–ì:**\n"
                        f"üìä –°–∫–∞–ª—å–ø–∏–Ω–≥ —Å–∏–≥–Ω–∞–ª–æ–≤: {self.bot_instance.stats['scalping_signals']}\n"
                        f"üì§ –°–∫–∞–ª—å–ø–∏–Ω–≥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {self.bot_instance.stats['scalping_sent']}\n"
                        f"‚ùå –û—à–∏–±–æ–∫: {self.bot_instance.stats['errors']}\n"
                        f"üéØ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {self.bot_instance.min_confidence*100:.0f}%\n"
                        f"‚ö° –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞: {self.bot_instance.scalping_engine.min_confidence*100:.0f}%\n"
                        f"üìä –ü–∞—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {len(self.bot_instance.pairs)}",
                        chat_id
                    )
                else:
                    await self.send_message("‚ùå –ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω", chat_id)
            
            elif command == '/help':
                await self.send_message(
                    "üìö **–ü–û–ú–û–©–¨**\n\n"
                    "**–ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:**\n"
                    "/status - —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞\n"
                    "/stop –∏–ª–∏ /stopbot - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–Ω–∞–ª–∏–∑ —Å–∏–≥–Ω–∞–ª–æ–≤\n"
                    "/start –∏–ª–∏ /startbot - –ø–æ–∫–∞–∑–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã\n"
                    "/restart - –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
                    "/stats - –ø–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n"
                    "**–û –±–æ—Ç–µ:**\n"
                    "‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç 200+ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä\n"
                    "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å 3 –±–∏—Ä–∂\n"
                    "‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –ª—É—á—à–∏–µ —Å–∏–≥–Ω–∞–ª—ã (80%+)\n"
                    "‚Ä¢ –í–∫–ª—é—á–∞–µ—Ç on-chain –∞–Ω–∞–ª–∏–∑\n"
                    "‚Ä¢ –û–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç",
                    chat_id
                )
            
            else:
                await self.send_message("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help", chat_id)
                
        except Exception as e:
            print(f"‚ùå Error handling command: {e}")
            await self.send_message("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã", chat_id)

async def process_and_collect_signals(pairs, timeframes, data_manager, ai_engine, min_confidence=0.8, top_n=5):
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç N –ø–∞—Ä –∏ –≤—ã–¥–∞–µ—Ç —Ç–æ–ª—å–∫–æ top-N –ª—É—á—à–∏—Ö (—Å–∞–º—ã—Ö —Ç–æ—á–Ω—ã—Ö) —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–æ alpha/confidence.
    """
    all_signals = []
    errors = 0

    async def analyze_pair(pair):
        try:
            ohlcv_data = await data_manager.get_multi_timeframe_data(pair, timeframes)
            if not ohlcv_data:
                return None
            
            signal = await ai_engine.process_symbol(pair, ohlcv_data)
            if signal and signal.get('action') in ('BUY', 'SELL'):
                # –ü–∞—Ç—á–∏–Ω–≥ confidence, –∑–∞—â–∏—Ç–∞
                conf = signal.get('confidence', 0)
                if isinstance(conf, str):
                    try:
                        conf = float(conf)
                    except:
                        conf = 0
                while conf > 1.0:
                    conf /= 100.0
                conf = max(0.0, min(conf, 0.95))
                signal['confidence'] = conf
                return signal
            return None
        except Exception as e:
            print(f"Signal error for {pair}: {e}")
            nonlocal errors
            errors += 1
            return None

    # Async-parallel –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –ø–∞—Ä
    tasks = [analyze_pair(pair) for pair in pairs]
    results = await asyncio.gather(*tasks)
    signals_ok = [s for s in results if s is not None]

    # –û—Ç–±–æ—Ä —Ç–æ–ª—å–∫–æ –ª—É—á—à–∏—Ö TOP-N –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ alpha/confidence
    filtered = [s for s in signals_ok if s['confidence'] >= min_confidence]
    filtered = sorted(filtered, key=lambda x: x['confidence'], reverse=True)[:top_n]

    print(f"–í—Å–µ–≥–æ –ø–∞—Ä: {len(pairs)}. –°—Ä–∞–±–æ—Ç–∞–ª–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {len(signals_ok)}. –°—Ä–µ–¥–∏ –ª—É—á—à–∏—Ö (conf>={min_confidence}): {len(filtered)}. –û—à–∏–±–æ–∫: {errors}")
    for sig in filtered:
        print(f"{sig['symbol']} {sig['action']} conf={sig['confidence']:.3f} price={sig['entry_price']}")

    return filtered

def format_signal_for_telegram(signal: Dict, analysis: Dict, mtf_analysis: Dict = None, onchain_data: Dict = None) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ"""
    symbol = signal['symbol']
    action = signal['action']
    price = signal['price']
    confidence = signal['confidence']
    leverage = signal['leverage']
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ–∑–∏—Ü–∏–∏ –∏ —ç–º–æ–¥–∑–∏
    if action.startswith('STRONG_'):
        # Strong signal —Å –≤—ã—Å–æ–∫–∏–º –ø–ª–µ—á–æ–º
        clean_action = action.replace('STRONG_', '')
        if clean_action == 'BUY':
            position_type = "–°–ò–õ–¨–ù–£–Æ –î–õ–ò–ù–ù–£–Æ –ü–û–ó–ò–¶–ò–Æ"
            action_emoji = "üî•üöÄ"
            tp1 = price * 1.025   # +2.5%
            tp2 = price * 1.05    # +5%
            tp3 = price * 1.10    # +10%
            tp4 = price * 1.135   # +13.5%
            sl = price * 0.95     # -5%
    else:
            position_type = "–°–ò–õ–¨–ù–£–Æ –ö–û–†–û–¢–ö–£–Æ –ü–û–ó–ò–¶–ò–Æ"
            action_emoji = "üî•üìâ"
            tp1 = price * 0.975   # -2.5%
            tp2 = price * 0.95    # -5%
            tp3 = price * 0.90    # -10%
            tp4 = price * 0.865   # -13.5%
            sl = price * 1.05     # +5%
    elif action == 'BUY':
        position_type = "–î–õ–ò–ù–ù–£–Æ –ü–û–ó–ò–¶–ò–Æ"
        action_emoji = "üöÄ"
        tp1 = price * 1.025   # +2.5%
        tp2 = price * 1.05    # +5%
        tp3 = price * 1.10    # +10%
        tp4 = price * 1.135   # +13.5%
        sl = price * 0.95     # -5%
    else:
        position_type = "–ö–û–†–û–¢–ö–£–Æ –ü–û–ó–ò–¶–ò–Æ"
        action_emoji = "üìâ"
        tp1 = price * 0.975   # -2.5%
        tp2 = price * 0.95    # -5%
        tp3 = price * 0.90    # -10%
        tp4 = price * 0.865   # -13.5%
        sl = price * 1.05     # +5%
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    message = f"–°–ò–ì–ù–ê–õ –ù–ê {position_type} –ø–æ {symbol} {action_emoji}\n\n"
    message += f"üí∞ –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: ${price:.6f}\n\n"
    
    # Take Profit —É—Ä–æ–≤–Ω–∏
    message += f"üéØ TP1: ${tp1:.6f}\n"
    message += f"üéØ TP2: ${tp2:.6f}\n"
    message += f"üéØ TP3: ${tp3:.6f}\n"
    message += f"üéØ TP4: ${tp4:.6f}\n\n"
    
    # Stop Loss
    message += f"üõë –°—Ç–æ–ø-–ª–æ—Å—Å: ${sl:.6f}\n"
    
    # –ü–ª–µ—á–æ –∏ —É—Ä–æ–≤–µ–Ω—å —É—Å–ø–µ—Ö–∞
    message += f"–ü–ª–µ—á–æ ; {leverage} –•\n"
    message += f"üìä –£—Ä–æ–≤–µ–Ω—å —É—Å–ø–µ—Ö–∞: {confidence*100:.0f}%\n"
    message += f"üïí –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
    
    # –û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞
    position_word = "–¥–ª–∏–Ω–Ω—É—é" if action == "BUY" else "–∫–æ—Ä–æ—Ç–∫—É—é"
    message += f"üîé –ü–æ—á–µ–º—É —Å–∏–≥–Ω–∞–ª –Ω–∞ {position_word} –ø–æ–∑–∏—Ü–∏—é ‚ùì\n\n"
    message += "–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —Å–¥–µ–ª–∫–∏ üëá\n\n"
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±—ä—è—Å–Ω–µ–Ω–∏—è
    explanation = explain_signal(signal, analysis, mtf_analysis, onchain_data)
    message += explanation
    
    return message

def explain_signal(signal: Dict, analysis: Dict, mtf_analysis: Dict = None, onchain_data: Dict = None) -> str:
    """–î–µ—Ç–∞–ª—å–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞"""
    explanations = []
    warnings = []
    
    action = signal.get('action', 'BUY')
    
    # RSI –∞–Ω–∞–ª–∏–∑
    rsi = analysis.get('rsi', 50)
    if rsi > 70:
            explanations.append(f"‚Ä¢ RSI —Å–∏–ª—å–Ω—ã–π > 70 ({rsi:.2f})")
    elif rsi > 60:
            explanations.append(f"‚Ä¢ RSI —Å–∏–ª—å–Ω—ã–π > 60 ({rsi:.2f})")
    elif rsi < 30:
            explanations.append(f"‚Ä¢ RSI —Å–ª–∞–±—ã–π < 30 ({rsi:.2f}) - –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å")
    elif rsi < 40:
            explanations.append(f"‚Ä¢ RSI —Å–ª–∞–±—ã–π < 40 ({rsi:.2f})")
    
    # MACD –∞–Ω–∞–ª–∏–∑
    macd_data = analysis.get('macd', {})
    hist = macd_data.get('histogram', 0)
    if abs(hist) > 0.005:
            explanations.append("‚Ä¢ –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ MACD —Å–∏–ª—å–Ω–∞—è")
    elif abs(hist) > 0.003:
            explanations.append("‚Ä¢ –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ MACD —É–º–µ—Ä–µ–Ω–Ω–∞—è")
    else:
            explanations.append("‚Ä¢ –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ MACD —Å–ª–∞–±–∞—è")
    
    # EMA –∞–Ω–∞–ª–∏–∑
    price = analysis.get('price', 0)
    ema_20 = analysis.get('ema_20', 0)
    ema_50 = analysis.get('ema_50', 0)
    if price > ema_20 > ema_50:
            explanations.append("‚Ä¢ –¶–µ–Ω–∞ –≤—ã—à–µ EMA, —Å–∏–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ")
    elif price < ema_20 < ema_50:
            explanations.append("‚Ä¢ –¶–µ–Ω–∞ –Ω–∏–∂–µ EMA, –º–µ–¥–≤–µ–∂–∏–π —Ç—Ä–µ–Ω–¥")
    else:
            explanations.append("‚Ä¢ –°–º–µ—à–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã EMA")
    
    # Bollinger Bands –∞–Ω–∞–ª–∏–∑
    bb_upper = analysis.get('bb_upper', 0)
    bb_lower = analysis.get('bb_lower', 0)
    if price > bb_upper:
            explanations.append("‚Ä¢ –¶–µ–Ω–∞ –ø—Ä–æ–±–∏–ª–∞ –ø–æ–ª–æ—Å—É –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞ (–ø—Ä–æ–±–æ–π)")
    elif price < bb_lower:
            explanations.append("‚Ä¢ –¶–µ–Ω–∞ –Ω–∏–∂–µ –Ω–∏–∂–Ω–µ–π –ø–æ–ª–æ—Å—ã –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞")
    elif price > bb_upper * 0.98:
            explanations.append("‚Ä¢ –¶–µ–Ω–∞ –±–ª–∏–∑–∫–æ –∫ –≤–µ—Ä—Ö–Ω–µ–π –ø–æ–ª–æ—Å–µ –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞")
    
    # MA50 –∞–Ω–∞–ª–∏–∑
    ma_50 = analysis.get('ma_50', 0)
    if price > ma_50:
            explanations.append("‚Ä¢ –§–∏–ª—å—Ç—Ä MA50 –ø–µ—Ä–µ—Å–µ–∫ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—É—é –ª–∏–Ω–∏—é")
    else:
            explanations.append("‚Ä¢ –¶–µ–Ω–∞ –Ω–∏–∂–µ MA50")
    
    # ADX –∞–Ω–∞–ª–∏–∑
    adx = analysis.get('adx', 20)
    if adx >= 50:
            explanations.append(f"‚Ä¢ –°–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞ –æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è (ADX ‚â• 50, {adx:.1f})")
    elif adx >= 25:
            explanations.append(f"‚Ä¢ –°–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞ –≤—ã—Å–æ–∫–∞—è (ADX ‚â• 25, {adx:.1f})")
    elif adx >= 20:
            explanations.append(f"‚Ä¢ –°–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞ —É–º–µ—Ä–µ–Ω–Ω–∞—è (ADX ‚â• 20, {adx:.1f})")
    else:
            explanations.append(f"‚Ä¢ –°–ª–∞–±—ã–π —Ç—Ä–µ–Ω–¥ (ADX < 20, {adx:.1f})")
    
    # Volume –∞–Ω–∞–ª–∏–∑
    volume_ratio = analysis.get('volume_ratio', 1.0)
    if volume_ratio > 2.0:
            explanations.append(f"‚Ä¢ –†–æ—Å—Ç –æ–±—ä—ë–º–∞ –±–æ–ª–µ–µ {(volume_ratio-1)*100:.0f}%!")
    elif volume_ratio > 1.5:
            explanations.append(f"‚Ä¢ –†–æ—Å—Ç –æ–±—ä—ë–º–∞ –±–æ–ª–µ–µ {(volume_ratio-1)*100:.0f}%!")
    elif volume_ratio > 1.2:
            explanations.append(f"‚Ä¢ –†–æ—Å—Ç –æ–±—ä—ë–º–∞ {(volume_ratio-1)*100:.0f}%")
    else:
        warnings.append("–ù–µ—Ç Volume Spike")
    
    # SuperTrend –∞–Ω–∞–ª–∏–∑
    supertrend = analysis.get('supertrend', 0)
    if supertrend == 1:
            explanations.append("‚Ä¢ SuperTrend == 1 (–±—ã—á–∏–π —Ç—Ä–µ–Ω–¥)")
    else:
        warnings.append("SuperTrend == -1 (–º–µ–¥–≤–µ–∂–∏–π —Ç—Ä–µ–Ω–¥)")
    
    # VWAP –∞–Ω–∞–ª–∏–∑
    vwap = analysis.get('vwap', 0)
    if price > vwap:
            explanations.append("‚Ä¢ Price > VWAP")
    else:
        warnings.append("Price < VWAP")
    
    # Donchian Channel –∞–Ω–∞–ª–∏–∑
    donchian_middle = analysis.get('donchian_middle', 0)
    if price > donchian_middle:
            explanations.append("‚Ä¢ Price > Donchian Mid")
    else:
        warnings.append("Price < Donchian Mid")
    
    # Orderbook Imbalance –∞–Ω–∞–ª–∏–∑
    orderbook_imbalance = analysis.get('orderbook_imbalance', 1.0)
    if orderbook_imbalance > 1.05:
            explanations.append(f"‚Ä¢ Orderbook Imbalance > 1.05 ({orderbook_imbalance:.2f})")
    else:
        warnings.append(f"Orderbook Imbalance < 1.05")
    
    # Candlestick patterns –∞–Ω–∞–ª–∏–∑
    patterns = analysis.get('patterns', [])
    for pattern in patterns:
        if pattern == 'three_white_soldiers':
            explanations.append("‚Ä¢ –û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–∞—Ç—Ç–µ—Ä–Ω ¬´–¢—Ä–∏ –±–µ–ª—ã—Ö —Å–æ–ª–¥–∞—Ç–∞¬ª")
        elif pattern == 'three_black_crows':
            explanations.append("‚Ä¢ –û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–∞—Ç—Ç–µ—Ä–Ω ¬´–¢—Ä–∏ —á–µ—Ä–Ω—ã—Ö –≤–æ—Ä–æ–Ω–∞¬ª")
        elif pattern == 'hammer':
            explanations.append("‚Ä¢ –û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–∞—Ç—Ç–µ—Ä–Ω ¬´–ú–æ–ª–æ—Ç¬ª")
        elif pattern == 'shooting_star':
            explanations.append("‚Ä¢ –û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–∞—Ç—Ç–µ—Ä–Ω ¬´–ü–∞–¥–∞—é—â–∞—è –∑–≤–µ–∑–¥–∞¬ª")
    
    # Multi-timeframe –∞–Ω–∞–ª–∏–∑
    if mtf_analysis:
        tf_count = len(mtf_analysis)
        positive_count = 0
        negative_count = 0
        
        for tf, tf_data in mtf_analysis.items():
            tf_rsi = tf_data.get('rsi', 50)
            if tf_rsi > 70:
                negative_count += 1  # SELL
            elif tf_rsi < 30:
                positive_count += 1  # BUY
            elif tf_rsi > 50:
                positive_count += 1  # –ë—ã—á–∏–π —Ç—Ä–µ–Ω–¥
            else:
                negative_count += 1  # –ú–µ–¥–≤–µ–∂–∏–π —Ç—Ä–µ–Ω–¥
        
        if positive_count >= tf_count * 0.75:
            explanations.append("‚Ä¢ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —á–∞—Å–æ–≤–æ–≥–æ —Ç—Ä–µ–Ω–¥–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ")
            explanations.append("‚Ä¢ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ 4-—á–∞—Å–æ–≤–æ–≥–æ —Ç—Ä–µ–Ω–¥–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ")
        elif negative_count >= tf_count * 0.75:
            warnings.append("MTF Consensus == \"sell\" –∏–ª–∏ \"strong_sell\"")
    else:
            explanations.append("‚Ä¢ –°–º–µ—à–∞–Ω–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞")
    
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω—É—é –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
        if abs(positive_count - negative_count) <= 1 and tf_count >= 3:
            warnings.append("‚ùóÔ∏è–¢–∞–π–º—Ñ—Ä–µ–π–º—ã –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º—ã (—Å–º–µ—à–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã)")
    
    # –ü—Ä–æ–±–æ–π —É—Ä–æ–≤–Ω–µ–π
    explanations.append("‚Ä¢ –ü—Ä–æ–±–∏—Ç—ã–π –Ω–∞ 15-–º–∏–Ω—É—Ç–Ω–æ–º –≥—Ä–∞—Ñ–∏–∫–µ —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –±—ã–ª –ø–æ–≤—Ç–æ—Ä–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω –Ω–∞ 5-–º–∏–Ω—É—Ç–Ω–æ–º –≥—Ä–∞—Ñ–∏–∫–µ –∏ –≤—ã—Å—Ç—É–ø–∏–ª –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏")
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–û: Volume Spike –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–µ–∞–ª—å–Ω–æ –Ω–µ—Ç —Å–ø–∞–π–∫–∞
    volume_ratio = analysis.get('volume_ratio', 1.0)
    if volume_ratio < 1.2:
        warnings.append("‚ùóÔ∏è–ù–µ—Ç Volume Spike (–Ω–∏–∑–∫–∏–π –æ–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤)")
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–û: Stochastic RSI –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ä–µ–∞–ª—å–Ω–æ —Å–ª–∞–±–æ–º —Å–∏–≥–Ω–∞–ª–µ
    stoch_k = analysis.get('stoch_k', 50)
    if stoch_k < 40 and signal.get('action', '').startswith('BUY'):
        warnings.append("‚ùóÔ∏è–°–ª–∞–±–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è Stoch RSI (–º–µ–¥–≤–µ–∂–∏–π –∏–º–ø—É–ª—å—Å)")
    elif stoch_k > 60 and signal.get('action', '').startswith('SELL'):
        warnings.append("‚ùóÔ∏è–°–ª–∞–±–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è Stoch RSI (–±—ã—á–∏–π –∏–º–ø—É–ª—å—Å)")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    result = ""
    for explanation in explanations:
        result += f"{explanation}\n"
    
    if warnings:
        result += "\n"
        for warning in warnings:
            if warning.startswith("‚ùóÔ∏è"):
                result += f"{warning}\n"
            else:
                result += f"‚ùóÔ∏è{warning}\n"
    
    return result

class OnChainAnalyzer:
    """On-chain –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ Dune Analytics –∏ –≤–Ω–µ—à–Ω–∏–µ API"""
    
    def __init__(self):
        self.dune_api_key = EXTERNAL_APIS['dune']['api_key']
        self.crypto_panic_key = EXTERNAL_APIS['crypto_panic']['api_key']
        self.cache = {}
        self.cache_timeout = 300  # 5 –º–∏–Ω—É—Ç
    
    async def get_onchain_metrics(self, symbol: str) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ on-chain –º–µ—Ç—Ä–∏–∫"""
        try:
            cache_key = f"onchain_{symbol}"
            current_time = time.time()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            if cache_key in self.cache:
                cached_data, cache_time = self.cache[cache_key]
                if current_time - cache_time < self.cache_timeout:
                    return cached_data
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            whale_activity = await self._get_whale_activity(symbol)
            exchange_flows = await self._get_exchange_flows(symbol)
            social_sentiment = await self._get_social_sentiment(symbol)
            
            onchain_data = {
                'whale_activity': whale_activity,
                'exchange_flows': exchange_flows,
                'social_sentiment': social_sentiment,
                'timestamp': current_time
            }
            
            # –ö—ç—à–∏—Ä—É–µ–º
            self.cache[cache_key] = (onchain_data, current_time)
            return onchain_data
            
        except Exception as e:
            print(f"‚ùå OnChain analysis error for {symbol}: {e}")
            return {}
    
    async def _get_whale_activity(self, symbol: str) -> Dict:
        """–†–ï–ê–õ–¨–ù–´–ô –∞–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–∏—Ç–æ–≤ —á–µ—Ä–µ–∑ Dune Analytics"""
        try:
            # –†–µ–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ Dune Analytics API
            base_url = EXTERNAL_APIS['dune']['base_url']
            api_key = self.dune_api_key
            query_id = EXTERNAL_APIS['dune']['query_id']
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–∏–º–≤–æ–ª –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
            clean_symbol = symbol.replace('/USDT', '').upper()
            
            headers = {
                'X-Dune-API-Key': api_key,
                'Content-Type': 'application/json'
            }
            
            # –ó–∞–ø—Ä–æ—Å –∫ Dune API
            url = f"{base_url}/query/{query_id}/results"
            params = {
                'limit': 100,
                'offset': 0
            }
            
            async with aiohttp.ClientSession() as session:
                async with session.get(url, headers=headers, params=params, timeout=15) as response:
                    if response.status == 200:
                        data = await response.json()
                        
                        if data.get('result') and data['result'].get('rows'):
                            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫—Ä—É–ø–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö
                            rows = data['result']['rows']
                            
                            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –Ω–∞—à–µ–º—É —Å–∏–º–≤–æ–ª—É –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
                            relevant_rows = [row for row in rows if clean_symbol in str(row).upper()]
                            
                            if not relevant_rows:
                                relevant_rows = rows[:10]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 10 –∑–∞–ø–∏—Å–µ–π
                            
                            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                            large_transactions = len(relevant_rows)
                            
                            # –°—á–∏—Ç–∞–µ–º –æ–±—â–∏–π –æ–±—ä–µ–º
                            total_volume = 0
                            for row in relevant_rows:
                                # –ò—â–µ–º –ø–æ–ª—è —Å –æ–±—ä–µ–º–æ–º (–º–æ–≥—É—Ç –Ω–∞–∑—ã–≤–∞—Ç—å—Å—è –ø–æ-—Ä–∞–∑–Ω–æ–º—É)
                                for key, value in row.items():
                                    if 'amount' in key.lower() or 'volume' in key.lower():
                                        try:
                                            total_volume += float(value)
                                        except:
                                            continue
                            
                            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                            if large_transactions > 50 or total_volume > 10000000:
                                activity_level = "very_high"
                                description = "–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–∏—Ç–æ–≤"
                                whale_score = 85
                            elif large_transactions > 20 or total_volume > 5000000:
                                activity_level = "high"
                                description = "–í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–∏—Ç–æ–≤"
                                whale_score = 70
                            elif large_transactions > 10 or total_volume > 1000000:
                                activity_level = "moderate"
                                description = "–£–º–µ—Ä–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–∏—Ç–æ–≤"
                                whale_score = 55
                            else:
                                activity_level = "low"
                                description = "–ù–∏–∑–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–∏—Ç–æ–≤"
                                whale_score = 35
                            
                            return {
                                'score': whale_score,
                                'level': activity_level,
                                'description': description,
                                'large_transactions': large_transactions,
                                'net_flow': total_volume,
                                'data_source': 'dune_analytics'
                            }
            
            # Fallback –µ—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º CoinGecko
            return await self._get_whale_activity_fallback(symbol)
            
        except Exception as e:
            print(f"‚ùå Dune API whale activity error: {e}")
            return await self._get_whale_activity_fallback(symbol)
    
    async def _get_whale_activity_fallback(self, symbol: str) -> Dict:
        """Fallback –∞–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ CoinGecko API"""
        try:
            clean_symbol = symbol.replace('/USDT', '').lower()
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –º–æ–Ω–µ—Ç–µ —á–µ—Ä–µ–∑ CoinGecko
            url = f"https://api.coingecko.com/api/v3/coins/{clean_symbol}"
            
            async with aiohttp.ClientSession() as session:
                async with session.get(url, timeout=10) as response:
                    if response.status == 200:
                        data = await response.json()
                        
                        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã
                        market_data = data.get('market_data', {})
                        total_volume = market_data.get('total_volume', {}).get('usd', 0)
                        price_change_24h = market_data.get('price_change_percentage_24h', 0)
                        
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—ä–µ–º–∞ –∏ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
                        if total_volume > 1000000000 and abs(price_change_24h) > 10:
                            whale_score = 80
                            activity_level = "very_high"
                            description = "–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (–≤—ã—Å–æ–∫–∏–π –æ–±—ä–µ–º + –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å)"
                        elif total_volume > 500000000 and abs(price_change_24h) > 5:
                            whale_score = 65
                            activity_level = "high"
                            description = "–í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"
                        elif total_volume > 100000000:
                            whale_score = 50
                            activity_level = "moderate"
                            description = "–£–º–µ—Ä–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"
                        else:
                            whale_score = 30
                            activity_level = "low"
                            description = "–ù–∏–∑–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"
                        
                        return {
                            'score': whale_score,
                            'level': activity_level,
                            'description': description,
                            'large_transactions': int(total_volume / 1000000),  # –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ
                            'net_flow': total_volume,
                            'data_source': 'coingecko_fallback'
                        }
            
            # –ü–æ—Å–ª–µ–¥–Ω–∏–π fallback
            return {
                'score': 45,
                'level': 'moderate',
                'description': '–£–º–µ—Ä–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (–¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã)',
                'large_transactions': 15,
                'net_flow': 0,
                'data_source': 'fallback'
            }
            
        except Exception as e:
            print(f"‚ùå Whale activity fallback error: {e}")
            return {
                'score': 40,
                'level': 'unknown',
                'description': '–î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã',
                'large_transactions': 0,
                'net_flow': 0,
                'data_source': 'error'
            }
    
    async def _get_exchange_flows(self, symbol: str) -> Dict:
        """–†–ï–ê–õ–¨–ù–´–ô –∞–Ω–∞–ª–∏–∑ –ø–æ—Ç–æ–∫–æ–≤ –Ω–∞ –±–∏—Ä–∂–∏ —á–µ—Ä–µ–∑ CoinGecko API"""
        try:
            clean_symbol = symbol.replace('/USDT', '').lower()
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ä—ã–Ω–æ—á–Ω—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è—Ö
            url = f"https://api.coingecko.com/api/v3/coins/{clean_symbol}/market_chart"
            params = {
                'vs_currency': 'usd',
                'days': '7',  # –î–∞–Ω–Ω—ã–µ –∑–∞ –Ω–µ–¥–µ–ª—é
                'interval': 'daily'
            }
            
            async with aiohttp.ClientSession() as session:
                async with session.get(url, params=params, timeout=10) as response:
                    if response.status == 200:
                        data = await response.json()
                        
                        prices = data.get('prices', [])
                        volumes = data.get('total_volumes', [])
                        
                        if len(prices) >= 2 and len(volumes) >= 2:
                            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–µ–Ω–¥ —Ü–µ–Ω—ã –∏ –æ–±—ä–µ–º–∞
                            recent_prices = [p[1] for p in prices[-3:]]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –¥–Ω—è
                            recent_volumes = [v[1] for v in volumes[-3:]]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –¥–Ω—è
                            
                            # –¢—Ä–µ–Ω–¥ —Ü–µ–Ω—ã
                            price_trend = (recent_prices[-1] - recent_prices[0]) / recent_prices[0] * 100
                            
                            # –¢—Ä–µ–Ω–¥ –æ–±—ä–µ–º–∞
                            avg_volume_recent = sum(recent_volumes) / len(recent_volumes)
                            avg_volume_week = sum([v[1] for v in volumes]) / len(volumes)
                            volume_change = (avg_volume_recent - avg_volume_week) / avg_volume_week * 100
                            
                            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ç–æ–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ —Ü–µ–Ω—ã –∏ –æ–±—ä–µ–º–∞
                            if price_trend < -5 and volume_change > 20:
                                # –¶–µ–Ω–∞ –ø–∞–¥–∞–µ—Ç, –æ–±—ä–µ–º —Ä–∞—Å—Ç–µ—Ç = –ø—Ä–∏—Ç–æ–∫ –Ω–∞ –±–∏—Ä–∂–∏ (–ø—Ä–æ–¥–∞–∂–∏)
                                flow_sentiment = "bearish"
                                description = "–ë–æ–ª—å—à–æ–π –ø—Ä–∏—Ç–æ–∫ –Ω–∞ –±–∏—Ä–∂–∏ (–º–µ–¥–≤–µ–∂–∏–π —Å–∏–≥–Ω–∞–ª)"
                                net_flow = -avg_volume_recent
                            elif price_trend > 5 and volume_change > 20:
                                # –¶–µ–Ω–∞ —Ä–∞—Å—Ç–µ—Ç, –æ–±—ä–µ–º —Ä–∞—Å—Ç–µ—Ç = –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏
                                flow_sentiment = "bullish"
                                description = "–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏ (–±—ã—á–∏–π —Å–∏–≥–Ω–∞–ª)"
                                net_flow = avg_volume_recent
                            elif price_trend > 2 and volume_change < -10:
                                # –¶–µ–Ω–∞ —Ä–∞—Å—Ç–µ—Ç, –æ–±—ä–µ–º –ø–∞–¥–∞–µ—Ç = –æ—Ç—Ç–æ–∫ —Å –±–∏—Ä–∂ (—Ö–æ–¥–ª)
                                flow_sentiment = "bullish"
                                description = "–û—Ç—Ç–æ–∫ —Å –±–∏—Ä–∂, —Ö–æ–¥–ª–∏–Ω–≥ (–±—ã—á–∏–π —Å–∏–≥–Ω–∞–ª)"
                                net_flow = avg_volume_recent * 0.5
                            else:
                                flow_sentiment = "neutral"
                                description = "–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ –ø–æ—Ç–æ–∫–∏"
                                net_flow = 0
                            
                            return {
                                'inflow': max(0, -net_flow) if net_flow < 0 else 0,
                                'outflow': max(0, net_flow) if net_flow > 0 else 0,
                                'net_flow': net_flow,
                                'sentiment': flow_sentiment,
                                'description': description,
                                'price_trend': price_trend,
                                'volume_change': volume_change,
                                'data_source': 'coingecko'
                            }
            
            # Fallback
            return {
                'inflow': 0,
                'outflow': 0,
                'net_flow': 0,
                'sentiment': 'neutral',
                'description': '–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ –ø–æ—Ç–æ–∫–∏ (–¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã)',
                'data_source': 'fallback'
            }
            
        except Exception as e:
            print(f"‚ùå Exchange flows error: {e}")
            return {
                'inflow': 0,
                'outflow': 0,
                'net_flow': 0,
                'sentiment': 'neutral',
                'description': '–î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã',
                'data_source': 'error'
            }
    
    async def _get_social_sentiment(self, symbol: str) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è —á–µ—Ä–µ–∑ CryptoPanic"""
        try:
            # –†–µ–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ CryptoPanic API
            url = f"{EXTERNAL_APIS['crypto_panic']['base_url']}/posts/"
            params = {
                'auth_token': self.crypto_panic_key,
                'currencies': symbol.replace('/USDT', ''),
                'kind': 'news',
                'filter': 'rising'
            }
            
            async with aiohttp.ClientSession() as session:
                async with session.get(url, params=params, timeout=10) as response:
                    if response.status == 200:
                        data = await response.json()
                        
                        if data.get('results'):
                            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤–æ—Å—Ç–∏
                            positive_count = 0
                            negative_count = 0
                            total_count = len(data['results'])
                            
                            for post in data['results'][:10]:  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 10 –Ω–æ–≤–æ—Å—Ç–µ–π
                                votes = post.get('votes', {})
                                if votes.get('positive', 0) > votes.get('negative', 0):
                                    positive_count += 1
                                elif votes.get('negative', 0) > votes.get('positive', 0):
                                    negative_count += 1
                            
                            if total_count > 0:
                                sentiment_score = (positive_count - negative_count) / total_count * 100
                            else:
                                sentiment_score = 0
                            
                            if sentiment_score > 20:
                                sentiment = "bullish"
                                description = "–ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –ø—Ä–µ–æ–±–ª–∞–¥–∞—é—Ç"
                            elif sentiment_score < -20:
                                sentiment = "bearish"
                                description = "–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –ø—Ä–µ–æ–±–ª–∞–¥–∞—é—Ç"
                            else:
                                sentiment = "neutral"
                                description = "–°–º–µ—à–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏"
                            
                            return {
                                'score': sentiment_score,
                                'sentiment': sentiment,
                                'description': description,
                                'news_count': total_count,
                                'positive_news': positive_count,
                                'negative_news': negative_count
                            }
            
            # Fallback –µ—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
            return {
                'score': 0,
                'sentiment': 'neutral',
                'description': '–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏',
                'news_count': 0
            }
            
        except Exception as e:
            print(f"‚ùå Social sentiment error: {e}")
            return {'sentiment': 'neutral', 'description': '–î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã'}

class AlphaSignalBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç —Å —Å–∏—Å—Ç–µ–º–æ–π Best Alpha Only + –°–∫–∞–ª—å–ø–∏–Ω–≥"""
    
    def __init__(self):
        self.data_manager = UniversalDataManager()
        self.ai_engine = RealTimeAIEngine()
        self.onchain_analyzer = OnChainAnalyzer()
        self.telegram_bot = TelegramBot()
        self.scalping_engine = ScalpingSignalEngine(min_confidence=0.35, min_filters=4)  # –ó–û–õ–û–¢–ê–Ø –°–ï–†–ï–î–ò–ù–ê: –ë–∞–ª–∞–Ω—Å –∫–∞—á–µ—Å—Ç–≤–∞ –∏ —á–∞—Å—Ç–æ—Ç—ã
        self.running = False
        self.start_time = time.time()  # –î–æ–±–∞–≤–ª—è–µ–º –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        self.pairs = TRADING_PAIRS
        self.timeframes = ['1m', '5m', '15m', '1h', '4h']  # –î–æ–±–∞–≤–ª—è–µ–º 1m –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞
        self.min_confidence = 0.8  # –°—Ç—Ä–æ–≥–∏–π –ø–æ—Ä–æ–≥ –¥–ª—è Best Alpha Only
        self.top_n = 5
        self.update_frequency = 300  # 5 –º–∏–Ω—É—Ç
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞
        self.scalping_enabled = True  # –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —Å–∫–∞–ª—å–ø–∏–Ω–≥
        self.scalping_pairs = TRADING_PAIRS[:20]  # –ü–µ—Ä–≤—ã–µ 20 –ø–∞—Ä –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞
        self.scalping_frequency = 60  # 1 –º–∏–Ω—É—Ç–∞ –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'cycles': 0,
            'total_signals': 0,
            'sent_signals': 0,
            'scalping_signals': 0,
            'scalping_sent': 0,
            'errors': 0
        }
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        self.running = True
        self.start_time = time.time()
        
        print("üöÄ CryptoAlphaPro Best Alpha Only Bot v4.0 + SCALPING")
        print("=" * 60)
        print(f"üìä –ü–∞—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {len(self.pairs)}")
        print(f"‚è±Ô∏è –¢–∞–π–º—Ñ—Ä–µ–π–º—ã: {self.timeframes}")
        print(f"üéØ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {self.min_confidence*100:.0f}%")
        print(f"üéØ –¢–æ–ø —Å–∏–≥–Ω–∞–ª–æ–≤: {self.top_n}")
        print(f"‚è∞ –ß–∞—Å—Ç–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {self.update_frequency} —Å–µ–∫")
        print(f"‚ö° –°–∫–∞–ª—å–ø–∏–Ω–≥: {len(self.scalping_pairs)} –ø–∞—Ä, {self.scalping_engine.min_confidence*100:.0f}% —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å")
        print("=" * 60)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ
        await self.telegram_bot.send_message(
            "üöÄ **CRYPTOALPHAPRO BEST ALPHA ONLY BOT v4.0 STARTED**\n\n"
            f"üìä –ü–∞—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {len(self.pairs)}\n"
            f"‚è±Ô∏è –¢–∞–π–º—Ñ—Ä–µ–π–º—ã: {', '.join(self.timeframes)}\n"
            f"üéØ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {self.min_confidence*100:.0f}%\n"
            f"üéØ –¢–æ–ø —Å–∏–≥–Ω–∞–ª–æ–≤: {self.top_n}\n"
            f"‚è∞ –ß–∞—Å—Ç–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {self.update_frequency} —Å–µ–∫\n\n"
            f"‚ö° **–°–ö–ê–õ–¨–ü–ò–ù–ì –ê–ö–¢–ò–í–ï–ù:**\n"
            f"üìä –ü–∞—Ä –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞: {len(self.scalping_pairs)}\n"
            f"üéØ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞: {self.scalping_engine.min_confidence*100:.0f}%\n"
            f"‚è∞ –ß–∞—Å—Ç–æ—Ç–∞ —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞: {self.scalping_frequency} —Å–µ–∫\n\n"
            "üéØ –°–∏—Å—Ç–µ–º–∞ 'Best Alpha Only' - —Ç–æ–ª—å–∫–æ –ª—É—á—à–∏–µ —Å–∏–≥–Ω–∞–ª—ã!\n\n"
            "üí¨ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: /help –¥–ª—è –∫–æ–º–∞–Ω–¥"
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∏ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        tasks = [
            self.batch_top_signals_loop(),
            self.telegram_bot.start_webhook_listener()
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∫–∞–ª—å–ø–∏–Ω–≥ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω
        if self.scalping_enabled:
            tasks.append(self.scalping_signals_loop())
            print(f"‚úÖ –°–∫–∞–ª—å–ø–∏–Ω–≥ –∑–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á")
    else:
            print(f"‚ùå –°–∫–∞–ª—å–ø–∏–Ω–≥ –æ—Ç–∫–ª—é—á–µ–Ω")
        
        print(f"üìä –í—Å–µ–≥–æ –∑–∞–¥–∞—á –¥–ª—è –∑–∞–ø—É—Å–∫–∞: {len(tasks)}")
        print("üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∑–∞–¥–∞—á...")
        
        await asyncio.gather(*tasks)
    
    async def batch_top_signals_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ—Ç–±–æ—Ä–∞ –ª—É—á—à–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
        while self.running:
            try:
                self.stats['cycles'] += 1
                print(f"\nüìä Cycle #{self.stats['cycles']}: Analyzing {len(self.pairs)} pairs...")
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø —Å–∏–≥–Ω–∞–ª—ã
                top_signals = await process_and_collect_signals(
                    self.pairs,
                    self.timeframes,
                    self.data_manager,
                    self.ai_engine,
                    min_confidence=self.min_confidence,
                    top_n=self.top_n
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª—ã –≤ Telegram
                for signal in top_signals:
                    message = format_signal_for_telegram(signal, signal['analysis'], signal['mtf_analysis'], signal['onchain_data'])
                    if await self.telegram_bot.send_message(message):
                        print(f"üì§ Signal for {signal['symbol']} sent to Telegram")
                        self.stats['sent_signals'] += 1
                    else:
                        print(f"‚ùå Failed to send signal for {signal['symbol']}")
                
                self.stats['total_signals'] += len(top_signals)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 10 —Ü–∏–∫–ª–æ–≤
                if self.stats['cycles'] % 10 == 0:
                    uptime = time.time() - self.start_time
                    uptime_str = f"{uptime/3600:.1f}h" if uptime > 3600 else f"{uptime/60:.1f}m"
                    
                    status_message = (
                        f"üìä **BOT STATUS** (Cycle #{self.stats['cycles']})\n\n"
                        f"‚è∞ Uptime: {uptime_str}\n"
                        f"üìà Total signals: {self.stats['total_signals']}\n"
                        f"üì§ Sent signals: {self.stats['sent_signals']}\n"
                        f"‚ùå Errors: {self.stats['errors']}\n"
                        f"üéØ Success rate: {(self.stats['sent_signals']/max(1,self.stats['total_signals'])*100):.1f}%\n"
                        f"ü§ñ Status: üü¢ ACTIVE"
                    )
                    await self.telegram_bot.send_message(status_message)
                
                # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞
                await asyncio.sleep(self.update_frequency)
                
            except Exception as e:
                print(f"‚ùå Error in cycle: {e}")
                self.stats['errors'] += 1
                await asyncio.sleep(60)
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        self.running = False
        print("üõë Bot stopped")
    
    async def scalping_signals_loop(self):
        """–¶–∏–∫–ª —Å–∫–∞–ª—å–ø–∏–Ω–≥ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        print("üéØ –ó–∞–ø—É—Å–∫ —Å–∫–∞–ª—å–ø–∏–Ω–≥ –º–æ–¥—É–ª—è...")
        
        while self.running:
            try:
                print(f"\n‚ö° Scalping cycle: Analyzing {len(self.scalping_pairs)} pairs...")
                
                scalping_signals = []
                analyzed_count = 0
                error_count = 0
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ä—ã –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞
                for symbol in self.scalping_pairs:
                    try:
                        analyzed_count += 1
                        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
                        ohlcv_data = await self.data_manager.get_multi_timeframe_data(
                            symbol, ['1m', '5m', '15m']
                        )
                        
                        if ohlcv_data:
                            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
                            main_tf = ohlcv_data.get('5m') or ohlcv_data.get('1m')
                            if main_tf and main_tf.get('current'):
                                current_price = main_tf['current']['close']
                                
                                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∫–∞–ª—å–ø–∏–Ω–≥ —Å–∏–≥–Ω–∞–ª
                                scalp_signal = await self.scalping_engine.analyze_scalping_signal(
                                    symbol, ohlcv_data, current_price
                                )
                                
                                if scalp_signal:
                                    scalping_signals.append(scalp_signal)
                                    print(f"‚ö° SCALP {scalp_signal['action']} {symbol} conf={scalp_signal['confidence']:.3f} price={current_price}")
                    
                    except Exception as e:
                        error_count += 1
                        print(f"‚ùå Scalping error for {symbol}: {e}")
                        continue
                
                print(f"üìä Scalping analysis: {analyzed_count} pairs, {len(scalping_signals)} signals, {error_count} errors")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∫–∞–ª—å–ø–∏–Ω–≥ —Å–∏–≥–Ω–∞–ª—ã
                sent_count = 0
                for signal in scalping_signals:
                    try:
                        message = self.format_scalping_signal_for_telegram(signal)
                        if await self.telegram_bot.send_message(message):
                            print(f"‚ö° Scalping signal for {signal['symbol']} sent to Telegram")
                            self.stats['scalping_sent'] += 1
                            sent_count += 1
                        else:
                            print(f"‚ùå Failed to send scalping signal for {signal['symbol']}")
                    except Exception as e:
                        print(f"‚ùå Error sending scalping signal: {e}")
                
                self.stats['scalping_signals'] += len(scalping_signals)
                print(f"üì§ Sent {sent_count}/{len(scalping_signals)} scalping signals to Telegram")
                
                # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–∫–∞–ª—å–ø–∏–Ω–≥ —Ü–∏–∫–ª–∞
                await asyncio.sleep(self.scalping_frequency)
                
            except Exception as e:
                print(f"‚ùå Error in scalping cycle: {e}")
                self.stats['errors'] += 1
                await asyncio.sleep(30)
    
    def format_scalping_signal_for_telegram(self, signal: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫–∞–ª—å–ø–∏–Ω–≥ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è Telegram"""
        try:
            symbol = signal['symbol']
            action = signal['action']
            price = signal['price']
            confidence = signal['confidence']
            leverage = signal['leverage']
            stop_loss = signal['stop_loss']
            tp1 = signal['take_profit_1']
            tp2 = signal['take_profit_2']
            hold_time = signal['hold_time']
            filters_passed = signal['filters_passed']
            total_filters = signal['total_filters']
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∏ —Ç–∏–ø
            if 'STRONG' in action:
                emoji = "üî•‚ö°"
                strength = "–ü–†–ï–ú–ò–£–ú"
            elif confidence >= 0.7:
                emoji = "üíé‚ö°"
                strength = "–í–´–°–û–ö–û–ö–ê–ß–ï–°–¢–í–ï–ù–ù–´–ô"
            elif confidence >= 0.5:
                emoji = "‚ö°"
                strength = "–ö–ê–ß–ï–°–¢–í–ï–ù–ù–´–ô"
            else:
                emoji = "‚ö°"
                strength = "–ë–´–°–¢–†–´–ô"
            
            direction = "–î–õ–ò–ù–ù–£–Æ" if 'BUY' in action else "–ö–û–†–û–¢–ö–£–Æ"
            
            message = f"{emoji} **{strength} –°–ö–ê–õ–¨–ü–ò–ù–ì –°–ò–ì–ù–ê–õ** {emoji}\n\n"
            message += f"üìä **{symbol}** - {direction} –ü–û–ó–ò–¶–ò–Æ\n"
            message += f"üí∞ –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: ${price:.6f}\n"
            message += f"‚ö° –ü–ª–µ—á–æ: {leverage:.0f}x\n\n"
            
            # TP/SL
            message += f"üéØ TP1: ${tp1:.6f}\n"
            message += f"üéØ TP2: ${tp2:.6f}\n"
            message += f"üõë SL: ${stop_loss:.6f}\n\n"
            
            # –î–µ—Ç–∞–ª–∏ –∫–∞—á–µ—Å—Ç–≤–∞
            message += f"üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence*100:.1f}%\n"
            message += f"‚è±Ô∏è –í—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è: {hold_time}\n"
            message += f"üéØ –§–∏–ª—å—Ç—Ä–æ–≤ –ø—Ä–æ—à–ª–æ: {filters_passed}/{total_filters}\n"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ü–µ–Ω–∫—É –∫–∞—á–µ—Å—Ç–≤–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
            quality_score = 0
            for detail in filter_details:
                if "–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –¢–§" in detail or "—Ç—Ä–µ–Ω–¥" in detail or "–∏–º–ø—É–ª—å—Å" in detail:
                    quality_score += 1
            
            if quality_score >= 3:
                message += f"üíé –ö–∞—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–∞: –ü–†–ï–ú–ò–£–ú\n"
            elif quality_score >= 2:
                message += f"‚≠ê –ö–∞—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–∞: –í–´–°–û–ö–û–ï\n"
            else:
                message += f"‚úÖ –ö–∞—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–∞: –•–û–†–û–®–ï–ï\n"
                
            message += f"üïí –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}\n\n"
            
            # –î–µ—Ç–∞–ª–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∞–º—ã–µ –≤–∞–∂–Ω—ã–µ)
            filter_details = signal.get('filter_details', [])
            if filter_details:
                message += "üîç **–ö–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã:**\n"
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
                important_details = []
                for detail in filter_details:
                    if any(keyword in detail for keyword in ['–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å', '—Ç—Ä–µ–Ω–¥', '–∏–º–ø—É–ª—å—Å', '–≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å', 'EMA']):
                        important_details.append(detail)
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ 4 —Å–∞–º—ã—Ö –≤–∞–∂–Ω—ã—Ö
                for detail in important_details[:4]:
                    message += f"‚Ä¢ {detail}\n"
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º 2-3 –ª—É—á—à–∏—Ö
                tech_details = [d for d in filter_details if d not in important_details]
                if tech_details:
                    message += f"‚Ä¢ {tech_details[0]}\n"  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª—É—á—à–∏–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
            
            message += f"\n‚ö†Ô∏è **–°–ö–ê–õ–¨–ü–ò–ù–ì** - –±—ã—Å—Ç—Ä—ã–π –≤—Ö–æ–¥/–≤—ã—Ö–æ–¥!"
            
            return message
            
        except Exception as e:
            print(f"‚ùå Error formatting scalping signal: {e}")
            return f"‚ö° –°–ö–ê–õ–¨–ü–ò–ù–ì –°–ò–ì–ù–ê–õ {signal.get('symbol', 'UNKNOWN')} - –æ—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    bot = AlphaSignalBot()
    bot.telegram_bot.set_bot_instance(bot)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –±–æ—Ç–∞ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç
    
    try:
        await bot.start()
    except KeyboardInterrupt:
        print("\nüõë Stopping bot...")
    finally:
        bot.stop()

if __name__ == "__main__":
    asyncio.run(main()) 