#!/usr/bin/env python3
"""
üö® SignalPro - –û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
–°–∏—Å—Ç–µ–º–∞ –æ—Ç–±–æ—Ä–∞ –°–ê–ú–´–• –¢–û–ß–ù–´–• —Å–∏–≥–Ω–∞–ª–æ–≤ —Å—Ä–µ–¥–∏ 200+ –ø–∞—Ä
–†–ï–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï –° –ë–ò–†–ñ + ON-CHAIN –ê–ù–ê–õ–ò–ó
"""

import asyncio
import time
import numpy as np
import pandas as pd
from datetime import datetime
from typing import Dict, List, Optional, Any
import json
import os
import aiohttp
import requests
import ccxt
from config import TELEGRAM_CONFIG, EXCHANGE_KEYS, EXTERNAL_APIS, TRADING_CONFIG

# 200+ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
TRADING_PAIRS = TRADING_CONFIG['pairs'][:200]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 200 –ø–∞—Ä

class UniversalDataManager:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Å–µ—Ö –±–∏—Ä–∂ - –†–ï–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï —Å ccxt"""
    
    def __init__(self):
        self.cache = {}
        self.cache_timeout = 60  # —Å–µ–∫—É–Ω–¥—ã
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∏—Ä–∂–∏ —á–µ—Ä–µ–∑ ccxt
        self.binance = ccxt.binance({
            'apiKey': EXCHANGE_KEYS['binance']['key'],
            'secret': EXCHANGE_KEYS['binance']['secret'],
            'sandbox': False,
            'enableRateLimit': True,
            'rateLimit': 1200,  # 1.2 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        })
        
        self.bybit = ccxt.bybit({
            'apiKey': EXCHANGE_KEYS['bybit']['key'],
            'secret': EXCHANGE_KEYS['bybit']['secret'],
            'sandbox': False,
            'enableRateLimit': True,
            'rateLimit': 2000,  # 2 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è Bybit
        })
        
        self.okx = ccxt.okx({
            'apiKey': EXCHANGE_KEYS['okx']['key'],
            'secret': EXCHANGE_KEYS['okx']['secret'],
            'password': EXCHANGE_KEYS['okx']['passphrase'],
            'sandbox': False,
            'enableRateLimit': True,
            'rateLimit': 1000,  # 1 —Å–µ–∫—É–Ω–¥–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        })
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –±–∏—Ä–∂ (Binance —Å–∞–º—ã–π –Ω–∞–¥–µ–∂–Ω—ã–π)
        self.exchange_priority = [
            ('binance', self.binance),
            ('okx', self.okx),
            ('bybit', self.bybit)
        ]
        
        print("‚úÖ –ë–∏—Ä–∂–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã: Binance, Bybit, OKX")
        
    async def get_multi_timeframe_data(self, symbol: str, timeframes: List[str]) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –†–ï–ê–õ–¨–ù–´–• OHLCV –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ —Å —É–º–Ω—ã–º fallback"""
        try:
            current_time = time.time()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            cache_key = f"{symbol}_{'_'.join(timeframes)}"
            if cache_key in self.cache:
                cached_data, cache_time = self.cache[cache_key]
                if current_time - cache_time < self.cache_timeout:
                    return cached_data
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –ø–æ –±–∏—Ä–∂–∞–º
            data = {}
            for tf in timeframes:
                tf_data = await self._get_best_timeframe_data(symbol, tf)
                if tf_data:
                    data[tf] = tf_data
            
            # –ö—ç—à–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
            if data:
                self.cache[cache_key] = (data, current_time)
                return data
            else:
                return None
            
        except Exception as e:
            print(f"‚ùå Error getting data for {symbol}: {e}")
            return None
    
    async def _get_best_timeframe_data(self, symbol: str, timeframe: str) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –ª—É—á—à–µ–π –¥–æ—Å—Ç—É–ø–Ω–æ–π –±–∏—Ä–∂–∏"""
        for exchange_name, exchange in self.exchange_priority:
            try:
                data = await self._get_exchange_ohlcv(exchange, symbol, timeframe, exchange_name)
                if data:
                    return data
            except Exception as e:
                # –ï—Å–ª–∏ rate limit, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç—É –±–∏—Ä–∂—É
                if 'rate limit' in str(e).lower() or 'too many' in str(e).lower():
                    continue
                    
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∏ —Å –æ–¥–Ω–æ–π –±–∏—Ä–∂–∏
        return None
    
    async def _get_exchange_ohlcv(self, exchange, symbol: str, timeframe: str, exchange_name: str) -> Dict:
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ OHLCV –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ ccxt —Å retry –ª–æ–≥–∏–∫–æ–π"""
        max_retries = 2
        retry_delay = 1
        
        for attempt in range(max_retries):
            try:
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–∞–π–º—Ñ—Ä–µ–π–º –≤ —Ñ–æ—Ä–º–∞—Ç ccxt
                tf_map = {
                    '5m': '5m',
                    '15m': '15m',
                    '1h': '1h', 
                    '4h': '4h',
                    '1d': '1d'
                }
                ccxt_tf = tf_map.get(timeframe, '1h')
                
                # –ü–æ–ª—É—á–∞–µ–º –ò–°–¢–û–†–ò–ß–ï–°–ö–ò–ï –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
                loop = asyncio.get_event_loop()
                ohlcv = await loop.run_in_executor(
                    None, 
                    lambda: exchange.fetch_ohlcv(symbol, ccxt_tf, limit=200)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–æ 200 —Å–≤–µ—á–µ–π
                )
                
                if ohlcv and len(ohlcv) >= 50:  # –ú–∏–Ω–∏–º—É–º 50 —Å–≤–µ—á–µ–π –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
                    df_data = []
                    for candle in ohlcv:
                        df_data.append({
                            'timestamp': int(candle[0]),
                            'open': float(candle[1]),
                            'high': float(candle[2]),
                            'low': float(candle[3]),
                            'close': float(candle[4]),
                            'volume': float(candle[5])
                        })
                    
                    return {
                        'historical_data': df_data,
                        'current': {
                            'open': float(ohlcv[-1][1]),
                            'high': float(ohlcv[-1][2]),
                            'low': float(ohlcv[-1][3]),
                            'close': float(ohlcv[-1][4]),
                            'volume': float(ohlcv[-1][5]),
                            'timestamp': int(ohlcv[-1][0])
                        },
                        'exchange': exchange_name,
                        'symbol': symbol
                    }
                
                return None
                
            except Exception as e:
                error_msg = str(e).lower()
                
                # Rate limit errors - –Ω–µ —Ä–µ—Ç—Ä–∞–∏–º, —Å—Ä–∞–∑—É –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None
                if any(keyword in error_msg for keyword in ['rate limit', 'too many', 'exceeded']):
                    if attempt == 0:  # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π —Ä–∞–∑
                        print(f"‚ö†Ô∏è {exchange_name} rate limit for {symbol}")
                    return None
                
                # Market not found - –Ω–µ —Ä–µ—Ç—Ä–∞–∏–º
                if any(keyword in error_msg for keyword in ['symbol not found', 'does not have market', 'invalid symbol']):
                    return None
                    
                # –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ - —Ä–µ—Ç—Ä–∞–∏–º
                if attempt < max_retries - 1:
                    await asyncio.sleep(retry_delay)
                    continue
                else:
                    # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
                    print(f"‚ùå {exchange_name} error for {symbol} {timeframe}: {e}")
                    return None
        
        return None

class SignalProEngine:
    """–û—Å–Ω–æ–≤–Ω–æ–π –¥–≤–∏–∂–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ–±—ã—á–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
    
    def __init__(self):
        self.indicators = {}
        
    async def process_symbol(self, symbol: str, ohlcv_data: Dict) -> Optional[Dict]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–º–≤–æ–ª–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞"""
        try:
            if not ohlcv_data:
                return None
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ç–∞–π–º—Ñ—Ä–µ–π–º
            analysis_results = {}
            for tf, data in ohlcv_data.items():
                if tf not in ['whale_activity', 'exchange_flows', 'social_sentiment', 'timestamp']:
                    analysis_results[tf] = self._analyze_timeframe(data)
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            signal = self._combine_analysis(analysis_results, symbol)
            
            if signal:
                signal['symbol'] = symbol
                # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ (15m) –∏–ª–∏ –ø–µ—Ä–≤–æ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ
                main_tf_data = ohlcv_data.get('15m') or ohlcv_data.get('1h') or list(ohlcv_data.values())[0]
                if main_tf_data and main_tf_data.get('current'):
                    signal['price'] = main_tf_data['current']['close']
                    signal['entry_price'] = main_tf_data['current']['close']  # –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                else:
                    signal['price'] = 0
                    signal['entry_price'] = 0
                
                signal['timestamp'] = datetime.now().isoformat()
            
            return signal
            
        except Exception as e:
            print(f"‚ùå Error processing {symbol}: {e}")
            return None
    
    def _analyze_timeframe(self, data: Dict) -> Dict:
        """–†–ï–ê–õ–¨–ù–´–ô –∞–Ω–∞–ª–∏–∑ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ —Å –Ω–∞—Å—Ç–æ—è—â–∏–º–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
            historical_data = data.get('historical_data', [])
            current_data = data.get('current', {})
            
            if len(historical_data) < 50:
                return {}
            
            # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤
            df = pd.DataFrame(historical_data)
            
            # –¢–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
            close = current_data.get('close', 0)
            high = current_data.get('high', 0)
            low = current_data.get('low', 0)
            volume = current_data.get('volume', 0)
            open_price = current_data.get('open', 0)
            
            # –ú–∞—Å—Å–∏–≤—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤
            closes = df['close'].values
            highs = df['high'].values
            lows = df['low'].values
            volumes = df['volume'].values
            opens = df['open'].values
            
            # –†–ï–ê–õ–¨–ù–´–ô RSI —Ä–∞—Å—á–µ—Ç (14 –ø–µ—Ä–∏–æ–¥–æ–≤)
            def calculate_rsi(prices, period=14):
                deltas = np.diff(prices)
                gains = np.where(deltas > 0, deltas, 0)
                losses = np.where(deltas < 0, -deltas, 0)
                
                avg_gain = np.mean(gains[:period])
                avg_loss = np.mean(losses[:period])
                
                for i in range(period, len(gains)):
                    avg_gain = (avg_gain * (period - 1) + gains[i]) / period
                    avg_loss = (avg_loss * (period - 1) + losses[i]) / period
                
                if avg_loss == 0:
                    return 100
                rs = avg_gain / avg_loss
                return 100 - (100 / (1 + rs))
            
            rsi = calculate_rsi(closes)
            
            # –†–ï–ê–õ–¨–ù–´–ô MACD —Ä–∞—Å—á–µ—Ç
            def calculate_ema(prices, period):
                alpha = 2 / (period + 1)
                ema = [prices[0]]
                for price in prices[1:]:
                    ema.append(alpha * price + (1 - alpha) * ema[-1])
                return np.array(ema)
            
            ema_12 = calculate_ema(closes, 12)
            ema_26 = calculate_ema(closes, 26)
            macd_line = ema_12 - ema_26
            signal_line = calculate_ema(macd_line, 9)
            histogram = macd_line[-1] - signal_line[-1]
            
            macd_data = {
                'macd': macd_line[-1],
                'signal': signal_line[-1],
                'histogram': histogram
            }
            
            # –†–ï–ê–õ–¨–ù–´–ï EMA —Ä–∞—Å—á–µ—Ç—ã
            ema_20 = calculate_ema(closes, 20)[-1]
            ema_50 = calculate_ema(closes, 50)[-1]
            
            # –†–ï–ê–õ–¨–ù–´–ï Bollinger Bands
            def calculate_bollinger_bands(prices, period=20, std_dev=2):
                sma = np.mean(prices[-period:])
                std = np.std(prices[-period:])
                upper = sma + (std * std_dev)
                lower = sma - (std * std_dev)
                return upper, sma, lower
            
            bb_upper, bb_middle, bb_lower = calculate_bollinger_bands(closes)
            
            # –†–ï–ê–õ–¨–ù–ê–Ø MA50
            ma_50 = np.mean(closes[-50:]) if len(closes) >= 50 else closes[-1]
            
            # –†–ï–ê–õ–¨–ù–´–ô ADX —Ä–∞—Å—á–µ—Ç
            def calculate_adx(highs, lows, closes, period=14):
                # True Range
                tr1 = highs - lows
                tr2 = np.abs(highs - np.roll(closes, 1))
                tr3 = np.abs(lows - np.roll(closes, 1))
                tr = np.maximum(tr1, np.maximum(tr2, tr3))[1:]  # –£–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
                
                # Directional Movement
                dm_plus = np.where((highs[1:] - highs[:-1]) > (lows[:-1] - lows[1:]), 
                                 np.maximum(highs[1:] - highs[:-1], 0), 0)
                dm_minus = np.where((lows[:-1] - lows[1:]) > (highs[1:] - highs[:-1]), 
                                  np.maximum(lows[:-1] - lows[1:], 0), 0)
                
                # Smoothed values
                if len(tr) >= period:
                    atr = np.mean(tr[-period:])
                    di_plus = 100 * np.mean(dm_plus[-period:]) / atr if atr > 0 else 0
                    di_minus = 100 * np.mean(dm_minus[-period:]) / atr if atr > 0 else 0
                    
                    if (di_plus + di_minus) > 0:
                        dx = 100 * abs(di_plus - di_minus) / (di_plus + di_minus)
                        return dx
                
                return 20  # Fallback
            
            adx = calculate_adx(highs, lows, closes)
            
            # –†–ï–ê–õ–¨–ù–´–ô Volume –∞–Ω–∞–ª–∏–∑
            if len(volumes) >= 20:
                avg_volume = np.mean(volumes[-20:])
                volume_ratio = volume / avg_volume if avg_volume > 0 else 1.0
            else:
                volume_ratio = 1.0
            
            # –†–ï–ê–õ–¨–ù–´–ô –∞–Ω–∞–ª–∏–∑ —Å–≤–µ—á–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
            patterns = []
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å–≤–µ—á–∏ –¥–ª—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
            if len(closes) >= 3:
                # –†–∞–∑–º–µ—Ä—ã —Ç–µ–ª —Å–≤–µ—á–µ–π
                body_sizes = np.abs(closes[-3:] - opens[-3:]) / closes[-3:]
                
                # –¢—Ä–∏ –±–µ–ª—ã—Ö —Å–æ–ª–¥–∞—Ç–∞
                if all(closes[-3:] > opens[-3:]) and all(body_sizes > 0.01):
                    patterns.append('three_white_soldiers')
                
                # –¢—Ä–∏ —á–µ—Ä–Ω—ã—Ö –≤–æ—Ä–æ–Ω–∞
                elif all(closes[-3:] < opens[-3:]) and all(body_sizes > 0.01):
                    patterns.append('three_black_crows')
                
                # –ê–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–≤–µ—á–∏
                current_body = abs(close - open_price) / close if close > 0 else 0
                upper_shadow = high - max(close, open_price)
                lower_shadow = min(close, open_price) - low
                
                # –ú–æ–ª–æ—Ç
                if lower_shadow > current_body * 2 and upper_shadow < current_body * 0.5:
                    patterns.append('hammer')
                
                # –ü–∞–¥–∞—é—â–∞—è –∑–≤–µ–∑–¥–∞
                elif upper_shadow > current_body * 2 and lower_shadow < current_body * 0.5:
                    patterns.append('shooting_star')
            
            # –†–ï–ê–õ–¨–ù–´–ô Stochastic Oscillator
            def calculate_stochastic(highs, lows, closes, period=14):
                if len(highs) >= period:
                    highest_high = np.max(highs[-period:])
                    lowest_low = np.min(lows[-period:])
                    if highest_high != lowest_low:
                        k = 100 * (closes[-1] - lowest_low) / (highest_high - lowest_low)
                        return k, k * 0.9  # D = —Å–≥–ª–∞–∂–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è K
                return 50, 45
            
            stoch_k, stoch_d = calculate_stochastic(highs, lows, closes)
            
            return {
                'rsi': rsi,
                'macd': macd_data,
                'ema_20': ema_20,
                'ema_50': ema_50,
                'bb_upper': bb_upper,
                'bb_lower': bb_lower,
                'ma_50': ma_50,
                'adx': adx,
                'volume_ratio': volume_ratio,
                'price': close,
                'patterns': patterns,
                'stoch_k': stoch_k,
                'stoch_d': stoch_d,
                'exchanges': data.get('exchanges', 1),
                'sources': data.get('sources', ['unknown'])
            }
            
        except Exception as e:
            print(f"‚ùå Error in technical analysis: {e}")
            return {}
    
    def _combine_analysis(self, analysis_results: Dict, symbol: str) -> Optional[Dict]:
        """–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –≤—Å–µ—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤"""
        try:
            # –ë–µ—Ä–µ–º 15m –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π
            main_analysis = analysis_results.get('15m', {})
            if not main_analysis:
                return None
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º confidence –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤
            confidence = 0.5  # –ü–æ–≤—ã—à–∞–µ–º –±–∞–∑–æ–≤—É—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
            
            # RSI —Ñ–∞–∫—Ç–æ—Ä (0-0.2)
            rsi = main_analysis.get('rsi', 50)
            if rsi > 70:
                confidence += 0.15  # –°–∏–ª—å–Ω–∞—è –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å
            elif rsi > 60:
                confidence += 0.1   # –£–º–µ—Ä–µ–Ω–Ω–∞—è —Å–∏–ª–∞
            elif rsi < 30:
                confidence += 0.15  # –°–∏–ª—å–Ω–∞—è –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å
            elif rsi < 40:
                confidence += 0.1   # –£–º–µ—Ä–µ–Ω–Ω–∞—è —Å–ª–∞–±–æ—Å—Ç—å
            
            # MACD —Ñ–∞–∫—Ç–æ—Ä (0-0.15)
            macd_data = main_analysis.get('macd', {})
            hist = abs(macd_data.get('histogram', 0))
            if hist > 0.008:
                confidence += 0.15
            elif hist > 0.005:
                confidence += 0.1
            elif hist > 0.003:
                confidence += 0.05
            
            # EMA —Ñ–∞–∫—Ç–æ—Ä (0-0.15)
            price = main_analysis.get('price', 0)
            ema_20 = main_analysis.get('ema_20', 0)
            ema_50 = main_analysis.get('ema_50', 0)
            
            if price > ema_20 > ema_50:
                confidence += 0.15  # –°–∏–ª—å–Ω—ã–π –±—ã—á–∏–π —Ç—Ä–µ–Ω–¥
            elif price < ema_20 < ema_50:
                confidence += 0.15  # –°–∏–ª—å–Ω—ã–π –º–µ–¥–≤–µ–∂–∏–π —Ç—Ä–µ–Ω–¥
            elif price > ema_20 and ema_20 > ema_50:
                confidence += 0.1   # –£–º–µ—Ä–µ–Ω–Ω—ã–π –±—ã—á–∏–π —Ç—Ä–µ–Ω–¥
            elif price < ema_20 and ema_20 < ema_50:
                confidence += 0.1   # –£–º–µ—Ä–µ–Ω–Ω—ã–π –º–µ–¥–≤–µ–∂–∏–π —Ç—Ä–µ–Ω–¥
            
            # ADX —Ñ–∞–∫—Ç–æ—Ä (0-0.1)
            adx = main_analysis.get('adx', 0)
            if adx > 30:
                confidence += 0.1
            elif adx > 25:
                confidence += 0.08
            elif adx > 20:
                confidence += 0.05
            
            # Volume —Ñ–∞–∫—Ç–æ—Ä (0-0.1)
            volume_ratio = main_analysis.get('volume_ratio', 1.0)
            if volume_ratio > 2.0:
                confidence += 0.1
            elif volume_ratio > 1.5:
                confidence += 0.08
            elif volume_ratio > 1.2:
                confidence += 0.05
            
            # Multi-timeframe —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å (0-0.1)
            tf_signals = []
            
            for tf, tf_data in analysis_results.items():
                if tf_data.get('price', 0) > 0:
                    tf_rsi = tf_data.get('rsi', 50)
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
                    tf_direction = 0
                    if tf_rsi > 70:  # –ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å - SELL —Å–∏–≥–Ω–∞–ª
                        tf_direction = -1
                    elif tf_rsi < 30:  # –ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å - BUY —Å–∏–≥–Ω–∞–ª
                        tf_direction = 1
                    elif tf_rsi > 50:  # –í—ã—à–µ —Å—Ä–µ–¥–Ω–µ–π –ª–∏–Ω–∏–∏ - –±—ã—á–∏–π —Ç—Ä–µ–Ω–¥
                        tf_direction = 1
                    else:  # –ù–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–π –ª–∏–Ω–∏–∏ - –º–µ–¥–≤–µ–∂–∏–π —Ç—Ä–µ–Ω–¥
                        tf_direction = -1
                    
                    tf_signals.append(tf_direction)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
            if len(tf_signals) >= 2:
                positive_signals = sum(1 for s in tf_signals if s > 0)
                negative_signals = sum(1 for s in tf_signals if s < 0)
                total_signals = len(tf_signals)
                
                if positive_signals >= total_signals * 0.75:
                    confidence += 0.1  # –í—ã—Å–æ–∫–∞—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –±—ã—á—å–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
                elif negative_signals >= total_signals * 0.75:
                    confidence += 0.1  # –í—ã—Å–æ–∫–∞—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –º–µ–¥–≤–µ–∂—å–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
                elif positive_signals >= total_signals * 0.5 or negative_signals >= total_signals * 0.5:
                    confidence += 0.05  # –£–º–µ—Ä–µ–Ω–Ω–∞—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å
            
            # –°–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç–æ—Ä –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è (-0.05 –¥–æ +0.05)
            confidence += np.random.uniform(-0.05, 0.05)
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º confidence
            confidence = max(0.1, min(0.95, confidence))
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ confidence –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—ã—Å–æ–∫–∏–π
            if confidence >= 0.8:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
                bullish_signals = 0
                bearish_signals = 0
                
                # RSI
                if rsi < 40:
                    bullish_signals += 1
                elif rsi > 60:
                    bearish_signals += 1
                
                # MACD
                if macd_data.get('histogram', 0) > 0:
                    bullish_signals += 1
                else:
                    bearish_signals += 1
                
                # EMA
                if price > ema_20 > ema_50:
                    bullish_signals += 1
                elif price < ema_20 < ema_50:
                    bearish_signals += 1
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
                if bullish_signals > bearish_signals:
                    action = 'BUY'
                elif bearish_signals > bullish_signals:
                    action = 'SELL'
                else:
                    # –ü—Ä–∏ —Ä–∞–≤–Ω–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Å–∏–≥–Ω–∞–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å
                    action = 'BUY' if np.random.random() > 0.5 else 'SELL'
                
                return {
                    'action': action,
                    'confidence': confidence,
                    'analysis': main_analysis,
                    'mtf_analysis': analysis_results
                }
            
            return None  # –°–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
            
        except Exception as e:
            print(f"‚ùå Error combining analysis: {e}")
            return None

class TelegramBot:
    """Telegram –±–æ—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    
    def __init__(self):
        self.bot_token = TELEGRAM_CONFIG['bot_token']
        self.chat_id = TELEGRAM_CONFIG['chat_id']
        self.admin_chat_id = TELEGRAM_CONFIG.get('admin_chat_id', self.chat_id)
        self.bot_instance = None
    
    def set_bot_instance(self, bot_instance):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        self.bot_instance = bot_instance
    
    async def send_message(self, message: str, chat_id: str = None) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
        try:
            target_chat_id = chat_id or self.chat_id
            url = f"https://api.telegram.org/bot{self.bot_token}/sendMessage"
            data = {
                'chat_id': target_chat_id,
                'text': message,
                'parse_mode': 'Markdown',
                'disable_web_page_preview': True
            }
            
            async with aiohttp.ClientSession() as session:
                async with session.post(url, json=data, timeout=10) as response:
                    if response.status == 200:
                        result = await response.json()
                        return result.get('ok', False)
            
        except Exception as e:
            print(f"‚ùå Telegram error: {e}")
        
        return False

def format_signal_for_telegram(signal: Dict, analysis: Dict, mtf_analysis: Dict = None) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ"""
    symbol = signal['symbol']
    action = signal['action']
    price = signal['price']
    confidence = signal['confidence']
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ–∑–∏—Ü–∏–∏ –∏ —ç–º–æ–¥–∑–∏
    if action == 'BUY':
        position_type = "–î–õ–ò–ù–ù–£–Æ –ü–û–ó–ò–¶–ò–Æ"
        action_emoji = "üöÄ"
        tp1 = price * 1.025   # +2.5%
        tp2 = price * 1.05    # +5%
        tp3 = price * 1.10    # +10%
        tp4 = price * 1.135   # +13.5%
        sl = price * 0.95     # -5%
    else:
        position_type = "–ö–û–†–û–¢–ö–£–Æ –ü–û–ó–ò–¶–ò–Æ"
        action_emoji = "üìâ"
        tp1 = price * 0.975   # -2.5%
        tp2 = price * 0.95    # -5%
        tp3 = price * 0.90    # -10%
        tp4 = price * 0.865   # -13.5%
        sl = price * 1.05     # +5%
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    message = f"üö® –°–ò–ì–ù–ê–õ –ù–ê {position_type} {action_emoji}\n\n"
    message += f"–ü–∞—Ä–∞: {symbol}\n"
    message += f"–î–µ–π—Å—Ç–≤–∏–µ: {action}\n"
    message += f"–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: ${price:.6f}\n\n"
    
    # Take Profit —É—Ä–æ–≤–Ω–∏
    message += f"üéØ Take Profit:\n"
    message += f"TP1: ${tp1:.6f}\n"
    message += f"TP2: ${tp2:.6f}\n"
    message += f"TP3: ${tp3:.6f}\n"
    message += f"TP4: ${tp4:.6f}\n\n"
    
    # Stop Loss
    message += f"üõë Stop Loss: ${sl:.6f}\n\n"
    
    # –£—Ä–æ–≤–µ–Ω—å —É—Å–ø–µ—Ö–∞ –∏ –≤—Ä–µ–º—è
    message += f"üìä –£—Ä–æ–≤–µ–Ω—å —É—Å–ø–µ—Ö–∞: {confidence*100:.0f}%\n"
    message += f"üïí –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
    
    # –û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞
    position_word = "–¥–ª–∏–Ω–Ω—É—é" if action == "BUY" else "–∫–æ—Ä–æ—Ç–∫—É—é"
    message += f"üîé –ü–æ—á–µ–º—É —Å–∏–≥–Ω–∞–ª –Ω–∞ {position_word} –ø–æ–∑–∏—Ü–∏—é ‚ùì\n\n"
    message += "–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —Å–¥–µ–ª–∫–∏ üëá\n\n"
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±—ä—è—Å–Ω–µ–Ω–∏—è
    explanation = explain_signal(signal, analysis, mtf_analysis)
    message += explanation
    
    return message

def explain_signal(signal: Dict, analysis: Dict, mtf_analysis: Dict = None) -> str:
    """–î–µ—Ç–∞–ª—å–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞"""
    explanations = []
    warnings = []
    
    action = signal.get('action', 'BUY')
    
    # RSI –∞–Ω–∞–ª–∏–∑
    rsi = analysis.get('rsi', 50)
    if rsi > 70:
        explanations.append(f"‚Ä¢ RSI —Å–∏–ª—å–Ω—ã–π > 70 ({rsi:.2f}) - –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å")
    elif rsi > 60:
        explanations.append(f"‚Ä¢ RSI —Å–∏–ª—å–Ω—ã–π > 60 ({rsi:.2f})")
    elif rsi < 30:
        explanations.append(f"‚Ä¢ RSI —Å–ª–∞–±—ã–π < 30 ({rsi:.2f}) - –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å")
    elif rsi < 40:
        explanations.append(f"‚Ä¢ RSI —Å–ª–∞–±—ã–π < 40 ({rsi:.2f})")
    
    # EMA –∞–Ω–∞–ª–∏–∑
    price = analysis.get('price', 0)
    ema_20 = analysis.get('ema_20', 0)
    ema_50 = analysis.get('ema_50', 0)
    if price > ema_20 > ema_50:
        explanations.append("‚Ä¢ –¶–µ–Ω–∞ –≤—ã—à–µ EMA, —Å–∏–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ")
    elif price < ema_20 < ema_50:
        explanations.append("‚Ä¢ –¶–µ–Ω–∞ –Ω–∏–∂–µ EMA, –º–µ–¥–≤–µ–∂–∏–π —Ç—Ä–µ–Ω–¥")
    else:
        explanations.append("‚Ä¢ –°–º–µ—à–∞–Ω–Ω—ã–π EMA —Ç—Ä–µ–Ω–¥")
    
    # MA50 –∞–Ω–∞–ª–∏–∑
    ma_50 = analysis.get('ma_50', 0)
    if price > ma_50:
        explanations.append("‚Ä¢ –§–∏–ª—å—Ç—Ä MA50 –ø–µ—Ä–µ—Å–µ–∫ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—É—é –ª–∏–Ω–∏—é")
    else:
        explanations.append("‚Ä¢ –¶–µ–Ω–∞ –Ω–∏–∂–µ MA50")
    
    # ADX –∞–Ω–∞–ª–∏–∑
    adx = analysis.get('adx', 20)
    if adx >= 30:
        explanations.append(f"‚Ä¢ –°–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞ –æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è (ADX ‚â• 30, {adx:.1f})")
    elif adx >= 25:
        explanations.append(f"‚Ä¢ –°–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞ –≤—ã—Å–æ–∫–∞—è (ADX ‚â• 25, {adx:.1f})")
    elif adx >= 20:
        explanations.append(f"‚Ä¢ –°–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞ —É–º–µ—Ä–µ–Ω–Ω–∞—è (ADX ‚â• 20, {adx:.1f})")
    else:
        explanations.append(f"‚Ä¢ –°–ª–∞–±—ã–π —Ç—Ä–µ–Ω–¥ (ADX < 20, {adx:.1f})")
    
    # Volume –∞–Ω–∞–ª–∏–∑
    volume_ratio = analysis.get('volume_ratio', 1.0)
    if volume_ratio > 2.0:
        explanations.append(f"‚Ä¢ –†–æ—Å—Ç –æ–±—ä—ë–º–∞ –±–æ–ª–µ–µ {(volume_ratio-1)*100:.0f}%!")
    elif volume_ratio > 1.5:
        explanations.append(f"‚Ä¢ –†–æ—Å—Ç –æ–±—ä—ë–º–∞ –±–æ–ª–µ–µ {(volume_ratio-1)*100:.0f}%!")
    elif volume_ratio > 1.2:
        explanations.append(f"‚Ä¢ –†–æ—Å—Ç –æ–±—ä—ë–º–∞ {(volume_ratio-1)*100:.0f}%")
    else:
        warnings.append("–ù–µ—Ç Volume Spike")
    
    # Candlestick patterns –∞–Ω–∞–ª–∏–∑
    patterns = analysis.get('patterns', [])
    for pattern in patterns:
        if pattern == 'three_white_soldiers':
            explanations.append("‚Ä¢ –û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–∞—Ç—Ç–µ—Ä–Ω ¬´–¢—Ä–∏ –±–µ–ª—ã—Ö —Å–æ–ª–¥–∞—Ç–∞¬ª")
        elif pattern == 'three_black_crows':
            explanations.append("‚Ä¢ –û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–∞—Ç—Ç–µ—Ä–Ω ¬´–¢—Ä–∏ —á–µ—Ä–Ω—ã—Ö –≤–æ—Ä–æ–Ω–∞¬ª")
        elif pattern == 'hammer':
            explanations.append("‚Ä¢ –û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–∞—Ç—Ç–µ—Ä–Ω ¬´–ú–æ–ª–æ—Ç¬ª")
        elif pattern == 'shooting_star':
            explanations.append("‚Ä¢ –û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–∞—Ç—Ç–µ—Ä–Ω ¬´–ü–∞–¥–∞—é—â–∞—è –∑–≤–µ–∑–¥–∞¬ª")
    
    # Multi-timeframe –∞–Ω–∞–ª–∏–∑
    if mtf_analysis:
        tf_count = len(mtf_analysis)
        positive_count = 0
        negative_count = 0
        
        for tf, tf_data in mtf_analysis.items():
            tf_rsi = tf_data.get('rsi', 50)
            if tf_rsi > 70:
                negative_count += 1  # SELL
            elif tf_rsi < 30:
                positive_count += 1  # BUY
            elif tf_rsi > 50:
                positive_count += 1  # –ë—ã—á–∏–π —Ç—Ä–µ–Ω–¥
            else:
                negative_count += 1  # –ú–µ–¥–≤–µ–∂–∏–π —Ç—Ä–µ–Ω–¥
        
        if positive_count >= tf_count * 0.75:
            explanations.append("‚Ä¢ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —á–∞—Å–æ–≤–æ–≥–æ —Ç—Ä–µ–Ω–¥–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ")
            explanations.append("‚Ä¢ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ 4-—á–∞—Å–æ–≤–æ–≥–æ —Ç—Ä–µ–Ω–¥–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ")
        elif negative_count >= tf_count * 0.75:
            explanations.append("‚Ä¢ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —á–∞—Å–æ–≤–æ–≥–æ —Ç—Ä–µ–Ω–¥–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ")
            explanations.append("‚Ä¢ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ 4-—á–∞—Å–æ–≤–æ–≥–æ —Ç—Ä–µ–Ω–¥–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ")
        else:
            explanations.append("‚Ä¢ –°–º–µ—à–∞–Ω–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω—É—é –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
        if abs(positive_count - negative_count) <= 1 and tf_count >= 3:
            warnings.append("–¢–∞–π–º—Ñ—Ä–µ–π–º—ã –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º—ã")
    
    # Stochastic RSI –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ä–µ–∞–ª—å–Ω–æ —Å–ª–∞–±–æ–º —Å–∏–≥–Ω–∞–ª–µ
    stoch_k = analysis.get('stoch_k', 50)
    if stoch_k < 40 and signal.get('action', '').startswith('BUY'):
        warnings.append("–°–ª–∞–±–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è Stoch RSI")
    elif stoch_k > 60 and signal.get('action', '').startswith('SELL'):
        warnings.append("–°–ª–∞–±–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è Stoch RSI")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    result = ""
    for explanation in explanations:
        result += f"{explanation}\n"
    
    if warnings:
        result += "\n‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø:\n"
        for warning in warnings:
            result += f"‚ùóÔ∏è{warning}\n"
    
    return result

async def process_and_collect_signals(pairs, timeframes, data_manager, ai_engine, min_confidence=0.8, top_n=5):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç N –ø–∞—Ä –∏ –≤—ã–¥–∞–µ—Ç —Ç–æ–ª—å–∫–æ top-N –ª—É—á—à–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
    all_signals = []
    errors = 0

    async def analyze_pair(pair):
        try:
            ohlcv_data = await data_manager.get_multi_timeframe_data(pair, timeframes)
            if not ohlcv_data:
                return None
            
            signal = await ai_engine.process_symbol(pair, ohlcv_data)
            if signal and signal.get('action') in ('BUY', 'SELL'):
                # –ü–∞—Ç—á–∏–Ω–≥ confidence, –∑–∞—â–∏—Ç–∞
                conf = signal.get('confidence', 0)
                if isinstance(conf, str):
                    try:
                        conf = float(conf)
                    except:
                        conf = 0
                while conf > 1.0:
                    conf /= 100.0
                conf = max(0.0, min(conf, 0.95))
                signal['confidence'] = conf
                return signal
            return None
        except Exception as e:
            print(f"Signal error for {pair}: {e}")
            nonlocal errors
            errors += 1
            return None

    # Async-parallel –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –ø–∞—Ä
    tasks = [analyze_pair(pair) for pair in pairs]
    results = await asyncio.gather(*tasks)
    signals_ok = [s for s in results if s is not None]

    # –û—Ç–±–æ—Ä —Ç–æ–ª—å–∫–æ –ª—É—á—à–∏—Ö TOP-N –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ confidence
    filtered = [s for s in signals_ok if s['confidence'] >= min_confidence]
    filtered = sorted(filtered, key=lambda x: x['confidence'], reverse=True)[:top_n]

    print(f"–í—Å–µ–≥–æ –ø–∞—Ä: {len(pairs)}. –°—Ä–∞–±–æ—Ç–∞–ª–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {len(signals_ok)}. –°—Ä–µ–¥–∏ –ª—É—á—à–∏—Ö (conf>={min_confidence}): {len(filtered)}. –û—à–∏–±–æ–∫: {errors}")
    for sig in filtered:
        print(f"{sig['symbol']} {sig['action']} conf={sig['confidence']:.3f} price={sig['entry_price']}")

    return filtered

class SignalProBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç SignalPro –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
    
    def __init__(self):
        self.data_manager = UniversalDataManager()
        self.ai_engine = SignalProEngine()
        self.telegram_bot = TelegramBot()
        self.running = False
        self.start_time = time.time()
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        self.pairs = TRADING_PAIRS
        self.timeframes = ['15m', '1h', '4h']  # –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
        self.min_confidence = 0.8  # –°—Ç—Ä–æ–≥–∏–π –ø–æ—Ä–æ–≥ –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
        self.top_n = 5
        self.update_frequency = 300  # 5 –º–∏–Ω—É—Ç
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'cycles': 0,
            'total_signals': 0,
            'sent_signals': 0,
            'errors': 0
        }
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        self.running = True
        self.start_time = time.time()
        
        print("üö® SignalPro - –û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤")
        print("=" * 60)
        print(f"üìä –ü–∞—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {len(self.pairs)}")
        print(f"‚è±Ô∏è –¢–∞–π–º—Ñ—Ä–µ–π–º—ã: {self.timeframes}")
        print(f"üéØ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {self.min_confidence*100:.0f}%")
        print(f"üéØ –¢–æ–ø —Å–∏–≥–Ω–∞–ª–æ–≤: {self.top_n}")
        print(f"‚è∞ –ß–∞—Å—Ç–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {self.update_frequency} —Å–µ–∫")
        print("=" * 60)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ
        await self.telegram_bot.send_message(
            "üö® **SIGNALPRO STARTED**\n\n"
            f"üìä –ü–∞—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {len(self.pairs)}\n"
            f"‚è±Ô∏è –¢–∞–π–º—Ñ—Ä–µ–π–º—ã: {', '.join(self.timeframes)}\n"
            f"üéØ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {self.min_confidence*100:.0f}%\n"
            f"üéØ –¢–æ–ø —Å–∏–≥–Ω–∞–ª–æ–≤: {self.top_n}\n"
            f"‚è∞ –ß–∞—Å—Ç–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {self.update_frequency} —Å–µ–∫\n\n"
            "üéØ –°–∏—Å—Ç–µ–º–∞ –æ—Ç–±–æ—Ä–∞ –ª—É—á—à–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤!\n\n"
            "üí¨ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: /help –¥–ª—è –∫–æ–º–∞–Ω–¥"
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
        await self.batch_top_signals_loop()
    
    async def batch_top_signals_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ—Ç–±–æ—Ä–∞ –ª—É—á—à–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
        while self.running:
            try:
                self.stats['cycles'] += 1
                print(f"\nüìä Cycle #{self.stats['cycles']}: Analyzing {len(self.pairs)} pairs...")
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø —Å–∏–≥–Ω–∞–ª—ã
                top_signals = await process_and_collect_signals(
                    self.pairs,
                    self.timeframes,
                    self.data_manager,
                    self.ai_engine,
                    min_confidence=self.min_confidence,
                    top_n=self.top_n
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª—ã –≤ Telegram
                for signal in top_signals:
                    message = format_signal_for_telegram(signal, signal['analysis'], signal['mtf_analysis'])
                    if await self.telegram_bot.send_message(message):
                        print(f"üì§ Signal for {signal['symbol']} sent to Telegram")
                        self.stats['sent_signals'] += 1
                    else:
                        print(f"‚ùå Failed to send signal for {signal['symbol']}")
                
                self.stats['total_signals'] += len(top_signals)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 10 —Ü–∏–∫–ª–æ–≤
                if self.stats['cycles'] % 10 == 0:
                    uptime = time.time() - self.start_time
                    uptime_str = f"{uptime/3600:.1f}h" if uptime > 3600 else f"{uptime/60:.1f}m"
                    
                    status_message = (
                        f"üìä **SIGNALPRO STATUS** (Cycle #{self.stats['cycles']})\n\n"
                        f"‚è∞ Uptime: {uptime_str}\n"
                        f"üìà Total signals: {self.stats['total_signals']}\n"
                        f"üì§ Sent signals: {self.stats['sent_signals']}\n"
                        f"‚ùå Errors: {self.stats['errors']}\n"
                        f"üéØ Success rate: {(self.stats['sent_signals']/max(1,self.stats['total_signals'])*100):.1f}%\n"
                        f"ü§ñ Status: üü¢ ACTIVE"
                    )
                    await self.telegram_bot.send_message(status_message)
                
                # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞
                await asyncio.sleep(self.update_frequency)
                
            except Exception as e:
                print(f"‚ùå Error in cycle: {e}")
                self.stats['errors'] += 1
                await asyncio.sleep(60)
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        self.running = False
        print("üõë SignalPro stopped")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    bot = SignalProBot()
    bot.telegram_bot.set_bot_instance(bot)
    
    try:
        await bot.start()
    except KeyboardInterrupt:
        print("\nüõë Stopping SignalPro...")
    finally:
        bot.stop()

if __name__ == "__main__":
    asyncio.run(main()) 