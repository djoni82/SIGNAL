#!/usr/bin/env python3
"""
Advanced AI Engine - –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π AI –¥–≤–∏–∂–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
"""

import asyncio
import pandas as pd
import numpy as np
from typing import Dict, List, Any, Optional
from datetime import datetime
import logging

from advanced_technical_analyzer import AdvancedTechnicalAnalyzer
from signal_explainer import SignalExplainer

logger = logging.getLogger(__name__)

class AdvancedAIEngine:
    """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π AI –¥–≤–∏–∂–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–∞—Ä"""
    
    def __init__(self, config: Dict[str, Any]):
        self.config = config
        self.analyzer = AdvancedTechnicalAnalyzer()
        self.explainer = SignalExplainer()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∞–ª–∏–∑–∞ - –æ—á–µ–Ω—å –º—è–≥–∫–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        self.analysis_config = config.get('analysis', {})
        self.min_confidence = self.analysis_config.get('min_confidence', 0.3)  # 30% –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        self.min_risk_reward = self.analysis_config.get('min_risk_reward', 1.0)  # 1.0 –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        self.max_signals_per_cycle = self.analysis_config.get('max_signals_per_cycle', 10)
        
        # –§–∏–ª—å—Ç—Ä—ã
        self.filters = {
            'volume_spike': True,
            'trend_confirmation': True,
            'pattern_recognition': True,
            'support_resistance': True,
            'multiframe_consensus': True
        }
        
        logger.info("üß† Advanced AI Engine –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        logger.info(f"‚öôÔ∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {self.min_confidence*100:.0f}%")
        logger.info(f"‚öñÔ∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π Risk/Reward: {self.min_risk_reward}")
    
    async def process_symbol(self, pair: str, ohlcv_data: Dict[str, pd.DataFrame]) -> Optional[Dict[str, Any]]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω—É —Ç–æ—Ä–≥–æ–≤—É—é –ø–∞—Ä—É
        
        Args:
            pair: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
            ohlcv_data: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º
            
        Returns:
            –°–∏–≥–Ω–∞–ª –∏–ª–∏ None
        """
        try:
            if not ohlcv_data or len(ohlcv_data) < 2:
                return None
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ç–∞–π–º—Ñ—Ä–µ–π–º
            timeframe_analysis = {}
            for tf, data in ohlcv_data.items():
                if len(data) < 20:
                    continue
                
                analysis = self.analyzer._analyze_single_timeframe(data)
                support_resistance = self.analyzer.calculate_support_resistance(data)
                analysis.update(support_resistance)
                timeframe_analysis[tf] = analysis
            
            if not timeframe_analysis:
                return None
            
            # –°–æ–∑–¥–∞–µ–º –º—É–ª—å—Ç–∏—Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
            mtf_analysis = self._create_mtf_analysis(timeframe_analysis)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª
            signal = self._generate_signal(pair, ohlcv_data, timeframe_analysis, mtf_analysis)
            
            if signal and signal.get('action') in ['BUY', 'SELL']:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–∞
                if self._validate_signal_quality(signal, timeframe_analysis, mtf_analysis):
                    return signal
            
            return None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {pair}: {e}")
            return None
    
    def _create_mtf_analysis(self, timeframe_analysis: Dict[str, Dict[str, Any]]) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–µ—Ç –º—É–ª—å—Ç–∏—Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑"""
        try:
            mtf_analysis = {
                'timeframes': timeframe_analysis,
                'overall_trend': 'neutral',
                'consensus_score': 0,
                'trend_agreement': 0
            }
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å —Ç—Ä–µ–Ω–¥–æ–≤
            bullish_count = 0
            bearish_count = 0
            total_timeframes = len(timeframe_analysis)
            
            for tf_data in timeframe_analysis.values():
                trend = tf_data.get('trend', 'neutral')
                if trend == 'bullish':
                    bullish_count += 1
                elif trend == 'bearish':
                    bearish_count += 1
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Ç—Ä–µ–Ω–¥
            if bullish_count > bearish_count:
                mtf_analysis['overall_trend'] = 'bullish'
                mtf_analysis['trend_agreement'] = bullish_count / total_timeframes
            elif bearish_count > bullish_count:
                mtf_analysis['overall_trend'] = 'bearish'
                mtf_analysis['trend_agreement'] = bearish_count / total_timeframes
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º consensus score
            consensus_factors = []
            
            # RSI consensus
            rsi_values = [tf_data.get('rsi', 50) for tf_data in timeframe_analysis.values()]
            rsi_consensus = self._calculate_consensus(rsi_values, 30, 70)
            consensus_factors.append(rsi_consensus)
            
            # MACD consensus
            macd_histograms = [tf_data.get('macd', {}).get('histogram', 0) for tf_data in timeframe_analysis.values()]
            macd_consensus = self._calculate_consensus(macd_histograms, -0.01, 0.01)
            consensus_factors.append(macd_consensus)
            
            # ADX consensus
            adx_values = [tf_data.get('adx', {}).get('adx', 0) for tf_data in timeframe_analysis.values()]
            adx_consensus = self._calculate_consensus(adx_values, 0, 25)
            consensus_factors.append(adx_consensus)
            
            mtf_analysis['consensus_score'] = np.mean(consensus_factors) if consensus_factors else 0
            
            return mtf_analysis
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è MTF –∞–Ω–∞–ª–∏–∑–∞: {e}")
            return {'timeframes': timeframe_analysis, 'overall_trend': 'neutral', 'consensus_score': 0}
    
    def _calculate_consensus(self, values: List[float], min_threshold: float, max_threshold: float) -> float:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç consensus score –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏–π"""
        try:
            if not values:
                return 0
            
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
            normalized = []
            for val in values:
                if val < min_threshold:
                    normalized.append(0)
                elif val > max_threshold:
                    normalized.append(1)
                else:
                    normalized.append((val - min_threshold) / (max_threshold - min_threshold))
            
            return np.mean(normalized)
            
        except Exception:
            return 0
    
    def _generate_signal(self, pair: str, ohlcv_data: Dict[str, pd.DataFrame], 
                        timeframe_analysis: Dict[str, Dict[str, Any]], 
                        mtf_analysis: Dict[str, Any]) -> Optional[Dict[str, Any]]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª —Å –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–º–∏ –∫—Ä–∏—Ç–µ—Ä–∏—è–º–∏"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ (15m –∏–ª–∏ 1h)
            primary_tf = '15m' if '15m' in ohlcv_data else '1h' if '1h' in ohlcv_data else list(ohlcv_data.keys())[0]
            primary_data = ohlcv_data[primary_tf]
            primary_analysis = timeframe_analysis[primary_tf]
            
            current_price = primary_data['close'].iloc[-1]
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            rsi = primary_analysis.get('rsi', 50)
            macd_hist = primary_analysis.get('macd', {}).get('histogram', 0)
            adx = primary_analysis.get('adx', {}).get('adx', 0)
            volume_ratio = primary_analysis.get('volume', {}).get('ratio', 1.0)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å - –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏
            action = 'HOLD'
            confidence = 0.5
            alpha_score = 0
            
            # RSI –∞–Ω–∞–ª–∏–∑ - –æ—á–µ–Ω—å –º—è–≥–∫–∏–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            if rsi > 60:  # –ë—ã–ª–æ 75
                action = 'SELL'
                confidence += 0.2
                alpha_score += 1
            elif rsi < 40:  # –ë—ã–ª–æ 25
                action = 'BUY'
                confidence += 0.2
                alpha_score += 1
            elif 45 <= rsi <= 55:  # –ë—ã–ª–æ 40-60
                confidence += 0.05  # –ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è –∑–æ–Ω–∞
            
            # MACD –∞–Ω–∞–ª–∏–∑ - –æ—á–µ–Ω—å –º—è–≥–∫–∏–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            if abs(macd_hist) > 0.005:  # –ë—ã–ª–æ 0.02
                if macd_hist > 0 and action == 'BUY':
                    confidence += 0.2
                    alpha_score += 1
                elif macd_hist < 0 and action == 'SELL':
                    confidence += 0.2
                    alpha_score += 1
                elif action == 'HOLD':
                    action = 'BUY' if macd_hist > 0 else 'SELL'
                    confidence += 0.2
                    alpha_score += 1
            
            # ADX –∞–Ω–∞–ª–∏–∑ (—Å–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞) - –æ—á–µ–Ω—å –º—è–≥–∫–∏–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            if adx > 20:  # –ë—ã–ª–æ 30
                confidence += 0.15
                alpha_score += 1
            
            # Volume –∞–Ω–∞–ª–∏–∑ - –æ—á–µ–Ω—å –º—è–≥–∫–∏–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            if volume_ratio > 1.2:  # –ë—ã–ª–æ 2.0
                confidence += 0.15
                alpha_score += 1
            
            # –ú—É–ª—å—Ç–∏—Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤—ã–π consensus - –æ—á–µ–Ω—å –º—è–≥–∫–∏–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            consensus_score = mtf_analysis.get('consensus_score', 0)
            if consensus_score > 0.5:  # –ë—ã–ª–æ 0.8
                confidence += 0.2
                alpha_score += 1
            
            # Trend agreement - –æ—á–µ–Ω—å –º—è–≥–∫–∏–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            trend_agreement = mtf_analysis.get('trend_agreement', 0)
            if trend_agreement > 0.4:  # –ë—ã–ª–æ 0.7
                confidence += 0.15
                alpha_score += 1
            
            # –ü–∞—Ç—Ç–µ—Ä–Ω—ã - –æ—á–µ–Ω—å –º—è–≥–∫–∏–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            patterns = primary_analysis.get('patterns', {})
            if patterns:  # –£–±—Ä–∞–ª —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ –º–∏–Ω–∏–º—É–º 2 –ø–∞—Ç—Ç–µ—Ä–Ω–∞
                confidence += 0.15
                alpha_score += 1
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
            if confidence < self.min_confidence:
                action = 'HOLD'
                confidence = 0.5
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º Risk/Reward
            risk_reward = self._calculate_risk_reward(current_price, action, primary_analysis)
            
            # –°–æ–∑–¥–∞–µ–º —Å–∏–≥–Ω–∞–ª
            signal = {
                'action': action,
                'symbol': pair,
                'price': current_price,
                'confidence': min(confidence, 0.95),
                'alpha_score': alpha_score,
                'risk_reward': risk_reward,
                'consensus_score': consensus_score,
                'trend_agreement': trend_agreement,
                'take_profit': self.explainer.calculate_take_profit_levels(current_price, 'long' if action == 'BUY' else 'short'),
                'stop_loss': self.explainer.calculate_stop_loss(current_price, 'long' if action == 'BUY' else 'short'),
                'analysis': primary_analysis,
                'mtf_analysis': mtf_analysis,
                'timestamp': datetime.now().isoformat()
            }
            
            return signal
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è {pair}: {e}")
            return None
    
    def _calculate_risk_reward(self, current_price: float, action: str, analysis: Dict[str, Any]) -> float:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç Risk/Reward ratio"""
        try:
            if action not in ['BUY', 'SELL']:
                return 0
            
            # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–≤–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
            support = analysis.get('support', current_price * 0.95)
            resistance = analysis.get('resistance', current_price * 1.05)
            
            if action == 'BUY':
                # –î–ª—è –ø–æ–∫—É–ø–∫–∏: –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å = —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ - —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
                # —Ä–∏—Å–∫ = —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ - –ø–æ–¥–¥–µ—Ä–∂–∫–∞
                potential_profit = resistance - current_price
                risk = current_price - support
            else:
                # –î–ª—è –ø—Ä–æ–¥–∞–∂–∏: –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å = —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ - –ø–æ–¥–¥–µ—Ä–∂–∫–∞
                # —Ä–∏—Å–∫ = —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ - —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
                potential_profit = current_price - support
                risk = resistance - current_price
            
            if risk <= 0:
                return 0
            
            return potential_profit / risk
            
        except Exception:
            return 0
    
    def _validate_signal_quality(self, signal: Dict[str, Any], timeframe_analysis: Dict[str, Dict[str, Any]], 
                                mtf_analysis: Dict[str, Any]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–∞ —Å –æ—á–µ–Ω—å –º—è–≥–∫–∏–º–∏ –∫—Ä–∏—Ç–µ—Ä–∏—è–º–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
            if signal.get('confidence', 0) < self.min_confidence:
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º Risk/Reward - –æ—á–µ–Ω—å –º—è–≥–∫–∏–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            if signal.get('risk_reward', 0) < self.min_risk_reward:
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º consensus score - –æ—á–µ–Ω—å –º—è–≥–∫–∏–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            if mtf_analysis.get('consensus_score', 0) < 0.3:  # –ë—ã–ª–æ 0.6
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º trend agreement - –æ—á–µ–Ω—å –º—è–≥–∫–∏–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            if mtf_analysis.get('trend_agreement', 0) < 0.3:  # –ë—ã–ª–æ 0.6
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º alpha score - –æ—á–µ–Ω—å –º—è–≥–∫–∏–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            if signal.get('alpha_score', 0) < 2:  # –ë—ã–ª–æ 4 - –º–∏–Ω–∏–º—É–º 2 –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏—Ö —Ñ–∞–∫—Ç–æ—Ä–∞
                return False
            
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞: {e}")
            return False
    
    async def process_and_collect_signals(self, pairs: List[str], timeframes: List[str], 
                                        data_manager, min_confidence: float = 0.85, top_n: int = 10) -> List[Dict[str, Any]]:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç N –ø–∞—Ä –∏ –≤—ã–¥–∞–µ—Ç —Ç–æ–ª—å–∫–æ top-N –ª—É—á—à–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–æ alpha/confidence.
        - pairs: —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ –≤–∏–¥–∞ "BTC/USDT", ...
        - timeframes: —Å–ø–∏—Å–æ–∫ ['15m','1h','4h','1d']
        - data_manager: –æ–±—ä–µ–∫—Ç, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∏–π OHLCV –ø–æ –≤—Å–µ–º –¢–§
        - ai_engine: —Å–∏–≥–Ω–∞–ª—å–Ω—ã–π –¥–≤–∏–∂–æ–∫
        - min_confidence: –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è —Ç–æ–ø —Å–∏–≥–Ω–∞–ª–∞
        - top_n: —Å–∫–æ–ª—å–∫–æ –ª—É—á—à–∏—Ö –≤—ã–±–∏—Ä–∞—Ç—å –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
        """
        all_signals = []
        errors = 0

        async def analyze_pair(pair):
            try:
                ohlcv_data = await data_manager.get_multi_timeframe_data(pair, timeframes)
                if not ohlcv_data:
                    return None
                signal = await self.process_symbol(pair, ohlcv_data)
                if signal and signal.get('action') in ('BUY', 'SELL'):
                    # –ü–∞—Ç—á–∏–Ω–≥ confidence, –∑–∞—â–∏—Ç–∞ - —Å–æ–≥–ª–∞—Å–Ω–æ –≤–∞—à–µ–º—É —à–∞–±–ª–æ–Ω—É
                    conf = signal.get('confidence', 0)
                    if isinstance(conf, str):
                        try:
                            conf = float(conf)
                        except:
                            conf = 0
                    while conf > 1.0:
                        conf /= 100.0
                    conf = max(0.0, min(conf, 0.95))
                    signal['confidence'] = conf
                    return signal
                return None
            except Exception as e:
                logger.warning(f"Signal error for {pair}: {e}")
                nonlocal errors
                errors += 1
                return None

        # Async-parallel –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –ø–∞—Ä
        tasks = [analyze_pair(pair) for pair in pairs]
        results = await asyncio.gather(*tasks, return_exceptions=True)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        signals_ok = []
        for result in results:
            if isinstance(result, dict) and result is not None:
                signals_ok.append(result)

        # –û—Ç–±–æ—Ä —Ç–æ–ª—å–∫–æ –ª—É—á—à–∏—Ö TOP-N –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ alpha/confidence
        filtered = [s for s in signals_ok if s['confidence'] >= min_confidence]
        filtered = sorted(filtered, key=lambda x: x['confidence'], reverse=True)[:top_n]

        logger.info(f"–í—Å–µ–≥–æ –ø–∞—Ä: {len(pairs)}. –°—Ä–∞–±–æ—Ç–∞–ª–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {len(signals_ok)}. –°—Ä–µ–¥–∏ –ª—É—á—à–∏—Ö (conf>={min_confidence}): {len(filtered)}. –û—à–∏–±–æ–∫: {errors}")
        for sig in filtered:
            logger.info(f"{sig['symbol']} {sig['action']} conf={sig['confidence']:.3f} alpha={sig['alpha_score']} rr={sig['risk_reward']:.2f}")

        return filtered 