#!/usr/bin/env python3
"""
Universal Crypto Alpha Bot - –û—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç —Å Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π
"""

import asyncio
import logging
import time
from datetime import datetime
from typing import Dict, Any, List

from universal_data_manager import UniversalDataManager
from advanced_ai_engine import AdvancedAIEngine
from signal_explainer import SignalExplainer
from telegram_integration import TelegramIntegration
from config import TRADING_CONFIG, ANALYSIS_CONFIG

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('crypto_alpha_bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class UniversalCryptoAlphaBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç —Å —Å–∏—Å—Ç–µ–º–æ–π 'Best Alpha Only' –∏ Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π"""
    
    def __init__(self):
        self.running = False
        self.cycle_count = 0
        self.signal_count = 0
        self.last_signal_time = None
        self.last_signal_time_str = "–ù–µ—Ç"
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        self.config = {
            'trading': TRADING_CONFIG,
            'analysis': ANALYSIS_CONFIG
        }
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.data_manager = UniversalDataManager()
        self.ai_engine = AdvancedAIEngine(self.config)
        self.signal_explainer = SignalExplainer()
        self.telegram = TelegramIntegration()
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        self.pairs = TRADING_CONFIG['pairs']
        self.timeframes = TRADING_CONFIG['timeframes']
        self.update_frequency = TRADING_CONFIG['update_frequency']
        self.min_confidence = TRADING_CONFIG['min_confidence']
        self.top_signals = TRADING_CONFIG['top_signals']
        
        logger.info(f"ü§ñ CryptoAlphaPro Bot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        logger.info(f"üìä –ü–∞—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {len(self.pairs)}")
        logger.info(f"‚è±Ô∏è –¢–∞–π–º—Ñ—Ä–µ–π–º—ã: {self.timeframes}")
        logger.info(f"üéØ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {self.min_confidence*100:.0f}%")
        logger.info(f"üéØ –¢–æ–ø —Å–∏–≥–Ω–∞–ª–æ–≤: {self.top_signals}")
        logger.info(f"‚è∞ –ß–∞—Å—Ç–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {self.update_frequency} —Å–µ–∫")
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
        if self.running:
            logger.warning("‚ö†Ô∏è –ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω!")
            return
        
        self.running = True
        logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ Telegram
        await self._send_status_update()
        
        try:
            await self.batch_top_signals_loop()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
            await self.telegram.send_error(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
        finally:
            self.running = False
            logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–æ—Ç–∞"""
        self.running = False
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
    
    async def batch_top_signals_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤ Telegram"""
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤...")
        
        while self.running:
            try:
                cycle_start = time.time()
                self.cycle_count += 1
                
                logger.info(f"üîÑ –¶–∏–∫–ª #{self.cycle_count} - –ê–Ω–∞–ª–∏–∑ {len(self.pairs)} –ø–∞—Ä...")
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø —Å–∏–≥–Ω–∞–ª—ã
                top_signals = await self._process_and_collect_signals()
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª—ã –≤ Telegram
                if top_signals:
                    logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ {len(top_signals)} —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ Telegram...")
                    for signal in top_signals:
                        await self._send_signal_to_telegram(signal)
                        self.signal_count += 1
                        self.last_signal_time = datetime.now()
                        self.last_signal_time_str = self.last_signal_time.strftime("%H:%M:%S")
                else:
                    logger.info("üì≠ –°–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 10 —Ü–∏–∫–ª–æ–≤
                if self.cycle_count % 10 == 0:
                    await self._send_status_update()
                
                cycle_time = time.time() - cycle_start
                logger.info(f"‚úÖ –¶–∏–∫–ª #{self.cycle_count} –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {cycle_time:.2f} —Å–µ–∫")
                
                # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞
                await asyncio.sleep(self.update_frequency)
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ #{self.cycle_count}: {e}")
                await self.telegram.send_error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ #{self.cycle_count}: {e}")
                await asyncio.sleep(60)  # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
    
    async def _process_and_collect_signals(self) -> List[Dict[str, Any]]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–∞—Ä—ã –∏ —Å–æ–±–∏—Ä–∞–µ—Ç —Ç–æ–ø —Å–∏–≥–Ω–∞–ª—ã"""
        all_signals = []
        errors = 0
        
        async def analyze_pair(pair):
            try:
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—Å–µ–º —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º
                ohlcv_data = await self.data_manager.get_multi_timeframe_data(pair, self.timeframes)
                if not ohlcv_data:
                    return None
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª
                signal = await self.ai_engine.process_symbol(pair, ohlcv_data)
                if signal and signal.get('action') in ('BUY', 'SELL'):
                    # –ü–∞—Ç—á–∏–Ω–≥ confidence
                    conf = signal.get('confidence', 0)
                    if isinstance(conf, str):
                        try:
                            conf = float(conf)
                        except:
                            conf = 0
                    
                    while conf > 1.0:
                        conf /= 100.0
                    
                    conf = max(0.0, min(conf, 0.95))
                    signal['confidence'] = conf
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ
                    if 'analysis' in signal:
                        try:
                            explanation = self.signal_explainer.explain_signal(
                                signal, 
                                signal['analysis'],
                                signal.get('mtf_analysis')
                            )
                            signal['explanation'] = explanation
                        except Exception as e:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞ {pair}: {e}")
                            signal['explanation'] = "–û–±—ä—è—Å–Ω–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
                    
                    return signal
                return None
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {pair}: {e}")
                nonlocal errors
                errors += 1
                return None
        
        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –ø–∞—Ä
        tasks = [analyze_pair(pair) for pair in self.pairs]
        results = await asyncio.gather(*tasks, return_exceptions=True)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
        signals_ok = []
        for result in results:
            if isinstance(result, Exception):
                errors += 1
            elif result is not None:
                signals_ok.append(result)
        
        # –û—Ç–±–æ—Ä —Ç–æ–ª—å–∫–æ –ª—É—á—à–∏—Ö TOP-N —Å–∏–≥–Ω–∞–ª–æ–≤
        filtered = [s for s in signals_ok if s['confidence'] >= self.min_confidence]
        filtered = sorted(filtered, key=lambda x: x['confidence'], reverse=True)[:self.top_signals]
        
        logger.info(f"üìä –í—Å–µ–≥–æ –ø–∞—Ä: {len(self.pairs)}. –°—Ä–∞–±–æ—Ç–∞–ª–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {len(signals_ok)}. "
                   f"–°—Ä–µ–¥–∏ –ª—É—á—à–∏—Ö (conf>={self.min_confidence}): {len(filtered)}. –û—à–∏–±–æ–∫: {errors}")
        
        for sig in filtered:
            logger.info(f"üéØ {sig['symbol']} {sig['action']} conf={sig['confidence']:.3f} "
                       f"price={sig.get('price', 0):.6f}")
        
        return filtered
    
    async def _send_signal_to_telegram(self, signal: Dict[str, Any]):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–∏–≥–Ω–∞–ª –≤ Telegram"""
        try:
            success = await self.telegram.send_signal(signal)
            if success:
                logger.info(f"üì§ –°–∏–≥–Ω–∞–ª {signal['symbol']} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram")
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∏–≥–Ω–∞–ª {signal['symbol']} –≤ Telegram")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏–≥–Ω–∞–ª–∞ –≤ Telegram: {e}")
    
    async def _send_status_update(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –≤ Telegram"""
        try:
            status = {
                'running': self.running,
                'signal_count': self.signal_count,
                'cycle_count': self.cycle_count,
                'last_signal_time_str': self.last_signal_time_str,
                'pairs_count': len(self.pairs),
                'timeframes_count': len(self.timeframes),
                'min_confidence': self.min_confidence,
                'top_signals': self.top_signals,
                'update_frequency': self.update_frequency
            }
            
            success = await self.telegram.send_status_update(status)
            if success:
                logger.info("üì§ –°—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram")
            else:
                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤ Telegram")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –≤ Telegram: {e}")
    
    def get_status(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞"""
        return {
            'running': self.running,
            'signal_count': self.signal_count,
            'cycle_count': self.cycle_count,
            'last_signal_time_str': self.last_signal_time_str,
            'pairs_count': len(self.pairs),
            'timeframes_count': len(self.timeframes),
            'min_confidence': self.min_confidence,
            'top_signals': self.top_signals,
            'update_frequency': self.update_frequency
        }

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    bot = UniversalCryptoAlphaBot()
    
    try:
        await bot.start()
    except KeyboardInterrupt:
        logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        await bot.stop()
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        await bot.telegram.send_error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    asyncio.run(main()) 