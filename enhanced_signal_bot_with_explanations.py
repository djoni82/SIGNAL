#!/usr/bin/env python3
"""
Enhanced Signal Bot with Detailed Explanations
–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –±–æ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è–º–∏
"""

import asyncio
import logging
import time
from datetime import datetime
from typing import Dict, List, Any, Optional
import pandas as pd
import numpy as np

from signal_explainer import SignalExplainer
from advanced_technical_analyzer import AdvancedTechnicalAnalyzer

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class EnhancedSignalBot:
    """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –±–æ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è–º–∏"""
    
    def __init__(self, config: Dict[str, Any]):
        self.config = config
        self.running = False
        self.explainer = SignalExplainer()
        self.analyzer = AdvancedTechnicalAnalyzer()
        self.last_signal_time = 0
        self.signal_count = 0
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
        self.signal_config = config.get('signals', {})
        self.min_confidence = self.signal_config.get('min_confidence', 0.3)
        self.signal_interval = self.signal_config.get('interval', 300)  # 5 –º–∏–Ω—É—Ç
        
        # –°–ø–∏—Å–æ–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä
        self.trading_pairs = config.get('trading_pairs', [
            'BTC/USDT', 'ETH/USDT', 'BNB/USDT', 'ADA/USDT', 'SOL/USDT',
            'DOT/USDT', 'LINK/USDT', 'MATIC/USDT', 'AVAX/USDT', 'ATOM/USDT'
        ])
        
        logger.info(f"üöÄ Enhanced Signal Bot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å {len(self.trading_pairs)} –ø–∞—Ä–∞–º–∏")
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
        self.running = True
        logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        
        while self.running:
            try:
                await self.run_single_cycle()
                await asyncio.sleep(self.signal_config.get('cycle_interval', 60))
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –±–æ—Ç–∞: {e}")
                await asyncio.sleep(10)
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–æ—Ç–∞"""
        self.running = False
        logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    async def run_single_cycle(self):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–¥–∏–Ω —Ü–∏–∫–ª –∞–Ω–∞–ª–∏–∑–∞"""
        logger.info("üîÑ –ù–∞—á–∏–Ω–∞—é —Ü–∏–∫–ª –∞–Ω–∞–ª–∏–∑–∞...")
        
        for pair in self.trading_pairs:
            try:
                await self.analyze_pair(pair)
                await asyncio.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø–∞—Ä–∞–º–∏
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {pair}: {e}")
    
    async def analyze_pair(self, pair: str):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–¥–Ω—É —Ç–æ—Ä–≥–æ–≤—É—é –ø–∞—Ä—É"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ (—Å–∏–º—É–ª—è—Ü–∏—è)
            data = await self.get_market_data(pair)
            if data is None or len(data) < 50:
                return
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            analysis = self.analyzer._analyze_single_timeframe(data)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —É—Ä–æ–≤–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
            support_resistance = self.analyzer.calculate_support_resistance(data)
            analysis.update(support_resistance)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª
            signal = self.generate_signal(pair, data, analysis)
            
            if signal and signal.get('action') not in ['HOLD', 'SKIP']:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Å–∏–≥–Ω–∞–ª–∞–º–∏
                current_time = time.time()
                if current_time - self.last_signal_time >= self.signal_interval:
                    await self.send_signal(signal, analysis)
                    self.last_signal_time = current_time
                    self.signal_count += 1
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {pair}: {e}")
    
    async def get_market_data(self, pair: str) -> Optional[pd.DataFrame]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (—Å–∏–º—É–ª—è—Ü–∏—è)"""
        try:
            # –°–æ–∑–¥–∞–µ–º —Å–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            dates = pd.date_range(start='2024-01-01', periods=100, freq='15min')
            
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —Ç—Ä–µ–Ω–¥–æ–º
            base_price = 0.378300 if 'M/' in pair else 50000 if 'BTC' in pair else 3000
            trend = np.linspace(0, 0.02, 100)
            noise = np.random.normal(0, base_price * 0.001, 100)
            
            prices = base_price + trend + noise
            
            # –°–æ–∑–¥–∞–µ–º OHLC –¥–∞–Ω–Ω—ã–µ
            data = []
            for i, (date, price) in enumerate(zip(dates, prices)):
                open_price = price
                high_price = price + abs(np.random.normal(0, price * 0.002))
                low_price = price - abs(np.random.normal(0, price * 0.002))
                close_price = price + np.random.normal(0, price * 0.001)
                volume = np.random.uniform(1000000, 5000000)
                
                data.append({
                    'timestamp': date,
                    'open': open_price,
                    'high': high_price,
                    'low': low_price,
                    'close': close_price,
                    'volume': volume
                })
            
            df = pd.DataFrame(data)
            df.set_index('timestamp', inplace=True)
            return df
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {pair}: {e}")
            return None
    
    def generate_signal(self, pair: str, data: pd.DataFrame, analysis: Dict[str, Any]) -> Optional[Dict[str, Any]]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª"""
        try:
            current_price = data['close'].iloc[-1]
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            rsi = analysis.get('rsi', 50)
            macd_hist = analysis.get('macd', {}).get('histogram', 0)
            adx = analysis.get('adx', {}).get('adx', 0)
            volume_ratio = analysis.get('volume', {}).get('ratio', 1.0)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
            action = 'HOLD'
            confidence = 0.5
            
            # RSI –∞–Ω–∞–ª–∏–∑
            if rsi > 70:
                action = 'SELL'
                confidence += 0.2
            elif rsi < 30:
                action = 'BUY'
                confidence += 0.2
            
            # MACD –∞–Ω–∞–ª–∏–∑
            if macd_hist > 0.01:
                if action == 'BUY':
                    confidence += 0.15
                elif action == 'HOLD':
                    action = 'BUY'
                    confidence += 0.15
            elif macd_hist < -0.01:
                if action == 'SELL':
                    confidence += 0.15
                elif action == 'HOLD':
                    action = 'SELL'
                    confidence += 0.15
            
            # ADX –∞–Ω–∞–ª–∏–∑ (—Å–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞)
            if adx > 25:
                confidence += 0.1
            
            # Volume –∞–Ω–∞–ª–∏–∑
            if volume_ratio > 1.5:
                confidence += 0.1
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
            if confidence < self.min_confidence:
                action = 'HOLD'
                confidence = 0.5
            
            # –°–æ–∑–¥–∞–µ–º —Å–∏–≥–Ω–∞–ª
            signal = {
                'action': action,
                'symbol': pair,
                'price': current_price,
                'confidence': min(confidence, 0.95),
                'take_profit': self.explainer.calculate_take_profit_levels(current_price, 'long' if action == 'BUY' else 'short'),
                'stop_loss': self.explainer.calculate_stop_loss(current_price, 'long' if action == 'BUY' else 'short')
            }
            
            return signal
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è {pair}: {e}")
            return None
    
    async def send_signal(self, signal: Dict[str, Any], analysis: Dict[str, Any]):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–∏–≥–Ω–∞–ª —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º"""
        try:
            # –°–æ–∑–¥–∞–µ–º –º—É–ª—å—Ç–∏—Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
            mtf_analysis = {
                'timeframes': {
                    '15m': {'trend': 'bullish' if signal['action'] == 'BUY' else 'bearish'},
                    '1h': {'trend': 'bullish' if signal['action'] == 'BUY' else 'bearish'},
                    '4h': {'trend': 'neutral'}
                },
                'overall_trend': 'bullish' if signal['action'] == 'BUY' else 'bearish'
            }
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = self.explainer.format_signal_message(signal, analysis, mtf_analysis)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            message += f"\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n"
            message += f"‚Ä¢ –í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {self.signal_count}\n"
            message += f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–≥–Ω–∞–ª: {datetime.now().strftime('%H:%M:%S')}\n"
            message += f"‚Ä¢ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signal['confidence']*100:.0f}%\n"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ (—Å–∏–º—É–ª—è—Ü–∏—è)
            logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é —Å–∏–≥–Ω–∞–ª –¥–ª—è {signal['symbol']}:")
            print("\n" + "="*60)
            print(message)
            print("="*60 + "\n")
            
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –≤ Telegram
            # await self.telegram_bot.send_message(message)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏–≥–Ω–∞–ª–∞: {e}")
    
    def get_status(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞"""
        return {
            'running': self.running,
            'signal_count': self.signal_count,
            'last_signal_time': self.last_signal_time,
            'trading_pairs': len(self.trading_pairs),
            'min_confidence': self.min_confidence
        }

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    config = {
        'signals': {
            'min_confidence': 0.3,
            'interval': 300,  # 5 –º–∏–Ω—É—Ç –º–µ–∂–¥—É —Å–∏–≥–Ω–∞–ª–∞–º–∏
            'cycle_interval': 60  # 1 –º–∏–Ω—É—Ç–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏
        },
        'trading_pairs': [
            'BTC/USDT', 'ETH/USDT', 'BNB/USDT', 'ADA/USDT', 'SOL/USDT',
            'DOT/USDT', 'LINK/USDT', 'MATIC/USDT', 'AVAX/USDT', 'ATOM/USDT'
        ]
    }
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    bot = EnhancedSignalBot(config)
    
    try:
        await bot.start()
    except KeyboardInterrupt:
        logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        await bot.stop()
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        await bot.stop()

if __name__ == "__main__":
    asyncio.run(main()) 