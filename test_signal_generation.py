#!/usr/bin/env python3
"""
Test Signal Generation - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
"""

import asyncio
import logging
from universal_data_manager import UniversalDataManager
from advanced_ai_engine import AdvancedAIEngine

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

async def test_signal_generation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–∏–≥–Ω–∞–ª–æ–≤"""
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å –æ—á–µ–Ω—å –º—è–≥–∫–∏–º–∏ –ø–æ—Ä–æ–≥–∞–º–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    config = {
        'analysis': {
            'min_confidence': 0.3,  # 30% –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            'min_risk_reward': 1.0,  # 1.0 –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            'max_signals_per_cycle': 5
        }
    }
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    data_manager = UniversalDataManager()
    ai_engine = AdvancedAIEngine(config)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –ø–∞—Ä—ã (–º–µ–Ω—å—à–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
    test_pairs = [
        'BTC/USDT', 'ETH/USDT', 'BNB/USDT', 'ADA/USDT', 'SOL/USDT',
        'DOT/USDT', 'LINK/USDT', 'MATIC/USDT', 'AVAX/USDT', 'ATOM/USDT'
    ]
    
    timeframes = ['15m', '1h', '4h']
    
    logger.info("üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤...")
    logger.info(f"üìä –¢–µ—Å—Ç–æ–≤—ã–µ –ø–∞—Ä—ã: {len(test_pairs)}")
    logger.info(f"‚è±Ô∏è –¢–∞–π–º—Ñ—Ä–µ–π–º—ã: {timeframes}")
    logger.info(f"üéØ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {config['analysis']['min_confidence']*100:.0f}%")
    
    try:
        async with data_manager:
            # –ü–æ–ª—É—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã
            signals = await ai_engine.process_and_collect_signals(
                test_pairs,
                timeframes,
                data_manager,
                min_confidence=config['analysis']['min_confidence'],
                top_n=5
            )
            
            logger.info(f"‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
            logger.info(f"üìà –ù–∞–π–¥–µ–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {len(signals)}")
            
            if signals:
                logger.info("üéØ –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã:")
                for i, signal in enumerate(signals, 1):
                    logger.info(f"  {i}. {signal['symbol']} {signal['action']} "
                              f"conf={signal['confidence']:.3f} "
                              f"alpha={signal['alpha_score']} "
                              f"rr={signal['risk_reward']:.2f}")
            else:
                logger.info("üì≠ –°–∏–≥–Ω–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    await test_signal_generation()

if __name__ == "__main__":
    asyncio.run(main()) 